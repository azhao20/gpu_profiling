Entering trace!
-------------Optimized model-------------------
 OptimizedModule(
  (_orig_mod): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Linear(in_features=512, out_features=1000, bias=True)
  )
)
compile_fx compile_fx
_dynamo.backends.common.py auto_autograd compiler_fn-------------

New compile_fx_inner compile_fx------
Module                    FLOP    % Total
-------------------  ---------  ---------
GraphModule          3628.147M    100.00%
 - aten.convolution  3627.123M     99.97%
 - aten.addmm           1.024M      0.03%
Compile_inner graph: <torch._inductor.graph.GraphLowering object at 0x2b0807e54580>
GraphLowering.run

Graph.run_node:------------------------------
n: primals_1
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_1', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 7, 7], stride=[147, 49, 7, 1]))
))
primals_1
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_2
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_2', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
primals_2
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_3
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_3', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
primals_3
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_4
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_4', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))
))
primals_4
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_5
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_5', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
primals_5
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_6
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_6', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
primals_6
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_7
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))
))
primals_7
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_8
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_8', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
primals_8
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_9
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_9', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
primals_9
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_10
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_10', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))
))
primals_10
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_11
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_11', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
primals_11
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_12
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_12', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
primals_12
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_13
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_13', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))
))
primals_13
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_14
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_14', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
primals_14
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_15
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_15', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
primals_15
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_16
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_16', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 3, 3], stride=[576, 9, 3, 1]))
))
primals_16
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_17
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_17', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
primals_17
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_18
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_18', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
primals_18
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_19
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_19', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))
))
primals_19
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_20
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_20', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
primals_20
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_21
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_21', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
primals_21
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_22
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_22', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 1, 1], stride=[64, 1, 1, 1]))
))
primals_22
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_23
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_23', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
primals_23
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_24
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_24', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
primals_24
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_25
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_25', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))
))
primals_25
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_26
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_26', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
primals_26
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_27
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_27', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
primals_27
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_28
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_28', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))
))
primals_28
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_29
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_29', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
primals_29
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_30
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_30', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
primals_30
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_31
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_31', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1]))
))
primals_31
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_32
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_32', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
primals_32
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_33
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_33', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
primals_33
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_34
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_34', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))
))
primals_34
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_35
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_35', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
primals_35
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_36
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_36', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
primals_36
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_37
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_37', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1]))
))
primals_37
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_38
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_38', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
primals_38
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_39
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_39', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
primals_39
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_40
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_40', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))
))
primals_40
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_41
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_41', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
primals_41
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_42
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_42', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
primals_42
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_43
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_43', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))
))
primals_43
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_44
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_44', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
primals_44
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_45
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_45', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
primals_45
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_46
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_46', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 3, 3], stride=[2304, 9, 3, 1]))
))
primals_46
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_47
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_47', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
primals_47
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_48
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_48', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
primals_48
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_49
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_49', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))
))
primals_49
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_50
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_50', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
primals_50
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_51
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_51', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
primals_51
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_52
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_52', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1]))
))
primals_52
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_53
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_53', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
primals_53
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_54
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_54', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
primals_54
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_55
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_55', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))
))
primals_55
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_56
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_56', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
primals_56
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_57
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_57', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
primals_57
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_58
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_58', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))
))
primals_58
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_59
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_59', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
primals_59
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_60
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_60', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
primals_60
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_61
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_61', layout=FixedLayout('cuda', torch.float32, size=[1000, 512], stride=[512, 1]))
))
primals_61
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_62
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_62', layout=FixedLayout('cuda', torch.float32, size=[1000], stride=[1]))
))
primals_62
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_63
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_63', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
primals_63
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_64
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_64', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
primals_64
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_65
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_65', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
))
primals_65
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_66
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_66', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
primals_66
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_67
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_67', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
primals_67
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_68
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_68', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
))
primals_68
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_69
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_69', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
primals_69
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_70
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_70', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
primals_70
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_71
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_71', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
))
primals_71
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_72
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_72', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
primals_72
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_73
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_73', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
primals_73
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_74
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_74', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
))
primals_74
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_75
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_75', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
primals_75
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_76
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_76', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
primals_76
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_77
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_77', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
))
primals_77
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_78
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_78', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
primals_78
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_79
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_79', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
primals_79
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_80
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_80', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
))
primals_80
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_81
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_81', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
primals_81
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_82
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_82', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
primals_82
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_83
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_83', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
))
primals_83
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_84
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_84', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
primals_84
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_85
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_85', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
primals_85
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_86
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_86', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
))
primals_86
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_87
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_87', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
primals_87
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_88
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_88', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
primals_88
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_89
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_89', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
))
primals_89
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_90
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_90', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
primals_90
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_91
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_91', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
primals_91
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_92
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_92', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
))
primals_92
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_93
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_93', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
primals_93
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_94
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_94', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
primals_94
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_95
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_95', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
))
primals_95
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_96
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_96', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
primals_96
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_97
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_97', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
primals_97
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_98
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_98', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
))
primals_98
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_99
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_99', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
primals_99
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_100
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_100', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
primals_100
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_101
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_101', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
))
primals_101
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_102
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_102', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
primals_102
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_103
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_103', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
primals_103
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_104
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_104', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
))
primals_104
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_105
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_105', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
primals_105
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_106
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_106', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
primals_106
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_107
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_107', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
))
primals_107
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_108
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_108', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
primals_108
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_109
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_109', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
primals_109
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_110
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_110', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
))
primals_110
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_111
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_111', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
primals_111
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_112
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_112', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
primals_112
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_113
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_113', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
))
primals_113
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_114
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_114', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
primals_114
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_115
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_115', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
primals_115
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_116
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_116', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
))
primals_116
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_117
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_117', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
primals_117
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_118
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_118', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
primals_118
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_119
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_119', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
))
primals_119
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_120
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_120', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
primals_120
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_121
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_121', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
primals_121
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_122
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_122', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
))
primals_122
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: primals_123
Flop count: 0
Case 4: super().run_node(n)

Start placeholder in graph-----------

Result after run_node: TensorBox(StorageBox(
  InputBuffer(name='primals_123', layout=FixedLayout('cuda', torch.float32, size=[1, 3, 224, 224], stride=[150528, 50176, 224, 1]))
))
primals_123
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: convolution
Overloadpacket: aten.convolution
Flop count: 236027904
Case 2: call function, n.target in layout_constraints

Call_function in graph------------------
Target: aten.convolution.default,
Args: [TensorBox(StorageBox(
  InputBuffer(name='primals_123', layout=FixedLayout('cuda', torch.float32, size=[1, 3, 224, 224], stride=[150528, 50176, 224, 1]))
)), TensorBox(StorageBox(
  InputBuffer(name='primals_1', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 7, 7], stride=[147, 49, 7, 1]))
)), None, [2, 2], [3, 3], [1, 1], False, [0, 0], 1],
Kwargs: {}...
Before calling out


Not realizing StorageBox with name: primals_123

Not realizing StorageBox with name: primals_1
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf0,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 112, 112], stride=[802816, 12544, 112, 1]),
    inputs=[InputBuffer(name='primals_123', layout=FixedLayout('cuda', torch.float32, size=[1, 3, 224, 224], stride=[150528, 50176, 224, 1])), InputBuffer(name='primals_1', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 7, 7], stride=[147, 49, 7, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (3, 3), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution}
  )
))
buf0
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_65', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
)), 1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_65, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add}
  )
))
Except block: add
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: var_mean
Overloadpacket: aten.var_mean
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.var_mean.correction,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf0,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 112, 112], stride=[802816, 12544, 112, 1]),
    inputs=[InputBuffer(name='primals_123', layout=FixedLayout('cuda', torch.float32, size=[1, 3, 224, 224], stride=[150528, 50176, 224, 1])), InputBuffer(name='primals_1', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 7, 7], stride=[147, 49, 7, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (3, 3), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution}
  )
)), [0, 2, 3]),
Kwargs: {'correction': 0, 'keepdim': True}...
Before calling out


Realized StorageBox:
{'data': ComputedBuffer(name='buf1', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 1, 1, 2], stride=[128, 2, 2, 2, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _, i4 = index
      r0 = rindex
      tmp0 = ops.load(buf0, 112 * ModularIndexing(r0 + 6272 * i4, 112, 112) + 12544 * i1 + ModularIndexing(r0, 1, 112))
      return tmp0
  ,
  ranges=[1, 64, 1, 1, 2],
  reduction_ranges=[6272],
  reduction_type=sum,
  origins={var_mean}
)), 'origins': {var_mean}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf2', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      r0 = rindex
      tmp0 = ops.load(buf1, r0 + 2 * i1)
      return tmp0
  ,
  ranges=[1, 64, 1, 1],
  reduction_ranges=[2],
  reduction_type=sum,
  origins={var_mean}
)), 'origins': {var_mean}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf3', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, _, _ = index
      tmp0 = ops.load(buf2, i1)
      tmp1 = ops.index_expr(12544, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=[1, 64, 1, 1],
  origins={var_mean}
)), 'origins': {var_mean}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf4', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 1, 1, 2], stride=[128, 2, 2, 2, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _, i4 = index
      r0 = rindex
      tmp0 = ops.load(buf0, 112 * ModularIndexing(r0 + 6272 * i4, 112, 112) + 12544 * i1 + ModularIndexing(r0, 1, 112))
      tmp1 = ops.load(buf3, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.square(tmp2)
      return tmp3
  ,
  ranges=[1, 64, 1, 1, 2],
  reduction_ranges=[6272],
  reduction_type=sum,
  origins={var_mean}
)), 'origins': {var_mean}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf5', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      r0 = rindex
      tmp0 = ops.load(buf4, r0 + 2 * i1)
      return tmp0
  ,
  ranges=[1, 64, 1, 1],
  reduction_ranges=[2],
  reduction_type=sum,
  origins={var_mean}
)), 'origins': {var_mean}}
End call_function in graph-----------

Result after run_node: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf5, i1)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf2, i1)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean}
  ))
)))
Except block: var_mean
buf3
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf5, i1)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf2, i1)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean}
  ))
))), 0),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf5, i1)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean}
  )
))

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf5, i1)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean}
  )
))
Except block: getitem
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_1
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf5, i1)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf2, i1)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean}
  ))
))), 1),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  ComputedBuffer(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf2, i1)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean}
  ))
))

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf2, i1)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean}
  ))
))
buf3
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_1
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf5, i1)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean}
  )
)), 1e-05),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf5, i1)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean, add_1}
  )
))
Except block: add_1
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: rsqrt
Overloadpacket: aten.rsqrt
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.rsqrt.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf5, i1)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean, add_1}
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf5, i1)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean, rsqrt, add_1}
  )
))
Except block: rsqrt
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: sub
Overloadpacket: aten.sub
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.sub.Tensor,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf0,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 112, 112], stride=[802816, 12544, 112, 1]),
    inputs=[InputBuffer(name='primals_123', layout=FixedLayout('cuda', torch.float32, size=[1, 3, 224, 224], stride=[150528, 50176, 224, 1])), InputBuffer(name='primals_1', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 7, 7], stride=[147, 49, 7, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (3, 3), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf2, i1)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf0, i3 + 112 * i2 + 12544 * i1)
        tmp1 = ops.load(buf3, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 64, 112, 112],
    origins={sub}
  )
))
Except block: sub
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf0, i3 + 112 * i2 + 12544 * i1)
        tmp1 = ops.load(buf3, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 64, 112, 112],
    origins={sub}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf5, i1)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean, rsqrt, add_1}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf0, i3 + 112 * i2 + 12544 * i1)
        tmp1 = ops.load(buf3, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf5, i1)
        tmp4 = ops.index_expr(12544, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 64, 112, 112],
    origins={mul, var_mean, sub, add_1, rsqrt}
  )
))
Except block: mul
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf2, i1)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean}
  ))
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf2, i1)
            tmp1 = ops.index_expr(12544, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[64], stride=[1]),
    origins=
  )
)
Except block: squeeze
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_1
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf5, i1)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean, rsqrt, add_1}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf6', layout=FlexibleLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf5, i0)
      tmp1 = ops.index_expr(12544, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1e-05, torch.float32)
      tmp4 = tmp2 + tmp3
      tmp5 = ops.rsqrt(tmp4)
      return tmp5
  ,
  ranges=(64,),
  origins={var_mean, squeeze_1, rsqrt, add_1}
)), 'origins': {var_mean, squeeze_1, rsqrt, add_1}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf6', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf5, i0)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(64,),
    origins={var_mean, squeeze_1, rsqrt, add_1}
  ))
))
buf6
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_1
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf2, i1)
            tmp1 = ops.index_expr(12544, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[64], stride=[1]),
    origins=
  )
), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf3, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_1}
  )
))
Except block: mul_1
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_2
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_63', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_63, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_2}
  )
))
Except block: mul_2
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_2
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf3, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_1}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_63, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_2}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf7', layout=FlexibleLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf3, i0)
      tmp1 = ops.constant(0.1, torch.float32)
      tmp2 = tmp0 * tmp1
      tmp3 = ops.load(primals_63, i0)
      tmp4 = ops.constant(0.9, torch.float32)
      tmp5 = tmp3 * tmp4
      tmp6 = tmp2 + tmp5
      return tmp6
  ,
  ranges=[64],
  origins={add_2, mul_2, mul_1}
)), 'origins': {add_2, mul_2, mul_1}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf7', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf3, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_63, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[64],
    origins={add_2, mul_2, mul_1}
  ))
))
buf7
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_2
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf5, i1)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf5, i1)
            tmp1 = ops.index_expr(12544, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean}
      )
    ),
    size=(64,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_2, var_mean}
  )
)
Except block: squeeze_2
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_3
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf5, i1)
            tmp1 = ops.index_expr(12544, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean}
      )
    ),
    size=(64,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_2, var_mean}
  )
), 1.0000797257434426),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf5, i0)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0000797257434426, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(64,),
    origins={mul_3}
  )
))
Except block: mul_3
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_4
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf5, i0)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0000797257434426, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(64,),
    origins={mul_3}
  )
)), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf5, i0)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0000797257434426, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(64,),
    origins={mul_4, mul_3}
  )
))
Except block: mul_4
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_5
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_64', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_64, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_5}
  )
))
Except block: mul_5
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_3
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf5, i0)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0000797257434426, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(64,),
    origins={mul_4, mul_3}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_64, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_5}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf8', layout=FlexibleLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf5, i0)
      tmp1 = ops.index_expr(12544, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1.0000797257434426, torch.float32)
      tmp4 = tmp2 * tmp3
      tmp5 = ops.constant(0.1, torch.float32)
      tmp6 = tmp4 * tmp5
      tmp7 = ops.load(primals_64, i0)
      tmp8 = ops.constant(0.9, torch.float32)
      tmp9 = tmp7 * tmp8
      tmp10 = tmp6 + tmp9
      return tmp10
  ,
  ranges=(64,),
  origins={mul_4, add_3, mul_5, mul_3}
)), 'origins': {mul_4, add_3, mul_5, mul_3}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf8', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf5, i0)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0000797257434426, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_64, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(64,),
    origins={mul_4, add_3, mul_5, mul_3}
  ))
))
buf8
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_2', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_2', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_1
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_2', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_2', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_1
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_2
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_3', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_3', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_2
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_3
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_3', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_3', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_3
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_6
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf0, i3 + 112 * i2 + 12544 * i1)
        tmp1 = ops.load(buf3, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf5, i1)
        tmp4 = ops.index_expr(12544, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 64, 112, 112],
    origins={mul, var_mean, sub, add_1, rsqrt}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_2', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf0, i3 + 112 * i2 + 12544 * i1)
        tmp1 = ops.load(buf3, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf5, i1)
        tmp4 = ops.index_expr(12544, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_2, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 64, 112, 112],
    origins={mul, var_mean, add_1, sub, mul_6, rsqrt}
  )
))
Except block: mul_6
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_4
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf0, i3 + 112 * i2 + 12544 * i1)
        tmp1 = ops.load(buf3, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf5, i1)
        tmp4 = ops.index_expr(12544, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_2, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 64, 112, 112],
    origins={mul, var_mean, add_1, sub, mul_6, rsqrt}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_3', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf0, i3 + 112 * i2 + 12544 * i1)
        tmp1 = ops.load(buf3, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf5, i1)
        tmp4 = ops.index_expr(12544, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_2, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_3, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 64, 112, 112],
    origins={mul, var_mean, add_1, sub, mul_6, rsqrt, add_4}
  )
))
Except block: add_4
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: relu
Overloadpacket: aten.relu
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.relu.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf0, i3 + 112 * i2 + 12544 * i1)
        tmp1 = ops.load(buf3, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf5, i1)
        tmp4 = ops.index_expr(12544, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_2, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_3, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 64, 112, 112],
    origins={mul, var_mean, add_1, sub, mul_6, rsqrt, add_4}
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf9', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 112, 112], stride=[802816, 12544, 112, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf0, i3 + 112 * i2 + 12544 * i1)
      tmp1 = ops.load(buf3, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf5, i1)
      tmp4 = ops.index_expr(12544, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_2, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_3, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.relu(tmp13)
      return tmp14
  ,
  ranges=[1, 64, 112, 112],
  origins={var_mean, add_1, mul_6, rsqrt, add_4, mul, sub, relu}
)), 'origins': {var_mean, add_1, mul_6, rsqrt, add_4, mul, sub, relu}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf9', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 112, 112], stride=[802816, 12544, 112, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf0, i3 + 112 * i2 + 12544 * i1)
        tmp1 = ops.load(buf3, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf5, i1)
        tmp4 = ops.index_expr(12544, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_2, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_3, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 64, 112, 112],
    origins={var_mean, add_1, mul_6, rsqrt, add_4, mul, sub, relu}
  ))
))
buf9
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: max_pool2d_with_indices
Overloadpacket: aten.max_pool2d_with_indices
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.max_pool2d_with_indices.default,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf9', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 112, 112], stride=[802816, 12544, 112, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf0, i3 + 112 * i2 + 12544 * i1)
        tmp1 = ops.load(buf3, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf5, i1)
        tmp4 = ops.index_expr(12544, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_2, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_3, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 64, 112, 112],
    origins={var_mean, add_1, mul_6, rsqrt, add_4, mul, sub, relu}
  ))
)), [3, 3], [2, 2], [1, 1]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp1 = ops.index_expr(0, torch.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp4 = ops.index_expr(112, torch.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp2 & tmp5
        tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp8 = ops.index_expr(0, torch.int64)
        tmp9 = tmp7 >= tmp8
        tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp11 = ops.index_expr(112, torch.int64)
        tmp12 = tmp10 < tmp11
        tmp13 = tmp9 & tmp12
        tmp14 = tmp6 & tmp13
        tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp16 = ops.masked(tmp14, tmp15, -inf)
        tmp17 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp18 = ops.index_expr(0, torch.int64)
        tmp19 = tmp17 >= tmp18
        tmp20 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp21 = ops.index_expr(112, torch.int64)
        tmp22 = tmp20 < tmp21
        tmp23 = tmp19 & tmp22
        tmp24 = ops.index_expr(2 * i3, torch.int64)
        tmp25 = ops.index_expr(0, torch.int64)
        tmp26 = tmp24 >= tmp25
        tmp27 = ops.index_expr(2 * i3, torch.int64)
        tmp28 = ops.index_expr(112, torch.int64)
        tmp29 = tmp27 < tmp28
        tmp30 = tmp26 & tmp29
        tmp31 = tmp23 & tmp30
        tmp32 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp33 = ops.masked(tmp31, tmp32, -inf)
        tmp34 = ops.maximum(tmp33, tmp16)
        tmp35 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp36 = ops.index_expr(0, torch.int64)
        tmp37 = tmp35 >= tmp36
        tmp38 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp39 = ops.index_expr(112, torch.int64)
        tmp40 = tmp38 < tmp39
        tmp41 = tmp37 & tmp40
        tmp42 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp43 = ops.index_expr(0, torch.int64)
        tmp44 = tmp42 >= tmp43
        tmp45 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp46 = ops.index_expr(112, torch.int64)
        tmp47 = tmp45 < tmp46
        tmp48 = tmp44 & tmp47
        tmp49 = tmp41 & tmp48
        tmp50 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp51 = ops.masked(tmp49, tmp50, -inf)
        tmp52 = ops.maximum(tmp51, tmp34)
        tmp53 = ops.index_expr(2 * i2, torch.int64)
        tmp54 = ops.index_expr(0, torch.int64)
        tmp55 = tmp53 >= tmp54
        tmp56 = ops.index_expr(2 * i2, torch.int64)
        tmp57 = ops.index_expr(112, torch.int64)
        tmp58 = tmp56 < tmp57
        tmp59 = tmp55 & tmp58
        tmp60 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp61 = ops.index_expr(0, torch.int64)
        tmp62 = tmp60 >= tmp61
        tmp63 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp64 = ops.index_expr(112, torch.int64)
        tmp65 = tmp63 < tmp64
        tmp66 = tmp62 & tmp65
        tmp67 = tmp59 & tmp66
        tmp68 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp69 = ops.masked(tmp67, tmp68, -inf)
        tmp70 = ops.maximum(tmp69, tmp52)
        tmp71 = ops.index_expr(2 * i2, torch.int64)
        tmp72 = ops.index_expr(0, torch.int64)
        tmp73 = tmp71 >= tmp72
        tmp74 = ops.index_expr(2 * i2, torch.int64)
        tmp75 = ops.index_expr(112, torch.int64)
        tmp76 = tmp74 < tmp75
        tmp77 = tmp73 & tmp76
        tmp78 = ops.index_expr(2 * i3, torch.int64)
        tmp79 = ops.index_expr(0, torch.int64)
        tmp80 = tmp78 >= tmp79
        tmp81 = ops.index_expr(2 * i3, torch.int64)
        tmp82 = ops.index_expr(112, torch.int64)
        tmp83 = tmp81 < tmp82
        tmp84 = tmp80 & tmp83
        tmp85 = tmp77 & tmp84
        tmp86 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
        tmp87 = ops.masked(tmp85, tmp86, -inf)
        tmp88 = ops.maximum(tmp87, tmp70)
        tmp89 = ops.index_expr(2 * i2, torch.int64)
        tmp90 = ops.index_expr(0, torch.int64)
        tmp91 = tmp89 >= tmp90
        tmp92 = ops.index_expr(2 * i2, torch.int64)
        tmp93 = ops.index_expr(112, torch.int64)
        tmp94 = tmp92 < tmp93
        tmp95 = tmp91 & tmp94
        tmp96 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp97 = ops.index_expr(0, torch.int64)
        tmp98 = tmp96 >= tmp97
        tmp99 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp100 = ops.index_expr(112, torch.int64)
        tmp101 = tmp99 < tmp100
        tmp102 = tmp98 & tmp101
        tmp103 = tmp95 & tmp102
        tmp104 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp105 = ops.masked(tmp103, tmp104, -inf)
        tmp106 = ops.maximum(tmp105, tmp88)
        tmp107 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp108 = ops.index_expr(0, torch.int64)
        tmp109 = tmp107 >= tmp108
        tmp110 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp111 = ops.index_expr(112, torch.int64)
        tmp112 = tmp110 < tmp111
        tmp113 = tmp109 & tmp112
        tmp114 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp115 = ops.index_expr(0, torch.int64)
        tmp116 = tmp114 >= tmp115
        tmp117 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp118 = ops.index_expr(112, torch.int64)
        tmp119 = tmp117 < tmp118
        tmp120 = tmp116 & tmp119
        tmp121 = tmp113 & tmp120
        tmp122 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp123 = ops.masked(tmp121, tmp122, -inf)
        tmp124 = ops.maximum(tmp123, tmp106)
        tmp125 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp126 = ops.index_expr(0, torch.int64)
        tmp127 = tmp125 >= tmp126
        tmp128 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp129 = ops.index_expr(112, torch.int64)
        tmp130 = tmp128 < tmp129
        tmp131 = tmp127 & tmp130
        tmp132 = ops.index_expr(2 * i3, torch.int64)
        tmp133 = ops.index_expr(0, torch.int64)
        tmp134 = tmp132 >= tmp133
        tmp135 = ops.index_expr(2 * i3, torch.int64)
        tmp136 = ops.index_expr(112, torch.int64)
        tmp137 = tmp135 < tmp136
        tmp138 = tmp134 & tmp137
        tmp139 = tmp131 & tmp138
        tmp140 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp141 = ops.masked(tmp139, tmp140, -inf)
        tmp142 = ops.maximum(tmp141, tmp124)
        tmp143 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp144 = ops.index_expr(0, torch.int64)
        tmp145 = tmp143 >= tmp144
        tmp146 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp147 = ops.index_expr(112, torch.int64)
        tmp148 = tmp146 < tmp147
        tmp149 = tmp145 & tmp148
        tmp150 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp151 = ops.index_expr(0, torch.int64)
        tmp152 = tmp150 >= tmp151
        tmp153 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp154 = ops.index_expr(112, torch.int64)
        tmp155 = tmp153 < tmp154
        tmp156 = tmp152 & tmp155
        tmp157 = tmp149 & tmp156
        tmp158 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp159 = ops.masked(tmp157, tmp158, -inf)
        tmp160 = ops.maximum(tmp159, tmp142)
        return tmp160
    ,
    ranges=[1, 64, 56, 56],
    origins={max_pool2d_with_indices}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp1 = ops.index_expr(0, torch.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp4 = ops.index_expr(112, torch.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp2 & tmp5
        tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp8 = ops.index_expr(0, torch.int64)
        tmp9 = tmp7 >= tmp8
        tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp11 = ops.index_expr(112, torch.int64)
        tmp12 = tmp10 < tmp11
        tmp13 = tmp9 & tmp12
        tmp14 = tmp6 & tmp13
        tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp16 = ops.masked(tmp14, tmp15, -inf)
        tmp17 = ops.index_expr(-113 + 2 * i3 + 224 * i2, torch.int64)
        tmp18 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp19 = ops.index_expr(0, torch.int64)
        tmp20 = tmp18 >= tmp19
        tmp21 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp22 = ops.index_expr(112, torch.int64)
        tmp23 = tmp21 < tmp22
        tmp24 = tmp20 & tmp23
        tmp25 = ops.index_expr(2 * i3, torch.int64)
        tmp26 = ops.index_expr(0, torch.int64)
        tmp27 = tmp25 >= tmp26
        tmp28 = ops.index_expr(2 * i3, torch.int64)
        tmp29 = ops.index_expr(112, torch.int64)
        tmp30 = tmp28 < tmp29
        tmp31 = tmp27 & tmp30
        tmp32 = tmp24 & tmp31
        tmp33 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp34 = ops.masked(tmp32, tmp33, -inf)
        tmp35 = ops.index_expr(-112 + 2 * i3 + 224 * i2, torch.int64)
        tmp36 = tmp34 > tmp16
        tmp37 = ops.where(tmp36, tmp35, tmp17)
        tmp38 = ops.maximum(tmp34, tmp16)
        tmp39 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp40 = ops.index_expr(0, torch.int64)
        tmp41 = tmp39 >= tmp40
        tmp42 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp43 = ops.index_expr(112, torch.int64)
        tmp44 = tmp42 < tmp43
        tmp45 = tmp41 & tmp44
        tmp46 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp47 = ops.index_expr(0, torch.int64)
        tmp48 = tmp46 >= tmp47
        tmp49 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp50 = ops.index_expr(112, torch.int64)
        tmp51 = tmp49 < tmp50
        tmp52 = tmp48 & tmp51
        tmp53 = tmp45 & tmp52
        tmp54 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp55 = ops.masked(tmp53, tmp54, -inf)
        tmp56 = ops.index_expr(-111 + 2 * i3 + 224 * i2, torch.int64)
        tmp57 = tmp55 > tmp38
        tmp58 = ops.where(tmp57, tmp56, tmp37)
        tmp59 = ops.maximum(tmp55, tmp38)
        tmp60 = ops.index_expr(2 * i2, torch.int64)
        tmp61 = ops.index_expr(0, torch.int64)
        tmp62 = tmp60 >= tmp61
        tmp63 = ops.index_expr(2 * i2, torch.int64)
        tmp64 = ops.index_expr(112, torch.int64)
        tmp65 = tmp63 < tmp64
        tmp66 = tmp62 & tmp65
        tmp67 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp68 = ops.index_expr(0, torch.int64)
        tmp69 = tmp67 >= tmp68
        tmp70 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp71 = ops.index_expr(112, torch.int64)
        tmp72 = tmp70 < tmp71
        tmp73 = tmp69 & tmp72
        tmp74 = tmp66 & tmp73
        tmp75 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp76 = ops.masked(tmp74, tmp75, -inf)
        tmp77 = ops.index_expr(-1 + 2 * i3 + 224 * i2, torch.int64)
        tmp78 = tmp76 > tmp59
        tmp79 = ops.where(tmp78, tmp77, tmp58)
        tmp80 = ops.maximum(tmp76, tmp59)
        tmp81 = ops.index_expr(2 * i2, torch.int64)
        tmp82 = ops.index_expr(0, torch.int64)
        tmp83 = tmp81 >= tmp82
        tmp84 = ops.index_expr(2 * i2, torch.int64)
        tmp85 = ops.index_expr(112, torch.int64)
        tmp86 = tmp84 < tmp85
        tmp87 = tmp83 & tmp86
        tmp88 = ops.index_expr(2 * i3, torch.int64)
        tmp89 = ops.index_expr(0, torch.int64)
        tmp90 = tmp88 >= tmp89
        tmp91 = ops.index_expr(2 * i3, torch.int64)
        tmp92 = ops.index_expr(112, torch.int64)
        tmp93 = tmp91 < tmp92
        tmp94 = tmp90 & tmp93
        tmp95 = tmp87 & tmp94
        tmp96 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
        tmp97 = ops.masked(tmp95, tmp96, -inf)
        tmp98 = ops.index_expr(2 * i3 + 224 * i2, torch.int64)
        tmp99 = tmp97 > tmp80
        tmp100 = ops.where(tmp99, tmp98, tmp79)
        tmp101 = ops.maximum(tmp97, tmp80)
        tmp102 = ops.index_expr(2 * i2, torch.int64)
        tmp103 = ops.index_expr(0, torch.int64)
        tmp104 = tmp102 >= tmp103
        tmp105 = ops.index_expr(2 * i2, torch.int64)
        tmp106 = ops.index_expr(112, torch.int64)
        tmp107 = tmp105 < tmp106
        tmp108 = tmp104 & tmp107
        tmp109 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp110 = ops.index_expr(0, torch.int64)
        tmp111 = tmp109 >= tmp110
        tmp112 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp113 = ops.index_expr(112, torch.int64)
        tmp114 = tmp112 < tmp113
        tmp115 = tmp111 & tmp114
        tmp116 = tmp108 & tmp115
        tmp117 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp118 = ops.masked(tmp116, tmp117, -inf)
        tmp119 = ops.index_expr(1 + 2 * i3 + 224 * i2, torch.int64)
        tmp120 = tmp118 > tmp101
        tmp121 = ops.where(tmp120, tmp119, tmp100)
        tmp122 = ops.maximum(tmp118, tmp101)
        tmp123 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp124 = ops.index_expr(0, torch.int64)
        tmp125 = tmp123 >= tmp124
        tmp126 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp127 = ops.index_expr(112, torch.int64)
        tmp128 = tmp126 < tmp127
        tmp129 = tmp125 & tmp128
        tmp130 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp131 = ops.index_expr(0, torch.int64)
        tmp132 = tmp130 >= tmp131
        tmp133 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp134 = ops.index_expr(112, torch.int64)
        tmp135 = tmp133 < tmp134
        tmp136 = tmp132 & tmp135
        tmp137 = tmp129 & tmp136
        tmp138 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp139 = ops.masked(tmp137, tmp138, -inf)
        tmp140 = ops.index_expr(111 + 2 * i3 + 224 * i2, torch.int64)
        tmp141 = tmp139 > tmp122
        tmp142 = ops.where(tmp141, tmp140, tmp121)
        tmp143 = ops.maximum(tmp139, tmp122)
        tmp144 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp145 = ops.index_expr(0, torch.int64)
        tmp146 = tmp144 >= tmp145
        tmp147 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp148 = ops.index_expr(112, torch.int64)
        tmp149 = tmp147 < tmp148
        tmp150 = tmp146 & tmp149
        tmp151 = ops.index_expr(2 * i3, torch.int64)
        tmp152 = ops.index_expr(0, torch.int64)
        tmp153 = tmp151 >= tmp152
        tmp154 = ops.index_expr(2 * i3, torch.int64)
        tmp155 = ops.index_expr(112, torch.int64)
        tmp156 = tmp154 < tmp155
        tmp157 = tmp153 & tmp156
        tmp158 = tmp150 & tmp157
        tmp159 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp160 = ops.masked(tmp158, tmp159, -inf)
        tmp161 = ops.index_expr(112 + 2 * i3 + 224 * i2, torch.int64)
        tmp162 = tmp160 > tmp143
        tmp163 = ops.where(tmp162, tmp161, tmp142)
        tmp164 = ops.maximum(tmp160, tmp143)
        tmp165 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp166 = ops.index_expr(0, torch.int64)
        tmp167 = tmp165 >= tmp166
        tmp168 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp169 = ops.index_expr(112, torch.int64)
        tmp170 = tmp168 < tmp169
        tmp171 = tmp167 & tmp170
        tmp172 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp173 = ops.index_expr(0, torch.int64)
        tmp174 = tmp172 >= tmp173
        tmp175 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp176 = ops.index_expr(112, torch.int64)
        tmp177 = tmp175 < tmp176
        tmp178 = tmp174 & tmp177
        tmp179 = tmp171 & tmp178
        tmp180 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp181 = ops.masked(tmp179, tmp180, -inf)
        tmp182 = ops.index_expr(113 + 2 * i3 + 224 * i2, torch.int64)
        tmp183 = tmp181 > tmp164
        tmp184 = ops.where(tmp183, tmp182, tmp163)
        tmp185 = ops.maximum(tmp181, tmp164)
        return tmp184
    ,
    ranges=[1, 64, 56, 56],
    origins={max_pool2d_with_indices}
  )
)))
Except block: max_pool2d_with_indices
Except block: max_pool2d_with_indices
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_2
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp1 = ops.index_expr(0, torch.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp4 = ops.index_expr(112, torch.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp2 & tmp5
        tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp8 = ops.index_expr(0, torch.int64)
        tmp9 = tmp7 >= tmp8
        tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp11 = ops.index_expr(112, torch.int64)
        tmp12 = tmp10 < tmp11
        tmp13 = tmp9 & tmp12
        tmp14 = tmp6 & tmp13
        tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp16 = ops.masked(tmp14, tmp15, -inf)
        tmp17 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp18 = ops.index_expr(0, torch.int64)
        tmp19 = tmp17 >= tmp18
        tmp20 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp21 = ops.index_expr(112, torch.int64)
        tmp22 = tmp20 < tmp21
        tmp23 = tmp19 & tmp22
        tmp24 = ops.index_expr(2 * i3, torch.int64)
        tmp25 = ops.index_expr(0, torch.int64)
        tmp26 = tmp24 >= tmp25
        tmp27 = ops.index_expr(2 * i3, torch.int64)
        tmp28 = ops.index_expr(112, torch.int64)
        tmp29 = tmp27 < tmp28
        tmp30 = tmp26 & tmp29
        tmp31 = tmp23 & tmp30
        tmp32 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp33 = ops.masked(tmp31, tmp32, -inf)
        tmp34 = ops.maximum(tmp33, tmp16)
        tmp35 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp36 = ops.index_expr(0, torch.int64)
        tmp37 = tmp35 >= tmp36
        tmp38 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp39 = ops.index_expr(112, torch.int64)
        tmp40 = tmp38 < tmp39
        tmp41 = tmp37 & tmp40
        tmp42 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp43 = ops.index_expr(0, torch.int64)
        tmp44 = tmp42 >= tmp43
        tmp45 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp46 = ops.index_expr(112, torch.int64)
        tmp47 = tmp45 < tmp46
        tmp48 = tmp44 & tmp47
        tmp49 = tmp41 & tmp48
        tmp50 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp51 = ops.masked(tmp49, tmp50, -inf)
        tmp52 = ops.maximum(tmp51, tmp34)
        tmp53 = ops.index_expr(2 * i2, torch.int64)
        tmp54 = ops.index_expr(0, torch.int64)
        tmp55 = tmp53 >= tmp54
        tmp56 = ops.index_expr(2 * i2, torch.int64)
        tmp57 = ops.index_expr(112, torch.int64)
        tmp58 = tmp56 < tmp57
        tmp59 = tmp55 & tmp58
        tmp60 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp61 = ops.index_expr(0, torch.int64)
        tmp62 = tmp60 >= tmp61
        tmp63 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp64 = ops.index_expr(112, torch.int64)
        tmp65 = tmp63 < tmp64
        tmp66 = tmp62 & tmp65
        tmp67 = tmp59 & tmp66
        tmp68 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp69 = ops.masked(tmp67, tmp68, -inf)
        tmp70 = ops.maximum(tmp69, tmp52)
        tmp71 = ops.index_expr(2 * i2, torch.int64)
        tmp72 = ops.index_expr(0, torch.int64)
        tmp73 = tmp71 >= tmp72
        tmp74 = ops.index_expr(2 * i2, torch.int64)
        tmp75 = ops.index_expr(112, torch.int64)
        tmp76 = tmp74 < tmp75
        tmp77 = tmp73 & tmp76
        tmp78 = ops.index_expr(2 * i3, torch.int64)
        tmp79 = ops.index_expr(0, torch.int64)
        tmp80 = tmp78 >= tmp79
        tmp81 = ops.index_expr(2 * i3, torch.int64)
        tmp82 = ops.index_expr(112, torch.int64)
        tmp83 = tmp81 < tmp82
        tmp84 = tmp80 & tmp83
        tmp85 = tmp77 & tmp84
        tmp86 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
        tmp87 = ops.masked(tmp85, tmp86, -inf)
        tmp88 = ops.maximum(tmp87, tmp70)
        tmp89 = ops.index_expr(2 * i2, torch.int64)
        tmp90 = ops.index_expr(0, torch.int64)
        tmp91 = tmp89 >= tmp90
        tmp92 = ops.index_expr(2 * i2, torch.int64)
        tmp93 = ops.index_expr(112, torch.int64)
        tmp94 = tmp92 < tmp93
        tmp95 = tmp91 & tmp94
        tmp96 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp97 = ops.index_expr(0, torch.int64)
        tmp98 = tmp96 >= tmp97
        tmp99 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp100 = ops.index_expr(112, torch.int64)
        tmp101 = tmp99 < tmp100
        tmp102 = tmp98 & tmp101
        tmp103 = tmp95 & tmp102
        tmp104 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp105 = ops.masked(tmp103, tmp104, -inf)
        tmp106 = ops.maximum(tmp105, tmp88)
        tmp107 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp108 = ops.index_expr(0, torch.int64)
        tmp109 = tmp107 >= tmp108
        tmp110 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp111 = ops.index_expr(112, torch.int64)
        tmp112 = tmp110 < tmp111
        tmp113 = tmp109 & tmp112
        tmp114 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp115 = ops.index_expr(0, torch.int64)
        tmp116 = tmp114 >= tmp115
        tmp117 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp118 = ops.index_expr(112, torch.int64)
        tmp119 = tmp117 < tmp118
        tmp120 = tmp116 & tmp119
        tmp121 = tmp113 & tmp120
        tmp122 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp123 = ops.masked(tmp121, tmp122, -inf)
        tmp124 = ops.maximum(tmp123, tmp106)
        tmp125 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp126 = ops.index_expr(0, torch.int64)
        tmp127 = tmp125 >= tmp126
        tmp128 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp129 = ops.index_expr(112, torch.int64)
        tmp130 = tmp128 < tmp129
        tmp131 = tmp127 & tmp130
        tmp132 = ops.index_expr(2 * i3, torch.int64)
        tmp133 = ops.index_expr(0, torch.int64)
        tmp134 = tmp132 >= tmp133
        tmp135 = ops.index_expr(2 * i3, torch.int64)
        tmp136 = ops.index_expr(112, torch.int64)
        tmp137 = tmp135 < tmp136
        tmp138 = tmp134 & tmp137
        tmp139 = tmp131 & tmp138
        tmp140 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp141 = ops.masked(tmp139, tmp140, -inf)
        tmp142 = ops.maximum(tmp141, tmp124)
        tmp143 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp144 = ops.index_expr(0, torch.int64)
        tmp145 = tmp143 >= tmp144
        tmp146 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp147 = ops.index_expr(112, torch.int64)
        tmp148 = tmp146 < tmp147
        tmp149 = tmp145 & tmp148
        tmp150 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp151 = ops.index_expr(0, torch.int64)
        tmp152 = tmp150 >= tmp151
        tmp153 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp154 = ops.index_expr(112, torch.int64)
        tmp155 = tmp153 < tmp154
        tmp156 = tmp152 & tmp155
        tmp157 = tmp149 & tmp156
        tmp158 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp159 = ops.masked(tmp157, tmp158, -inf)
        tmp160 = ops.maximum(tmp159, tmp142)
        return tmp160
    ,
    ranges=[1, 64, 56, 56],
    origins={max_pool2d_with_indices}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp1 = ops.index_expr(0, torch.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp4 = ops.index_expr(112, torch.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp2 & tmp5
        tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp8 = ops.index_expr(0, torch.int64)
        tmp9 = tmp7 >= tmp8
        tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp11 = ops.index_expr(112, torch.int64)
        tmp12 = tmp10 < tmp11
        tmp13 = tmp9 & tmp12
        tmp14 = tmp6 & tmp13
        tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp16 = ops.masked(tmp14, tmp15, -inf)
        tmp17 = ops.index_expr(-113 + 2 * i3 + 224 * i2, torch.int64)
        tmp18 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp19 = ops.index_expr(0, torch.int64)
        tmp20 = tmp18 >= tmp19
        tmp21 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp22 = ops.index_expr(112, torch.int64)
        tmp23 = tmp21 < tmp22
        tmp24 = tmp20 & tmp23
        tmp25 = ops.index_expr(2 * i3, torch.int64)
        tmp26 = ops.index_expr(0, torch.int64)
        tmp27 = tmp25 >= tmp26
        tmp28 = ops.index_expr(2 * i3, torch.int64)
        tmp29 = ops.index_expr(112, torch.int64)
        tmp30 = tmp28 < tmp29
        tmp31 = tmp27 & tmp30
        tmp32 = tmp24 & tmp31
        tmp33 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp34 = ops.masked(tmp32, tmp33, -inf)
        tmp35 = ops.index_expr(-112 + 2 * i3 + 224 * i2, torch.int64)
        tmp36 = tmp34 > tmp16
        tmp37 = ops.where(tmp36, tmp35, tmp17)
        tmp38 = ops.maximum(tmp34, tmp16)
        tmp39 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp40 = ops.index_expr(0, torch.int64)
        tmp41 = tmp39 >= tmp40
        tmp42 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp43 = ops.index_expr(112, torch.int64)
        tmp44 = tmp42 < tmp43
        tmp45 = tmp41 & tmp44
        tmp46 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp47 = ops.index_expr(0, torch.int64)
        tmp48 = tmp46 >= tmp47
        tmp49 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp50 = ops.index_expr(112, torch.int64)
        tmp51 = tmp49 < tmp50
        tmp52 = tmp48 & tmp51
        tmp53 = tmp45 & tmp52
        tmp54 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp55 = ops.masked(tmp53, tmp54, -inf)
        tmp56 = ops.index_expr(-111 + 2 * i3 + 224 * i2, torch.int64)
        tmp57 = tmp55 > tmp38
        tmp58 = ops.where(tmp57, tmp56, tmp37)
        tmp59 = ops.maximum(tmp55, tmp38)
        tmp60 = ops.index_expr(2 * i2, torch.int64)
        tmp61 = ops.index_expr(0, torch.int64)
        tmp62 = tmp60 >= tmp61
        tmp63 = ops.index_expr(2 * i2, torch.int64)
        tmp64 = ops.index_expr(112, torch.int64)
        tmp65 = tmp63 < tmp64
        tmp66 = tmp62 & tmp65
        tmp67 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp68 = ops.index_expr(0, torch.int64)
        tmp69 = tmp67 >= tmp68
        tmp70 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp71 = ops.index_expr(112, torch.int64)
        tmp72 = tmp70 < tmp71
        tmp73 = tmp69 & tmp72
        tmp74 = tmp66 & tmp73
        tmp75 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp76 = ops.masked(tmp74, tmp75, -inf)
        tmp77 = ops.index_expr(-1 + 2 * i3 + 224 * i2, torch.int64)
        tmp78 = tmp76 > tmp59
        tmp79 = ops.where(tmp78, tmp77, tmp58)
        tmp80 = ops.maximum(tmp76, tmp59)
        tmp81 = ops.index_expr(2 * i2, torch.int64)
        tmp82 = ops.index_expr(0, torch.int64)
        tmp83 = tmp81 >= tmp82
        tmp84 = ops.index_expr(2 * i2, torch.int64)
        tmp85 = ops.index_expr(112, torch.int64)
        tmp86 = tmp84 < tmp85
        tmp87 = tmp83 & tmp86
        tmp88 = ops.index_expr(2 * i3, torch.int64)
        tmp89 = ops.index_expr(0, torch.int64)
        tmp90 = tmp88 >= tmp89
        tmp91 = ops.index_expr(2 * i3, torch.int64)
        tmp92 = ops.index_expr(112, torch.int64)
        tmp93 = tmp91 < tmp92
        tmp94 = tmp90 & tmp93
        tmp95 = tmp87 & tmp94
        tmp96 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
        tmp97 = ops.masked(tmp95, tmp96, -inf)
        tmp98 = ops.index_expr(2 * i3 + 224 * i2, torch.int64)
        tmp99 = tmp97 > tmp80
        tmp100 = ops.where(tmp99, tmp98, tmp79)
        tmp101 = ops.maximum(tmp97, tmp80)
        tmp102 = ops.index_expr(2 * i2, torch.int64)
        tmp103 = ops.index_expr(0, torch.int64)
        tmp104 = tmp102 >= tmp103
        tmp105 = ops.index_expr(2 * i2, torch.int64)
        tmp106 = ops.index_expr(112, torch.int64)
        tmp107 = tmp105 < tmp106
        tmp108 = tmp104 & tmp107
        tmp109 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp110 = ops.index_expr(0, torch.int64)
        tmp111 = tmp109 >= tmp110
        tmp112 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp113 = ops.index_expr(112, torch.int64)
        tmp114 = tmp112 < tmp113
        tmp115 = tmp111 & tmp114
        tmp116 = tmp108 & tmp115
        tmp117 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp118 = ops.masked(tmp116, tmp117, -inf)
        tmp119 = ops.index_expr(1 + 2 * i3 + 224 * i2, torch.int64)
        tmp120 = tmp118 > tmp101
        tmp121 = ops.where(tmp120, tmp119, tmp100)
        tmp122 = ops.maximum(tmp118, tmp101)
        tmp123 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp124 = ops.index_expr(0, torch.int64)
        tmp125 = tmp123 >= tmp124
        tmp126 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp127 = ops.index_expr(112, torch.int64)
        tmp128 = tmp126 < tmp127
        tmp129 = tmp125 & tmp128
        tmp130 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp131 = ops.index_expr(0, torch.int64)
        tmp132 = tmp130 >= tmp131
        tmp133 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp134 = ops.index_expr(112, torch.int64)
        tmp135 = tmp133 < tmp134
        tmp136 = tmp132 & tmp135
        tmp137 = tmp129 & tmp136
        tmp138 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp139 = ops.masked(tmp137, tmp138, -inf)
        tmp140 = ops.index_expr(111 + 2 * i3 + 224 * i2, torch.int64)
        tmp141 = tmp139 > tmp122
        tmp142 = ops.where(tmp141, tmp140, tmp121)
        tmp143 = ops.maximum(tmp139, tmp122)
        tmp144 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp145 = ops.index_expr(0, torch.int64)
        tmp146 = tmp144 >= tmp145
        tmp147 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp148 = ops.index_expr(112, torch.int64)
        tmp149 = tmp147 < tmp148
        tmp150 = tmp146 & tmp149
        tmp151 = ops.index_expr(2 * i3, torch.int64)
        tmp152 = ops.index_expr(0, torch.int64)
        tmp153 = tmp151 >= tmp152
        tmp154 = ops.index_expr(2 * i3, torch.int64)
        tmp155 = ops.index_expr(112, torch.int64)
        tmp156 = tmp154 < tmp155
        tmp157 = tmp153 & tmp156
        tmp158 = tmp150 & tmp157
        tmp159 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp160 = ops.masked(tmp158, tmp159, -inf)
        tmp161 = ops.index_expr(112 + 2 * i3 + 224 * i2, torch.int64)
        tmp162 = tmp160 > tmp143
        tmp163 = ops.where(tmp162, tmp161, tmp142)
        tmp164 = ops.maximum(tmp160, tmp143)
        tmp165 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp166 = ops.index_expr(0, torch.int64)
        tmp167 = tmp165 >= tmp166
        tmp168 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp169 = ops.index_expr(112, torch.int64)
        tmp170 = tmp168 < tmp169
        tmp171 = tmp167 & tmp170
        tmp172 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp173 = ops.index_expr(0, torch.int64)
        tmp174 = tmp172 >= tmp173
        tmp175 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp176 = ops.index_expr(112, torch.int64)
        tmp177 = tmp175 < tmp176
        tmp178 = tmp174 & tmp177
        tmp179 = tmp171 & tmp178
        tmp180 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp181 = ops.masked(tmp179, tmp180, -inf)
        tmp182 = ops.index_expr(113 + 2 * i3 + 224 * i2, torch.int64)
        tmp183 = tmp181 > tmp164
        tmp184 = ops.where(tmp183, tmp182, tmp163)
        tmp185 = ops.maximum(tmp181, tmp164)
        return tmp184
    ,
    ranges=[1, 64, 56, 56],
    origins={max_pool2d_with_indices}
  )
))), 0),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp1 = ops.index_expr(0, torch.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp4 = ops.index_expr(112, torch.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp2 & tmp5
        tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp8 = ops.index_expr(0, torch.int64)
        tmp9 = tmp7 >= tmp8
        tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp11 = ops.index_expr(112, torch.int64)
        tmp12 = tmp10 < tmp11
        tmp13 = tmp9 & tmp12
        tmp14 = tmp6 & tmp13
        tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp16 = ops.masked(tmp14, tmp15, -inf)
        tmp17 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp18 = ops.index_expr(0, torch.int64)
        tmp19 = tmp17 >= tmp18
        tmp20 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp21 = ops.index_expr(112, torch.int64)
        tmp22 = tmp20 < tmp21
        tmp23 = tmp19 & tmp22
        tmp24 = ops.index_expr(2 * i3, torch.int64)
        tmp25 = ops.index_expr(0, torch.int64)
        tmp26 = tmp24 >= tmp25
        tmp27 = ops.index_expr(2 * i3, torch.int64)
        tmp28 = ops.index_expr(112, torch.int64)
        tmp29 = tmp27 < tmp28
        tmp30 = tmp26 & tmp29
        tmp31 = tmp23 & tmp30
        tmp32 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp33 = ops.masked(tmp31, tmp32, -inf)
        tmp34 = ops.maximum(tmp33, tmp16)
        tmp35 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp36 = ops.index_expr(0, torch.int64)
        tmp37 = tmp35 >= tmp36
        tmp38 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp39 = ops.index_expr(112, torch.int64)
        tmp40 = tmp38 < tmp39
        tmp41 = tmp37 & tmp40
        tmp42 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp43 = ops.index_expr(0, torch.int64)
        tmp44 = tmp42 >= tmp43
        tmp45 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp46 = ops.index_expr(112, torch.int64)
        tmp47 = tmp45 < tmp46
        tmp48 = tmp44 & tmp47
        tmp49 = tmp41 & tmp48
        tmp50 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp51 = ops.masked(tmp49, tmp50, -inf)
        tmp52 = ops.maximum(tmp51, tmp34)
        tmp53 = ops.index_expr(2 * i2, torch.int64)
        tmp54 = ops.index_expr(0, torch.int64)
        tmp55 = tmp53 >= tmp54
        tmp56 = ops.index_expr(2 * i2, torch.int64)
        tmp57 = ops.index_expr(112, torch.int64)
        tmp58 = tmp56 < tmp57
        tmp59 = tmp55 & tmp58
        tmp60 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp61 = ops.index_expr(0, torch.int64)
        tmp62 = tmp60 >= tmp61
        tmp63 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp64 = ops.index_expr(112, torch.int64)
        tmp65 = tmp63 < tmp64
        tmp66 = tmp62 & tmp65
        tmp67 = tmp59 & tmp66
        tmp68 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp69 = ops.masked(tmp67, tmp68, -inf)
        tmp70 = ops.maximum(tmp69, tmp52)
        tmp71 = ops.index_expr(2 * i2, torch.int64)
        tmp72 = ops.index_expr(0, torch.int64)
        tmp73 = tmp71 >= tmp72
        tmp74 = ops.index_expr(2 * i2, torch.int64)
        tmp75 = ops.index_expr(112, torch.int64)
        tmp76 = tmp74 < tmp75
        tmp77 = tmp73 & tmp76
        tmp78 = ops.index_expr(2 * i3, torch.int64)
        tmp79 = ops.index_expr(0, torch.int64)
        tmp80 = tmp78 >= tmp79
        tmp81 = ops.index_expr(2 * i3, torch.int64)
        tmp82 = ops.index_expr(112, torch.int64)
        tmp83 = tmp81 < tmp82
        tmp84 = tmp80 & tmp83
        tmp85 = tmp77 & tmp84
        tmp86 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
        tmp87 = ops.masked(tmp85, tmp86, -inf)
        tmp88 = ops.maximum(tmp87, tmp70)
        tmp89 = ops.index_expr(2 * i2, torch.int64)
        tmp90 = ops.index_expr(0, torch.int64)
        tmp91 = tmp89 >= tmp90
        tmp92 = ops.index_expr(2 * i2, torch.int64)
        tmp93 = ops.index_expr(112, torch.int64)
        tmp94 = tmp92 < tmp93
        tmp95 = tmp91 & tmp94
        tmp96 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp97 = ops.index_expr(0, torch.int64)
        tmp98 = tmp96 >= tmp97
        tmp99 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp100 = ops.index_expr(112, torch.int64)
        tmp101 = tmp99 < tmp100
        tmp102 = tmp98 & tmp101
        tmp103 = tmp95 & tmp102
        tmp104 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp105 = ops.masked(tmp103, tmp104, -inf)
        tmp106 = ops.maximum(tmp105, tmp88)
        tmp107 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp108 = ops.index_expr(0, torch.int64)
        tmp109 = tmp107 >= tmp108
        tmp110 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp111 = ops.index_expr(112, torch.int64)
        tmp112 = tmp110 < tmp111
        tmp113 = tmp109 & tmp112
        tmp114 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp115 = ops.index_expr(0, torch.int64)
        tmp116 = tmp114 >= tmp115
        tmp117 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp118 = ops.index_expr(112, torch.int64)
        tmp119 = tmp117 < tmp118
        tmp120 = tmp116 & tmp119
        tmp121 = tmp113 & tmp120
        tmp122 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp123 = ops.masked(tmp121, tmp122, -inf)
        tmp124 = ops.maximum(tmp123, tmp106)
        tmp125 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp126 = ops.index_expr(0, torch.int64)
        tmp127 = tmp125 >= tmp126
        tmp128 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp129 = ops.index_expr(112, torch.int64)
        tmp130 = tmp128 < tmp129
        tmp131 = tmp127 & tmp130
        tmp132 = ops.index_expr(2 * i3, torch.int64)
        tmp133 = ops.index_expr(0, torch.int64)
        tmp134 = tmp132 >= tmp133
        tmp135 = ops.index_expr(2 * i3, torch.int64)
        tmp136 = ops.index_expr(112, torch.int64)
        tmp137 = tmp135 < tmp136
        tmp138 = tmp134 & tmp137
        tmp139 = tmp131 & tmp138
        tmp140 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp141 = ops.masked(tmp139, tmp140, -inf)
        tmp142 = ops.maximum(tmp141, tmp124)
        tmp143 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp144 = ops.index_expr(0, torch.int64)
        tmp145 = tmp143 >= tmp144
        tmp146 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp147 = ops.index_expr(112, torch.int64)
        tmp148 = tmp146 < tmp147
        tmp149 = tmp145 & tmp148
        tmp150 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp151 = ops.index_expr(0, torch.int64)
        tmp152 = tmp150 >= tmp151
        tmp153 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp154 = ops.index_expr(112, torch.int64)
        tmp155 = tmp153 < tmp154
        tmp156 = tmp152 & tmp155
        tmp157 = tmp149 & tmp156
        tmp158 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp159 = ops.masked(tmp157, tmp158, -inf)
        tmp160 = ops.maximum(tmp159, tmp142)
        return tmp160
    ,
    ranges=[1, 64, 56, 56],
    origins={max_pool2d_with_indices}
  )
))

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf10', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
      tmp1 = ops.index_expr(0, torch.int64)
      tmp2 = tmp0 >= tmp1
      tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
      tmp4 = ops.index_expr(112, torch.int64)
      tmp5 = tmp3 < tmp4
      tmp6 = tmp2 & tmp5
      tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
      tmp8 = ops.index_expr(0, torch.int64)
      tmp9 = tmp7 >= tmp8
      tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
      tmp11 = ops.index_expr(112, torch.int64)
      tmp12 = tmp10 < tmp11
      tmp13 = tmp9 & tmp12
      tmp14 = tmp6 & tmp13
      tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp16 = ops.masked(tmp14, tmp15, -inf)
      tmp17 = ops.index_expr(-1 + 2 * i2, torch.int64)
      tmp18 = ops.index_expr(0, torch.int64)
      tmp19 = tmp17 >= tmp18
      tmp20 = ops.index_expr(-1 + 2 * i2, torch.int64)
      tmp21 = ops.index_expr(112, torch.int64)
      tmp22 = tmp20 < tmp21
      tmp23 = tmp19 & tmp22
      tmp24 = ops.index_expr(2 * i3, torch.int64)
      tmp25 = ops.index_expr(0, torch.int64)
      tmp26 = tmp24 >= tmp25
      tmp27 = ops.index_expr(2 * i3, torch.int64)
      tmp28 = ops.index_expr(112, torch.int64)
      tmp29 = tmp27 < tmp28
      tmp30 = tmp26 & tmp29
      tmp31 = tmp23 & tmp30
      tmp32 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp33 = ops.masked(tmp31, tmp32, -inf)
      tmp34 = ops.maximum(tmp33, tmp16)
      tmp35 = ops.index_expr(-1 + 2 * i2, torch.int64)
      tmp36 = ops.index_expr(0, torch.int64)
      tmp37 = tmp35 >= tmp36
      tmp38 = ops.index_expr(-1 + 2 * i2, torch.int64)
      tmp39 = ops.index_expr(112, torch.int64)
      tmp40 = tmp38 < tmp39
      tmp41 = tmp37 & tmp40
      tmp42 = ops.index_expr(1 + 2 * i3, torch.int64)
      tmp43 = ops.index_expr(0, torch.int64)
      tmp44 = tmp42 >= tmp43
      tmp45 = ops.index_expr(1 + 2 * i3, torch.int64)
      tmp46 = ops.index_expr(112, torch.int64)
      tmp47 = tmp45 < tmp46
      tmp48 = tmp44 & tmp47
      tmp49 = tmp41 & tmp48
      tmp50 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp51 = ops.masked(tmp49, tmp50, -inf)
      tmp52 = ops.maximum(tmp51, tmp34)
      tmp53 = ops.index_expr(2 * i2, torch.int64)
      tmp54 = ops.index_expr(0, torch.int64)
      tmp55 = tmp53 >= tmp54
      tmp56 = ops.index_expr(2 * i2, torch.int64)
      tmp57 = ops.index_expr(112, torch.int64)
      tmp58 = tmp56 < tmp57
      tmp59 = tmp55 & tmp58
      tmp60 = ops.index_expr(-1 + 2 * i3, torch.int64)
      tmp61 = ops.index_expr(0, torch.int64)
      tmp62 = tmp60 >= tmp61
      tmp63 = ops.index_expr(-1 + 2 * i3, torch.int64)
      tmp64 = ops.index_expr(112, torch.int64)
      tmp65 = tmp63 < tmp64
      tmp66 = tmp62 & tmp65
      tmp67 = tmp59 & tmp66
      tmp68 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp69 = ops.masked(tmp67, tmp68, -inf)
      tmp70 = ops.maximum(tmp69, tmp52)
      tmp71 = ops.index_expr(2 * i2, torch.int64)
      tmp72 = ops.index_expr(0, torch.int64)
      tmp73 = tmp71 >= tmp72
      tmp74 = ops.index_expr(2 * i2, torch.int64)
      tmp75 = ops.index_expr(112, torch.int64)
      tmp76 = tmp74 < tmp75
      tmp77 = tmp73 & tmp76
      tmp78 = ops.index_expr(2 * i3, torch.int64)
      tmp79 = ops.index_expr(0, torch.int64)
      tmp80 = tmp78 >= tmp79
      tmp81 = ops.index_expr(2 * i3, torch.int64)
      tmp82 = ops.index_expr(112, torch.int64)
      tmp83 = tmp81 < tmp82
      tmp84 = tmp80 & tmp83
      tmp85 = tmp77 & tmp84
      tmp86 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
      tmp87 = ops.masked(tmp85, tmp86, -inf)
      tmp88 = ops.maximum(tmp87, tmp70)
      tmp89 = ops.index_expr(2 * i2, torch.int64)
      tmp90 = ops.index_expr(0, torch.int64)
      tmp91 = tmp89 >= tmp90
      tmp92 = ops.index_expr(2 * i2, torch.int64)
      tmp93 = ops.index_expr(112, torch.int64)
      tmp94 = tmp92 < tmp93
      tmp95 = tmp91 & tmp94
      tmp96 = ops.index_expr(1 + 2 * i3, torch.int64)
      tmp97 = ops.index_expr(0, torch.int64)
      tmp98 = tmp96 >= tmp97
      tmp99 = ops.index_expr(1 + 2 * i3, torch.int64)
      tmp100 = ops.index_expr(112, torch.int64)
      tmp101 = tmp99 < tmp100
      tmp102 = tmp98 & tmp101
      tmp103 = tmp95 & tmp102
      tmp104 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp105 = ops.masked(tmp103, tmp104, -inf)
      tmp106 = ops.maximum(tmp105, tmp88)
      tmp107 = ops.index_expr(1 + 2 * i2, torch.int64)
      tmp108 = ops.index_expr(0, torch.int64)
      tmp109 = tmp107 >= tmp108
      tmp110 = ops.index_expr(1 + 2 * i2, torch.int64)
      tmp111 = ops.index_expr(112, torch.int64)
      tmp112 = tmp110 < tmp111
      tmp113 = tmp109 & tmp112
      tmp114 = ops.index_expr(-1 + 2 * i3, torch.int64)
      tmp115 = ops.index_expr(0, torch.int64)
      tmp116 = tmp114 >= tmp115
      tmp117 = ops.index_expr(-1 + 2 * i3, torch.int64)
      tmp118 = ops.index_expr(112, torch.int64)
      tmp119 = tmp117 < tmp118
      tmp120 = tmp116 & tmp119
      tmp121 = tmp113 & tmp120
      tmp122 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp123 = ops.masked(tmp121, tmp122, -inf)
      tmp124 = ops.maximum(tmp123, tmp106)
      tmp125 = ops.index_expr(1 + 2 * i2, torch.int64)
      tmp126 = ops.index_expr(0, torch.int64)
      tmp127 = tmp125 >= tmp126
      tmp128 = ops.index_expr(1 + 2 * i2, torch.int64)
      tmp129 = ops.index_expr(112, torch.int64)
      tmp130 = tmp128 < tmp129
      tmp131 = tmp127 & tmp130
      tmp132 = ops.index_expr(2 * i3, torch.int64)
      tmp133 = ops.index_expr(0, torch.int64)
      tmp134 = tmp132 >= tmp133
      tmp135 = ops.index_expr(2 * i3, torch.int64)
      tmp136 = ops.index_expr(112, torch.int64)
      tmp137 = tmp135 < tmp136
      tmp138 = tmp134 & tmp137
      tmp139 = tmp131 & tmp138
      tmp140 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp141 = ops.masked(tmp139, tmp140, -inf)
      tmp142 = ops.maximum(tmp141, tmp124)
      tmp143 = ops.index_expr(1 + 2 * i2, torch.int64)
      tmp144 = ops.index_expr(0, torch.int64)
      tmp145 = tmp143 >= tmp144
      tmp146 = ops.index_expr(1 + 2 * i2, torch.int64)
      tmp147 = ops.index_expr(112, torch.int64)
      tmp148 = tmp146 < tmp147
      tmp149 = tmp145 & tmp148
      tmp150 = ops.index_expr(1 + 2 * i3, torch.int64)
      tmp151 = ops.index_expr(0, torch.int64)
      tmp152 = tmp150 >= tmp151
      tmp153 = ops.index_expr(1 + 2 * i3, torch.int64)
      tmp154 = ops.index_expr(112, torch.int64)
      tmp155 = tmp153 < tmp154
      tmp156 = tmp152 & tmp155
      tmp157 = tmp149 & tmp156
      tmp158 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp159 = ops.masked(tmp157, tmp158, -inf)
      tmp160 = ops.maximum(tmp159, tmp142)
      return tmp160
  ,
  ranges=[1, 64, 56, 56],
  origins={getitem_2}
)), 'origins': {getitem_2}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf10', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp1 = ops.index_expr(0, torch.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp4 = ops.index_expr(112, torch.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp2 & tmp5
        tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp8 = ops.index_expr(0, torch.int64)
        tmp9 = tmp7 >= tmp8
        tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp11 = ops.index_expr(112, torch.int64)
        tmp12 = tmp10 < tmp11
        tmp13 = tmp9 & tmp12
        tmp14 = tmp6 & tmp13
        tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp16 = ops.masked(tmp14, tmp15, -inf)
        tmp17 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp18 = ops.index_expr(0, torch.int64)
        tmp19 = tmp17 >= tmp18
        tmp20 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp21 = ops.index_expr(112, torch.int64)
        tmp22 = tmp20 < tmp21
        tmp23 = tmp19 & tmp22
        tmp24 = ops.index_expr(2 * i3, torch.int64)
        tmp25 = ops.index_expr(0, torch.int64)
        tmp26 = tmp24 >= tmp25
        tmp27 = ops.index_expr(2 * i3, torch.int64)
        tmp28 = ops.index_expr(112, torch.int64)
        tmp29 = tmp27 < tmp28
        tmp30 = tmp26 & tmp29
        tmp31 = tmp23 & tmp30
        tmp32 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp33 = ops.masked(tmp31, tmp32, -inf)
        tmp34 = ops.maximum(tmp33, tmp16)
        tmp35 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp36 = ops.index_expr(0, torch.int64)
        tmp37 = tmp35 >= tmp36
        tmp38 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp39 = ops.index_expr(112, torch.int64)
        tmp40 = tmp38 < tmp39
        tmp41 = tmp37 & tmp40
        tmp42 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp43 = ops.index_expr(0, torch.int64)
        tmp44 = tmp42 >= tmp43
        tmp45 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp46 = ops.index_expr(112, torch.int64)
        tmp47 = tmp45 < tmp46
        tmp48 = tmp44 & tmp47
        tmp49 = tmp41 & tmp48
        tmp50 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp51 = ops.masked(tmp49, tmp50, -inf)
        tmp52 = ops.maximum(tmp51, tmp34)
        tmp53 = ops.index_expr(2 * i2, torch.int64)
        tmp54 = ops.index_expr(0, torch.int64)
        tmp55 = tmp53 >= tmp54
        tmp56 = ops.index_expr(2 * i2, torch.int64)
        tmp57 = ops.index_expr(112, torch.int64)
        tmp58 = tmp56 < tmp57
        tmp59 = tmp55 & tmp58
        tmp60 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp61 = ops.index_expr(0, torch.int64)
        tmp62 = tmp60 >= tmp61
        tmp63 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp64 = ops.index_expr(112, torch.int64)
        tmp65 = tmp63 < tmp64
        tmp66 = tmp62 & tmp65
        tmp67 = tmp59 & tmp66
        tmp68 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp69 = ops.masked(tmp67, tmp68, -inf)
        tmp70 = ops.maximum(tmp69, tmp52)
        tmp71 = ops.index_expr(2 * i2, torch.int64)
        tmp72 = ops.index_expr(0, torch.int64)
        tmp73 = tmp71 >= tmp72
        tmp74 = ops.index_expr(2 * i2, torch.int64)
        tmp75 = ops.index_expr(112, torch.int64)
        tmp76 = tmp74 < tmp75
        tmp77 = tmp73 & tmp76
        tmp78 = ops.index_expr(2 * i3, torch.int64)
        tmp79 = ops.index_expr(0, torch.int64)
        tmp80 = tmp78 >= tmp79
        tmp81 = ops.index_expr(2 * i3, torch.int64)
        tmp82 = ops.index_expr(112, torch.int64)
        tmp83 = tmp81 < tmp82
        tmp84 = tmp80 & tmp83
        tmp85 = tmp77 & tmp84
        tmp86 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
        tmp87 = ops.masked(tmp85, tmp86, -inf)
        tmp88 = ops.maximum(tmp87, tmp70)
        tmp89 = ops.index_expr(2 * i2, torch.int64)
        tmp90 = ops.index_expr(0, torch.int64)
        tmp91 = tmp89 >= tmp90
        tmp92 = ops.index_expr(2 * i2, torch.int64)
        tmp93 = ops.index_expr(112, torch.int64)
        tmp94 = tmp92 < tmp93
        tmp95 = tmp91 & tmp94
        tmp96 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp97 = ops.index_expr(0, torch.int64)
        tmp98 = tmp96 >= tmp97
        tmp99 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp100 = ops.index_expr(112, torch.int64)
        tmp101 = tmp99 < tmp100
        tmp102 = tmp98 & tmp101
        tmp103 = tmp95 & tmp102
        tmp104 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp105 = ops.masked(tmp103, tmp104, -inf)
        tmp106 = ops.maximum(tmp105, tmp88)
        tmp107 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp108 = ops.index_expr(0, torch.int64)
        tmp109 = tmp107 >= tmp108
        tmp110 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp111 = ops.index_expr(112, torch.int64)
        tmp112 = tmp110 < tmp111
        tmp113 = tmp109 & tmp112
        tmp114 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp115 = ops.index_expr(0, torch.int64)
        tmp116 = tmp114 >= tmp115
        tmp117 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp118 = ops.index_expr(112, torch.int64)
        tmp119 = tmp117 < tmp118
        tmp120 = tmp116 & tmp119
        tmp121 = tmp113 & tmp120
        tmp122 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp123 = ops.masked(tmp121, tmp122, -inf)
        tmp124 = ops.maximum(tmp123, tmp106)
        tmp125 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp126 = ops.index_expr(0, torch.int64)
        tmp127 = tmp125 >= tmp126
        tmp128 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp129 = ops.index_expr(112, torch.int64)
        tmp130 = tmp128 < tmp129
        tmp131 = tmp127 & tmp130
        tmp132 = ops.index_expr(2 * i3, torch.int64)
        tmp133 = ops.index_expr(0, torch.int64)
        tmp134 = tmp132 >= tmp133
        tmp135 = ops.index_expr(2 * i3, torch.int64)
        tmp136 = ops.index_expr(112, torch.int64)
        tmp137 = tmp135 < tmp136
        tmp138 = tmp134 & tmp137
        tmp139 = tmp131 & tmp138
        tmp140 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp141 = ops.masked(tmp139, tmp140, -inf)
        tmp142 = ops.maximum(tmp141, tmp124)
        tmp143 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp144 = ops.index_expr(0, torch.int64)
        tmp145 = tmp143 >= tmp144
        tmp146 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp147 = ops.index_expr(112, torch.int64)
        tmp148 = tmp146 < tmp147
        tmp149 = tmp145 & tmp148
        tmp150 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp151 = ops.index_expr(0, torch.int64)
        tmp152 = tmp150 >= tmp151
        tmp153 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp154 = ops.index_expr(112, torch.int64)
        tmp155 = tmp153 < tmp154
        tmp156 = tmp152 & tmp155
        tmp157 = tmp149 & tmp156
        tmp158 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp159 = ops.masked(tmp157, tmp158, -inf)
        tmp160 = ops.maximum(tmp159, tmp142)
        return tmp160
    ,
    ranges=[1, 64, 56, 56],
    origins={getitem_2}
  ))
))
buf10
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_3
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp1 = ops.index_expr(0, torch.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp4 = ops.index_expr(112, torch.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp2 & tmp5
        tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp8 = ops.index_expr(0, torch.int64)
        tmp9 = tmp7 >= tmp8
        tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp11 = ops.index_expr(112, torch.int64)
        tmp12 = tmp10 < tmp11
        tmp13 = tmp9 & tmp12
        tmp14 = tmp6 & tmp13
        tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp16 = ops.masked(tmp14, tmp15, -inf)
        tmp17 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp18 = ops.index_expr(0, torch.int64)
        tmp19 = tmp17 >= tmp18
        tmp20 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp21 = ops.index_expr(112, torch.int64)
        tmp22 = tmp20 < tmp21
        tmp23 = tmp19 & tmp22
        tmp24 = ops.index_expr(2 * i3, torch.int64)
        tmp25 = ops.index_expr(0, torch.int64)
        tmp26 = tmp24 >= tmp25
        tmp27 = ops.index_expr(2 * i3, torch.int64)
        tmp28 = ops.index_expr(112, torch.int64)
        tmp29 = tmp27 < tmp28
        tmp30 = tmp26 & tmp29
        tmp31 = tmp23 & tmp30
        tmp32 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp33 = ops.masked(tmp31, tmp32, -inf)
        tmp34 = ops.maximum(tmp33, tmp16)
        tmp35 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp36 = ops.index_expr(0, torch.int64)
        tmp37 = tmp35 >= tmp36
        tmp38 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp39 = ops.index_expr(112, torch.int64)
        tmp40 = tmp38 < tmp39
        tmp41 = tmp37 & tmp40
        tmp42 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp43 = ops.index_expr(0, torch.int64)
        tmp44 = tmp42 >= tmp43
        tmp45 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp46 = ops.index_expr(112, torch.int64)
        tmp47 = tmp45 < tmp46
        tmp48 = tmp44 & tmp47
        tmp49 = tmp41 & tmp48
        tmp50 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp51 = ops.masked(tmp49, tmp50, -inf)
        tmp52 = ops.maximum(tmp51, tmp34)
        tmp53 = ops.index_expr(2 * i2, torch.int64)
        tmp54 = ops.index_expr(0, torch.int64)
        tmp55 = tmp53 >= tmp54
        tmp56 = ops.index_expr(2 * i2, torch.int64)
        tmp57 = ops.index_expr(112, torch.int64)
        tmp58 = tmp56 < tmp57
        tmp59 = tmp55 & tmp58
        tmp60 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp61 = ops.index_expr(0, torch.int64)
        tmp62 = tmp60 >= tmp61
        tmp63 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp64 = ops.index_expr(112, torch.int64)
        tmp65 = tmp63 < tmp64
        tmp66 = tmp62 & tmp65
        tmp67 = tmp59 & tmp66
        tmp68 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp69 = ops.masked(tmp67, tmp68, -inf)
        tmp70 = ops.maximum(tmp69, tmp52)
        tmp71 = ops.index_expr(2 * i2, torch.int64)
        tmp72 = ops.index_expr(0, torch.int64)
        tmp73 = tmp71 >= tmp72
        tmp74 = ops.index_expr(2 * i2, torch.int64)
        tmp75 = ops.index_expr(112, torch.int64)
        tmp76 = tmp74 < tmp75
        tmp77 = tmp73 & tmp76
        tmp78 = ops.index_expr(2 * i3, torch.int64)
        tmp79 = ops.index_expr(0, torch.int64)
        tmp80 = tmp78 >= tmp79
        tmp81 = ops.index_expr(2 * i3, torch.int64)
        tmp82 = ops.index_expr(112, torch.int64)
        tmp83 = tmp81 < tmp82
        tmp84 = tmp80 & tmp83
        tmp85 = tmp77 & tmp84
        tmp86 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
        tmp87 = ops.masked(tmp85, tmp86, -inf)
        tmp88 = ops.maximum(tmp87, tmp70)
        tmp89 = ops.index_expr(2 * i2, torch.int64)
        tmp90 = ops.index_expr(0, torch.int64)
        tmp91 = tmp89 >= tmp90
        tmp92 = ops.index_expr(2 * i2, torch.int64)
        tmp93 = ops.index_expr(112, torch.int64)
        tmp94 = tmp92 < tmp93
        tmp95 = tmp91 & tmp94
        tmp96 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp97 = ops.index_expr(0, torch.int64)
        tmp98 = tmp96 >= tmp97
        tmp99 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp100 = ops.index_expr(112, torch.int64)
        tmp101 = tmp99 < tmp100
        tmp102 = tmp98 & tmp101
        tmp103 = tmp95 & tmp102
        tmp104 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp105 = ops.masked(tmp103, tmp104, -inf)
        tmp106 = ops.maximum(tmp105, tmp88)
        tmp107 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp108 = ops.index_expr(0, torch.int64)
        tmp109 = tmp107 >= tmp108
        tmp110 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp111 = ops.index_expr(112, torch.int64)
        tmp112 = tmp110 < tmp111
        tmp113 = tmp109 & tmp112
        tmp114 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp115 = ops.index_expr(0, torch.int64)
        tmp116 = tmp114 >= tmp115
        tmp117 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp118 = ops.index_expr(112, torch.int64)
        tmp119 = tmp117 < tmp118
        tmp120 = tmp116 & tmp119
        tmp121 = tmp113 & tmp120
        tmp122 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp123 = ops.masked(tmp121, tmp122, -inf)
        tmp124 = ops.maximum(tmp123, tmp106)
        tmp125 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp126 = ops.index_expr(0, torch.int64)
        tmp127 = tmp125 >= tmp126
        tmp128 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp129 = ops.index_expr(112, torch.int64)
        tmp130 = tmp128 < tmp129
        tmp131 = tmp127 & tmp130
        tmp132 = ops.index_expr(2 * i3, torch.int64)
        tmp133 = ops.index_expr(0, torch.int64)
        tmp134 = tmp132 >= tmp133
        tmp135 = ops.index_expr(2 * i3, torch.int64)
        tmp136 = ops.index_expr(112, torch.int64)
        tmp137 = tmp135 < tmp136
        tmp138 = tmp134 & tmp137
        tmp139 = tmp131 & tmp138
        tmp140 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp141 = ops.masked(tmp139, tmp140, -inf)
        tmp142 = ops.maximum(tmp141, tmp124)
        tmp143 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp144 = ops.index_expr(0, torch.int64)
        tmp145 = tmp143 >= tmp144
        tmp146 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp147 = ops.index_expr(112, torch.int64)
        tmp148 = tmp146 < tmp147
        tmp149 = tmp145 & tmp148
        tmp150 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp151 = ops.index_expr(0, torch.int64)
        tmp152 = tmp150 >= tmp151
        tmp153 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp154 = ops.index_expr(112, torch.int64)
        tmp155 = tmp153 < tmp154
        tmp156 = tmp152 & tmp155
        tmp157 = tmp149 & tmp156
        tmp158 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp159 = ops.masked(tmp157, tmp158, -inf)
        tmp160 = ops.maximum(tmp159, tmp142)
        return tmp160
    ,
    ranges=[1, 64, 56, 56],
    origins={max_pool2d_with_indices}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp1 = ops.index_expr(0, torch.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp4 = ops.index_expr(112, torch.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp2 & tmp5
        tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp8 = ops.index_expr(0, torch.int64)
        tmp9 = tmp7 >= tmp8
        tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp11 = ops.index_expr(112, torch.int64)
        tmp12 = tmp10 < tmp11
        tmp13 = tmp9 & tmp12
        tmp14 = tmp6 & tmp13
        tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp16 = ops.masked(tmp14, tmp15, -inf)
        tmp17 = ops.index_expr(-113 + 2 * i3 + 224 * i2, torch.int64)
        tmp18 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp19 = ops.index_expr(0, torch.int64)
        tmp20 = tmp18 >= tmp19
        tmp21 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp22 = ops.index_expr(112, torch.int64)
        tmp23 = tmp21 < tmp22
        tmp24 = tmp20 & tmp23
        tmp25 = ops.index_expr(2 * i3, torch.int64)
        tmp26 = ops.index_expr(0, torch.int64)
        tmp27 = tmp25 >= tmp26
        tmp28 = ops.index_expr(2 * i3, torch.int64)
        tmp29 = ops.index_expr(112, torch.int64)
        tmp30 = tmp28 < tmp29
        tmp31 = tmp27 & tmp30
        tmp32 = tmp24 & tmp31
        tmp33 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp34 = ops.masked(tmp32, tmp33, -inf)
        tmp35 = ops.index_expr(-112 + 2 * i3 + 224 * i2, torch.int64)
        tmp36 = tmp34 > tmp16
        tmp37 = ops.where(tmp36, tmp35, tmp17)
        tmp38 = ops.maximum(tmp34, tmp16)
        tmp39 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp40 = ops.index_expr(0, torch.int64)
        tmp41 = tmp39 >= tmp40
        tmp42 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp43 = ops.index_expr(112, torch.int64)
        tmp44 = tmp42 < tmp43
        tmp45 = tmp41 & tmp44
        tmp46 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp47 = ops.index_expr(0, torch.int64)
        tmp48 = tmp46 >= tmp47
        tmp49 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp50 = ops.index_expr(112, torch.int64)
        tmp51 = tmp49 < tmp50
        tmp52 = tmp48 & tmp51
        tmp53 = tmp45 & tmp52
        tmp54 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp55 = ops.masked(tmp53, tmp54, -inf)
        tmp56 = ops.index_expr(-111 + 2 * i3 + 224 * i2, torch.int64)
        tmp57 = tmp55 > tmp38
        tmp58 = ops.where(tmp57, tmp56, tmp37)
        tmp59 = ops.maximum(tmp55, tmp38)
        tmp60 = ops.index_expr(2 * i2, torch.int64)
        tmp61 = ops.index_expr(0, torch.int64)
        tmp62 = tmp60 >= tmp61
        tmp63 = ops.index_expr(2 * i2, torch.int64)
        tmp64 = ops.index_expr(112, torch.int64)
        tmp65 = tmp63 < tmp64
        tmp66 = tmp62 & tmp65
        tmp67 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp68 = ops.index_expr(0, torch.int64)
        tmp69 = tmp67 >= tmp68
        tmp70 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp71 = ops.index_expr(112, torch.int64)
        tmp72 = tmp70 < tmp71
        tmp73 = tmp69 & tmp72
        tmp74 = tmp66 & tmp73
        tmp75 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp76 = ops.masked(tmp74, tmp75, -inf)
        tmp77 = ops.index_expr(-1 + 2 * i3 + 224 * i2, torch.int64)
        tmp78 = tmp76 > tmp59
        tmp79 = ops.where(tmp78, tmp77, tmp58)
        tmp80 = ops.maximum(tmp76, tmp59)
        tmp81 = ops.index_expr(2 * i2, torch.int64)
        tmp82 = ops.index_expr(0, torch.int64)
        tmp83 = tmp81 >= tmp82
        tmp84 = ops.index_expr(2 * i2, torch.int64)
        tmp85 = ops.index_expr(112, torch.int64)
        tmp86 = tmp84 < tmp85
        tmp87 = tmp83 & tmp86
        tmp88 = ops.index_expr(2 * i3, torch.int64)
        tmp89 = ops.index_expr(0, torch.int64)
        tmp90 = tmp88 >= tmp89
        tmp91 = ops.index_expr(2 * i3, torch.int64)
        tmp92 = ops.index_expr(112, torch.int64)
        tmp93 = tmp91 < tmp92
        tmp94 = tmp90 & tmp93
        tmp95 = tmp87 & tmp94
        tmp96 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
        tmp97 = ops.masked(tmp95, tmp96, -inf)
        tmp98 = ops.index_expr(2 * i3 + 224 * i2, torch.int64)
        tmp99 = tmp97 > tmp80
        tmp100 = ops.where(tmp99, tmp98, tmp79)
        tmp101 = ops.maximum(tmp97, tmp80)
        tmp102 = ops.index_expr(2 * i2, torch.int64)
        tmp103 = ops.index_expr(0, torch.int64)
        tmp104 = tmp102 >= tmp103
        tmp105 = ops.index_expr(2 * i2, torch.int64)
        tmp106 = ops.index_expr(112, torch.int64)
        tmp107 = tmp105 < tmp106
        tmp108 = tmp104 & tmp107
        tmp109 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp110 = ops.index_expr(0, torch.int64)
        tmp111 = tmp109 >= tmp110
        tmp112 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp113 = ops.index_expr(112, torch.int64)
        tmp114 = tmp112 < tmp113
        tmp115 = tmp111 & tmp114
        tmp116 = tmp108 & tmp115
        tmp117 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp118 = ops.masked(tmp116, tmp117, -inf)
        tmp119 = ops.index_expr(1 + 2 * i3 + 224 * i2, torch.int64)
        tmp120 = tmp118 > tmp101
        tmp121 = ops.where(tmp120, tmp119, tmp100)
        tmp122 = ops.maximum(tmp118, tmp101)
        tmp123 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp124 = ops.index_expr(0, torch.int64)
        tmp125 = tmp123 >= tmp124
        tmp126 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp127 = ops.index_expr(112, torch.int64)
        tmp128 = tmp126 < tmp127
        tmp129 = tmp125 & tmp128
        tmp130 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp131 = ops.index_expr(0, torch.int64)
        tmp132 = tmp130 >= tmp131
        tmp133 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp134 = ops.index_expr(112, torch.int64)
        tmp135 = tmp133 < tmp134
        tmp136 = tmp132 & tmp135
        tmp137 = tmp129 & tmp136
        tmp138 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp139 = ops.masked(tmp137, tmp138, -inf)
        tmp140 = ops.index_expr(111 + 2 * i3 + 224 * i2, torch.int64)
        tmp141 = tmp139 > tmp122
        tmp142 = ops.where(tmp141, tmp140, tmp121)
        tmp143 = ops.maximum(tmp139, tmp122)
        tmp144 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp145 = ops.index_expr(0, torch.int64)
        tmp146 = tmp144 >= tmp145
        tmp147 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp148 = ops.index_expr(112, torch.int64)
        tmp149 = tmp147 < tmp148
        tmp150 = tmp146 & tmp149
        tmp151 = ops.index_expr(2 * i3, torch.int64)
        tmp152 = ops.index_expr(0, torch.int64)
        tmp153 = tmp151 >= tmp152
        tmp154 = ops.index_expr(2 * i3, torch.int64)
        tmp155 = ops.index_expr(112, torch.int64)
        tmp156 = tmp154 < tmp155
        tmp157 = tmp153 & tmp156
        tmp158 = tmp150 & tmp157
        tmp159 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp160 = ops.masked(tmp158, tmp159, -inf)
        tmp161 = ops.index_expr(112 + 2 * i3 + 224 * i2, torch.int64)
        tmp162 = tmp160 > tmp143
        tmp163 = ops.where(tmp162, tmp161, tmp142)
        tmp164 = ops.maximum(tmp160, tmp143)
        tmp165 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp166 = ops.index_expr(0, torch.int64)
        tmp167 = tmp165 >= tmp166
        tmp168 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp169 = ops.index_expr(112, torch.int64)
        tmp170 = tmp168 < tmp169
        tmp171 = tmp167 & tmp170
        tmp172 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp173 = ops.index_expr(0, torch.int64)
        tmp174 = tmp172 >= tmp173
        tmp175 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp176 = ops.index_expr(112, torch.int64)
        tmp177 = tmp175 < tmp176
        tmp178 = tmp174 & tmp177
        tmp179 = tmp171 & tmp178
        tmp180 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp181 = ops.masked(tmp179, tmp180, -inf)
        tmp182 = ops.index_expr(113 + 2 * i3 + 224 * i2, torch.int64)
        tmp183 = tmp181 > tmp164
        tmp184 = ops.where(tmp183, tmp182, tmp163)
        tmp185 = ops.maximum(tmp181, tmp164)
        return tmp184
    ,
    ranges=[1, 64, 56, 56],
    origins={max_pool2d_with_indices}
  )
))), 1),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp1 = ops.index_expr(0, torch.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp4 = ops.index_expr(112, torch.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp2 & tmp5
        tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp8 = ops.index_expr(0, torch.int64)
        tmp9 = tmp7 >= tmp8
        tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp11 = ops.index_expr(112, torch.int64)
        tmp12 = tmp10 < tmp11
        tmp13 = tmp9 & tmp12
        tmp14 = tmp6 & tmp13
        tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp16 = ops.masked(tmp14, tmp15, -inf)
        tmp17 = ops.index_expr(-113 + 2 * i3 + 224 * i2, torch.int64)
        tmp18 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp19 = ops.index_expr(0, torch.int64)
        tmp20 = tmp18 >= tmp19
        tmp21 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp22 = ops.index_expr(112, torch.int64)
        tmp23 = tmp21 < tmp22
        tmp24 = tmp20 & tmp23
        tmp25 = ops.index_expr(2 * i3, torch.int64)
        tmp26 = ops.index_expr(0, torch.int64)
        tmp27 = tmp25 >= tmp26
        tmp28 = ops.index_expr(2 * i3, torch.int64)
        tmp29 = ops.index_expr(112, torch.int64)
        tmp30 = tmp28 < tmp29
        tmp31 = tmp27 & tmp30
        tmp32 = tmp24 & tmp31
        tmp33 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp34 = ops.masked(tmp32, tmp33, -inf)
        tmp35 = ops.index_expr(-112 + 2 * i3 + 224 * i2, torch.int64)
        tmp36 = tmp34 > tmp16
        tmp37 = ops.where(tmp36, tmp35, tmp17)
        tmp38 = ops.maximum(tmp34, tmp16)
        tmp39 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp40 = ops.index_expr(0, torch.int64)
        tmp41 = tmp39 >= tmp40
        tmp42 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp43 = ops.index_expr(112, torch.int64)
        tmp44 = tmp42 < tmp43
        tmp45 = tmp41 & tmp44
        tmp46 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp47 = ops.index_expr(0, torch.int64)
        tmp48 = tmp46 >= tmp47
        tmp49 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp50 = ops.index_expr(112, torch.int64)
        tmp51 = tmp49 < tmp50
        tmp52 = tmp48 & tmp51
        tmp53 = tmp45 & tmp52
        tmp54 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp55 = ops.masked(tmp53, tmp54, -inf)
        tmp56 = ops.index_expr(-111 + 2 * i3 + 224 * i2, torch.int64)
        tmp57 = tmp55 > tmp38
        tmp58 = ops.where(tmp57, tmp56, tmp37)
        tmp59 = ops.maximum(tmp55, tmp38)
        tmp60 = ops.index_expr(2 * i2, torch.int64)
        tmp61 = ops.index_expr(0, torch.int64)
        tmp62 = tmp60 >= tmp61
        tmp63 = ops.index_expr(2 * i2, torch.int64)
        tmp64 = ops.index_expr(112, torch.int64)
        tmp65 = tmp63 < tmp64
        tmp66 = tmp62 & tmp65
        tmp67 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp68 = ops.index_expr(0, torch.int64)
        tmp69 = tmp67 >= tmp68
        tmp70 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp71 = ops.index_expr(112, torch.int64)
        tmp72 = tmp70 < tmp71
        tmp73 = tmp69 & tmp72
        tmp74 = tmp66 & tmp73
        tmp75 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp76 = ops.masked(tmp74, tmp75, -inf)
        tmp77 = ops.index_expr(-1 + 2 * i3 + 224 * i2, torch.int64)
        tmp78 = tmp76 > tmp59
        tmp79 = ops.where(tmp78, tmp77, tmp58)
        tmp80 = ops.maximum(tmp76, tmp59)
        tmp81 = ops.index_expr(2 * i2, torch.int64)
        tmp82 = ops.index_expr(0, torch.int64)
        tmp83 = tmp81 >= tmp82
        tmp84 = ops.index_expr(2 * i2, torch.int64)
        tmp85 = ops.index_expr(112, torch.int64)
        tmp86 = tmp84 < tmp85
        tmp87 = tmp83 & tmp86
        tmp88 = ops.index_expr(2 * i3, torch.int64)
        tmp89 = ops.index_expr(0, torch.int64)
        tmp90 = tmp88 >= tmp89
        tmp91 = ops.index_expr(2 * i3, torch.int64)
        tmp92 = ops.index_expr(112, torch.int64)
        tmp93 = tmp91 < tmp92
        tmp94 = tmp90 & tmp93
        tmp95 = tmp87 & tmp94
        tmp96 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
        tmp97 = ops.masked(tmp95, tmp96, -inf)
        tmp98 = ops.index_expr(2 * i3 + 224 * i2, torch.int64)
        tmp99 = tmp97 > tmp80
        tmp100 = ops.where(tmp99, tmp98, tmp79)
        tmp101 = ops.maximum(tmp97, tmp80)
        tmp102 = ops.index_expr(2 * i2, torch.int64)
        tmp103 = ops.index_expr(0, torch.int64)
        tmp104 = tmp102 >= tmp103
        tmp105 = ops.index_expr(2 * i2, torch.int64)
        tmp106 = ops.index_expr(112, torch.int64)
        tmp107 = tmp105 < tmp106
        tmp108 = tmp104 & tmp107
        tmp109 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp110 = ops.index_expr(0, torch.int64)
        tmp111 = tmp109 >= tmp110
        tmp112 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp113 = ops.index_expr(112, torch.int64)
        tmp114 = tmp112 < tmp113
        tmp115 = tmp111 & tmp114
        tmp116 = tmp108 & tmp115
        tmp117 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp118 = ops.masked(tmp116, tmp117, -inf)
        tmp119 = ops.index_expr(1 + 2 * i3 + 224 * i2, torch.int64)
        tmp120 = tmp118 > tmp101
        tmp121 = ops.where(tmp120, tmp119, tmp100)
        tmp122 = ops.maximum(tmp118, tmp101)
        tmp123 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp124 = ops.index_expr(0, torch.int64)
        tmp125 = tmp123 >= tmp124
        tmp126 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp127 = ops.index_expr(112, torch.int64)
        tmp128 = tmp126 < tmp127
        tmp129 = tmp125 & tmp128
        tmp130 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp131 = ops.index_expr(0, torch.int64)
        tmp132 = tmp130 >= tmp131
        tmp133 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp134 = ops.index_expr(112, torch.int64)
        tmp135 = tmp133 < tmp134
        tmp136 = tmp132 & tmp135
        tmp137 = tmp129 & tmp136
        tmp138 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp139 = ops.masked(tmp137, tmp138, -inf)
        tmp140 = ops.index_expr(111 + 2 * i3 + 224 * i2, torch.int64)
        tmp141 = tmp139 > tmp122
        tmp142 = ops.where(tmp141, tmp140, tmp121)
        tmp143 = ops.maximum(tmp139, tmp122)
        tmp144 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp145 = ops.index_expr(0, torch.int64)
        tmp146 = tmp144 >= tmp145
        tmp147 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp148 = ops.index_expr(112, torch.int64)
        tmp149 = tmp147 < tmp148
        tmp150 = tmp146 & tmp149
        tmp151 = ops.index_expr(2 * i3, torch.int64)
        tmp152 = ops.index_expr(0, torch.int64)
        tmp153 = tmp151 >= tmp152
        tmp154 = ops.index_expr(2 * i3, torch.int64)
        tmp155 = ops.index_expr(112, torch.int64)
        tmp156 = tmp154 < tmp155
        tmp157 = tmp153 & tmp156
        tmp158 = tmp150 & tmp157
        tmp159 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp160 = ops.masked(tmp158, tmp159, -inf)
        tmp161 = ops.index_expr(112 + 2 * i3 + 224 * i2, torch.int64)
        tmp162 = tmp160 > tmp143
        tmp163 = ops.where(tmp162, tmp161, tmp142)
        tmp164 = ops.maximum(tmp160, tmp143)
        tmp165 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp166 = ops.index_expr(0, torch.int64)
        tmp167 = tmp165 >= tmp166
        tmp168 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp169 = ops.index_expr(112, torch.int64)
        tmp170 = tmp168 < tmp169
        tmp171 = tmp167 & tmp170
        tmp172 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp173 = ops.index_expr(0, torch.int64)
        tmp174 = tmp172 >= tmp173
        tmp175 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp176 = ops.index_expr(112, torch.int64)
        tmp177 = tmp175 < tmp176
        tmp178 = tmp174 & tmp177
        tmp179 = tmp171 & tmp178
        tmp180 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp181 = ops.masked(tmp179, tmp180, -inf)
        tmp182 = ops.index_expr(113 + 2 * i3 + 224 * i2, torch.int64)
        tmp183 = tmp181 > tmp164
        tmp184 = ops.where(tmp183, tmp182, tmp163)
        tmp185 = ops.maximum(tmp181, tmp164)
        return tmp184
    ,
    ranges=[1, 64, 56, 56],
    origins={max_pool2d_with_indices}
  )
))

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf11', layout=FlexibleLayout('cuda', torch.int64, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
      tmp1 = ops.index_expr(0, torch.int64)
      tmp2 = tmp0 >= tmp1
      tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
      tmp4 = ops.index_expr(112, torch.int64)
      tmp5 = tmp3 < tmp4
      tmp6 = tmp2 & tmp5
      tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
      tmp8 = ops.index_expr(0, torch.int64)
      tmp9 = tmp7 >= tmp8
      tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
      tmp11 = ops.index_expr(112, torch.int64)
      tmp12 = tmp10 < tmp11
      tmp13 = tmp9 & tmp12
      tmp14 = tmp6 & tmp13
      tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp16 = ops.masked(tmp14, tmp15, -inf)
      tmp17 = ops.index_expr(-113 + 2 * i3 + 224 * i2, torch.int64)
      tmp18 = ops.index_expr(-1 + 2 * i2, torch.int64)
      tmp19 = ops.index_expr(0, torch.int64)
      tmp20 = tmp18 >= tmp19
      tmp21 = ops.index_expr(-1 + 2 * i2, torch.int64)
      tmp22 = ops.index_expr(112, torch.int64)
      tmp23 = tmp21 < tmp22
      tmp24 = tmp20 & tmp23
      tmp25 = ops.index_expr(2 * i3, torch.int64)
      tmp26 = ops.index_expr(0, torch.int64)
      tmp27 = tmp25 >= tmp26
      tmp28 = ops.index_expr(2 * i3, torch.int64)
      tmp29 = ops.index_expr(112, torch.int64)
      tmp30 = tmp28 < tmp29
      tmp31 = tmp27 & tmp30
      tmp32 = tmp24 & tmp31
      tmp33 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp34 = ops.masked(tmp32, tmp33, -inf)
      tmp35 = ops.index_expr(-112 + 2 * i3 + 224 * i2, torch.int64)
      tmp36 = tmp34 > tmp16
      tmp37 = ops.where(tmp36, tmp35, tmp17)
      tmp38 = ops.maximum(tmp34, tmp16)
      tmp39 = ops.index_expr(-1 + 2 * i2, torch.int64)
      tmp40 = ops.index_expr(0, torch.int64)
      tmp41 = tmp39 >= tmp40
      tmp42 = ops.index_expr(-1 + 2 * i2, torch.int64)
      tmp43 = ops.index_expr(112, torch.int64)
      tmp44 = tmp42 < tmp43
      tmp45 = tmp41 & tmp44
      tmp46 = ops.index_expr(1 + 2 * i3, torch.int64)
      tmp47 = ops.index_expr(0, torch.int64)
      tmp48 = tmp46 >= tmp47
      tmp49 = ops.index_expr(1 + 2 * i3, torch.int64)
      tmp50 = ops.index_expr(112, torch.int64)
      tmp51 = tmp49 < tmp50
      tmp52 = tmp48 & tmp51
      tmp53 = tmp45 & tmp52
      tmp54 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp55 = ops.masked(tmp53, tmp54, -inf)
      tmp56 = ops.index_expr(-111 + 2 * i3 + 224 * i2, torch.int64)
      tmp57 = tmp55 > tmp38
      tmp58 = ops.where(tmp57, tmp56, tmp37)
      tmp59 = ops.maximum(tmp55, tmp38)
      tmp60 = ops.index_expr(2 * i2, torch.int64)
      tmp61 = ops.index_expr(0, torch.int64)
      tmp62 = tmp60 >= tmp61
      tmp63 = ops.index_expr(2 * i2, torch.int64)
      tmp64 = ops.index_expr(112, torch.int64)
      tmp65 = tmp63 < tmp64
      tmp66 = tmp62 & tmp65
      tmp67 = ops.index_expr(-1 + 2 * i3, torch.int64)
      tmp68 = ops.index_expr(0, torch.int64)
      tmp69 = tmp67 >= tmp68
      tmp70 = ops.index_expr(-1 + 2 * i3, torch.int64)
      tmp71 = ops.index_expr(112, torch.int64)
      tmp72 = tmp70 < tmp71
      tmp73 = tmp69 & tmp72
      tmp74 = tmp66 & tmp73
      tmp75 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp76 = ops.masked(tmp74, tmp75, -inf)
      tmp77 = ops.index_expr(-1 + 2 * i3 + 224 * i2, torch.int64)
      tmp78 = tmp76 > tmp59
      tmp79 = ops.where(tmp78, tmp77, tmp58)
      tmp80 = ops.maximum(tmp76, tmp59)
      tmp81 = ops.index_expr(2 * i2, torch.int64)
      tmp82 = ops.index_expr(0, torch.int64)
      tmp83 = tmp81 >= tmp82
      tmp84 = ops.index_expr(2 * i2, torch.int64)
      tmp85 = ops.index_expr(112, torch.int64)
      tmp86 = tmp84 < tmp85
      tmp87 = tmp83 & tmp86
      tmp88 = ops.index_expr(2 * i3, torch.int64)
      tmp89 = ops.index_expr(0, torch.int64)
      tmp90 = tmp88 >= tmp89
      tmp91 = ops.index_expr(2 * i3, torch.int64)
      tmp92 = ops.index_expr(112, torch.int64)
      tmp93 = tmp91 < tmp92
      tmp94 = tmp90 & tmp93
      tmp95 = tmp87 & tmp94
      tmp96 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
      tmp97 = ops.masked(tmp95, tmp96, -inf)
      tmp98 = ops.index_expr(2 * i3 + 224 * i2, torch.int64)
      tmp99 = tmp97 > tmp80
      tmp100 = ops.where(tmp99, tmp98, tmp79)
      tmp101 = ops.maximum(tmp97, tmp80)
      tmp102 = ops.index_expr(2 * i2, torch.int64)
      tmp103 = ops.index_expr(0, torch.int64)
      tmp104 = tmp102 >= tmp103
      tmp105 = ops.index_expr(2 * i2, torch.int64)
      tmp106 = ops.index_expr(112, torch.int64)
      tmp107 = tmp105 < tmp106
      tmp108 = tmp104 & tmp107
      tmp109 = ops.index_expr(1 + 2 * i3, torch.int64)
      tmp110 = ops.index_expr(0, torch.int64)
      tmp111 = tmp109 >= tmp110
      tmp112 = ops.index_expr(1 + 2 * i3, torch.int64)
      tmp113 = ops.index_expr(112, torch.int64)
      tmp114 = tmp112 < tmp113
      tmp115 = tmp111 & tmp114
      tmp116 = tmp108 & tmp115
      tmp117 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp118 = ops.masked(tmp116, tmp117, -inf)
      tmp119 = ops.index_expr(1 + 2 * i3 + 224 * i2, torch.int64)
      tmp120 = tmp118 > tmp101
      tmp121 = ops.where(tmp120, tmp119, tmp100)
      tmp122 = ops.maximum(tmp118, tmp101)
      tmp123 = ops.index_expr(1 + 2 * i2, torch.int64)
      tmp124 = ops.index_expr(0, torch.int64)
      tmp125 = tmp123 >= tmp124
      tmp126 = ops.index_expr(1 + 2 * i2, torch.int64)
      tmp127 = ops.index_expr(112, torch.int64)
      tmp128 = tmp126 < tmp127
      tmp129 = tmp125 & tmp128
      tmp130 = ops.index_expr(-1 + 2 * i3, torch.int64)
      tmp131 = ops.index_expr(0, torch.int64)
      tmp132 = tmp130 >= tmp131
      tmp133 = ops.index_expr(-1 + 2 * i3, torch.int64)
      tmp134 = ops.index_expr(112, torch.int64)
      tmp135 = tmp133 < tmp134
      tmp136 = tmp132 & tmp135
      tmp137 = tmp129 & tmp136
      tmp138 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp139 = ops.masked(tmp137, tmp138, -inf)
      tmp140 = ops.index_expr(111 + 2 * i3 + 224 * i2, torch.int64)
      tmp141 = tmp139 > tmp122
      tmp142 = ops.where(tmp141, tmp140, tmp121)
      tmp143 = ops.maximum(tmp139, tmp122)
      tmp144 = ops.index_expr(1 + 2 * i2, torch.int64)
      tmp145 = ops.index_expr(0, torch.int64)
      tmp146 = tmp144 >= tmp145
      tmp147 = ops.index_expr(1 + 2 * i2, torch.int64)
      tmp148 = ops.index_expr(112, torch.int64)
      tmp149 = tmp147 < tmp148
      tmp150 = tmp146 & tmp149
      tmp151 = ops.index_expr(2 * i3, torch.int64)
      tmp152 = ops.index_expr(0, torch.int64)
      tmp153 = tmp151 >= tmp152
      tmp154 = ops.index_expr(2 * i3, torch.int64)
      tmp155 = ops.index_expr(112, torch.int64)
      tmp156 = tmp154 < tmp155
      tmp157 = tmp153 & tmp156
      tmp158 = tmp150 & tmp157
      tmp159 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp160 = ops.masked(tmp158, tmp159, -inf)
      tmp161 = ops.index_expr(112 + 2 * i3 + 224 * i2, torch.int64)
      tmp162 = tmp160 > tmp143
      tmp163 = ops.where(tmp162, tmp161, tmp142)
      tmp164 = ops.maximum(tmp160, tmp143)
      tmp165 = ops.index_expr(1 + 2 * i2, torch.int64)
      tmp166 = ops.index_expr(0, torch.int64)
      tmp167 = tmp165 >= tmp166
      tmp168 = ops.index_expr(1 + 2 * i2, torch.int64)
      tmp169 = ops.index_expr(112, torch.int64)
      tmp170 = tmp168 < tmp169
      tmp171 = tmp167 & tmp170
      tmp172 = ops.index_expr(1 + 2 * i3, torch.int64)
      tmp173 = ops.index_expr(0, torch.int64)
      tmp174 = tmp172 >= tmp173
      tmp175 = ops.index_expr(1 + 2 * i3, torch.int64)
      tmp176 = ops.index_expr(112, torch.int64)
      tmp177 = tmp175 < tmp176
      tmp178 = tmp174 & tmp177
      tmp179 = tmp171 & tmp178
      tmp180 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp181 = ops.masked(tmp179, tmp180, -inf)
      tmp182 = ops.index_expr(113 + 2 * i3 + 224 * i2, torch.int64)
      tmp183 = tmp181 > tmp164
      tmp184 = ops.where(tmp183, tmp182, tmp163)
      tmp185 = ops.maximum(tmp181, tmp164)
      return tmp184
  ,
  ranges=[1, 64, 56, 56],
  origins={getitem_3}
)), 'origins': {getitem_3}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf11', layout=FixedLayout('cuda', torch.int64, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp1 = ops.index_expr(0, torch.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp4 = ops.index_expr(112, torch.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp2 & tmp5
        tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp8 = ops.index_expr(0, torch.int64)
        tmp9 = tmp7 >= tmp8
        tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp11 = ops.index_expr(112, torch.int64)
        tmp12 = tmp10 < tmp11
        tmp13 = tmp9 & tmp12
        tmp14 = tmp6 & tmp13
        tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp16 = ops.masked(tmp14, tmp15, -inf)
        tmp17 = ops.index_expr(-113 + 2 * i3 + 224 * i2, torch.int64)
        tmp18 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp19 = ops.index_expr(0, torch.int64)
        tmp20 = tmp18 >= tmp19
        tmp21 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp22 = ops.index_expr(112, torch.int64)
        tmp23 = tmp21 < tmp22
        tmp24 = tmp20 & tmp23
        tmp25 = ops.index_expr(2 * i3, torch.int64)
        tmp26 = ops.index_expr(0, torch.int64)
        tmp27 = tmp25 >= tmp26
        tmp28 = ops.index_expr(2 * i3, torch.int64)
        tmp29 = ops.index_expr(112, torch.int64)
        tmp30 = tmp28 < tmp29
        tmp31 = tmp27 & tmp30
        tmp32 = tmp24 & tmp31
        tmp33 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp34 = ops.masked(tmp32, tmp33, -inf)
        tmp35 = ops.index_expr(-112 + 2 * i3 + 224 * i2, torch.int64)
        tmp36 = tmp34 > tmp16
        tmp37 = ops.where(tmp36, tmp35, tmp17)
        tmp38 = ops.maximum(tmp34, tmp16)
        tmp39 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp40 = ops.index_expr(0, torch.int64)
        tmp41 = tmp39 >= tmp40
        tmp42 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp43 = ops.index_expr(112, torch.int64)
        tmp44 = tmp42 < tmp43
        tmp45 = tmp41 & tmp44
        tmp46 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp47 = ops.index_expr(0, torch.int64)
        tmp48 = tmp46 >= tmp47
        tmp49 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp50 = ops.index_expr(112, torch.int64)
        tmp51 = tmp49 < tmp50
        tmp52 = tmp48 & tmp51
        tmp53 = tmp45 & tmp52
        tmp54 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp55 = ops.masked(tmp53, tmp54, -inf)
        tmp56 = ops.index_expr(-111 + 2 * i3 + 224 * i2, torch.int64)
        tmp57 = tmp55 > tmp38
        tmp58 = ops.where(tmp57, tmp56, tmp37)
        tmp59 = ops.maximum(tmp55, tmp38)
        tmp60 = ops.index_expr(2 * i2, torch.int64)
        tmp61 = ops.index_expr(0, torch.int64)
        tmp62 = tmp60 >= tmp61
        tmp63 = ops.index_expr(2 * i2, torch.int64)
        tmp64 = ops.index_expr(112, torch.int64)
        tmp65 = tmp63 < tmp64
        tmp66 = tmp62 & tmp65
        tmp67 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp68 = ops.index_expr(0, torch.int64)
        tmp69 = tmp67 >= tmp68
        tmp70 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp71 = ops.index_expr(112, torch.int64)
        tmp72 = tmp70 < tmp71
        tmp73 = tmp69 & tmp72
        tmp74 = tmp66 & tmp73
        tmp75 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp76 = ops.masked(tmp74, tmp75, -inf)
        tmp77 = ops.index_expr(-1 + 2 * i3 + 224 * i2, torch.int64)
        tmp78 = tmp76 > tmp59
        tmp79 = ops.where(tmp78, tmp77, tmp58)
        tmp80 = ops.maximum(tmp76, tmp59)
        tmp81 = ops.index_expr(2 * i2, torch.int64)
        tmp82 = ops.index_expr(0, torch.int64)
        tmp83 = tmp81 >= tmp82
        tmp84 = ops.index_expr(2 * i2, torch.int64)
        tmp85 = ops.index_expr(112, torch.int64)
        tmp86 = tmp84 < tmp85
        tmp87 = tmp83 & tmp86
        tmp88 = ops.index_expr(2 * i3, torch.int64)
        tmp89 = ops.index_expr(0, torch.int64)
        tmp90 = tmp88 >= tmp89
        tmp91 = ops.index_expr(2 * i3, torch.int64)
        tmp92 = ops.index_expr(112, torch.int64)
        tmp93 = tmp91 < tmp92
        tmp94 = tmp90 & tmp93
        tmp95 = tmp87 & tmp94
        tmp96 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
        tmp97 = ops.masked(tmp95, tmp96, -inf)
        tmp98 = ops.index_expr(2 * i3 + 224 * i2, torch.int64)
        tmp99 = tmp97 > tmp80
        tmp100 = ops.where(tmp99, tmp98, tmp79)
        tmp101 = ops.maximum(tmp97, tmp80)
        tmp102 = ops.index_expr(2 * i2, torch.int64)
        tmp103 = ops.index_expr(0, torch.int64)
        tmp104 = tmp102 >= tmp103
        tmp105 = ops.index_expr(2 * i2, torch.int64)
        tmp106 = ops.index_expr(112, torch.int64)
        tmp107 = tmp105 < tmp106
        tmp108 = tmp104 & tmp107
        tmp109 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp110 = ops.index_expr(0, torch.int64)
        tmp111 = tmp109 >= tmp110
        tmp112 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp113 = ops.index_expr(112, torch.int64)
        tmp114 = tmp112 < tmp113
        tmp115 = tmp111 & tmp114
        tmp116 = tmp108 & tmp115
        tmp117 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp118 = ops.masked(tmp116, tmp117, -inf)
        tmp119 = ops.index_expr(1 + 2 * i3 + 224 * i2, torch.int64)
        tmp120 = tmp118 > tmp101
        tmp121 = ops.where(tmp120, tmp119, tmp100)
        tmp122 = ops.maximum(tmp118, tmp101)
        tmp123 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp124 = ops.index_expr(0, torch.int64)
        tmp125 = tmp123 >= tmp124
        tmp126 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp127 = ops.index_expr(112, torch.int64)
        tmp128 = tmp126 < tmp127
        tmp129 = tmp125 & tmp128
        tmp130 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp131 = ops.index_expr(0, torch.int64)
        tmp132 = tmp130 >= tmp131
        tmp133 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp134 = ops.index_expr(112, torch.int64)
        tmp135 = tmp133 < tmp134
        tmp136 = tmp132 & tmp135
        tmp137 = tmp129 & tmp136
        tmp138 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp139 = ops.masked(tmp137, tmp138, -inf)
        tmp140 = ops.index_expr(111 + 2 * i3 + 224 * i2, torch.int64)
        tmp141 = tmp139 > tmp122
        tmp142 = ops.where(tmp141, tmp140, tmp121)
        tmp143 = ops.maximum(tmp139, tmp122)
        tmp144 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp145 = ops.index_expr(0, torch.int64)
        tmp146 = tmp144 >= tmp145
        tmp147 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp148 = ops.index_expr(112, torch.int64)
        tmp149 = tmp147 < tmp148
        tmp150 = tmp146 & tmp149
        tmp151 = ops.index_expr(2 * i3, torch.int64)
        tmp152 = ops.index_expr(0, torch.int64)
        tmp153 = tmp151 >= tmp152
        tmp154 = ops.index_expr(2 * i3, torch.int64)
        tmp155 = ops.index_expr(112, torch.int64)
        tmp156 = tmp154 < tmp155
        tmp157 = tmp153 & tmp156
        tmp158 = tmp150 & tmp157
        tmp159 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp160 = ops.masked(tmp158, tmp159, -inf)
        tmp161 = ops.index_expr(112 + 2 * i3 + 224 * i2, torch.int64)
        tmp162 = tmp160 > tmp143
        tmp163 = ops.where(tmp162, tmp161, tmp142)
        tmp164 = ops.maximum(tmp160, tmp143)
        tmp165 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp166 = ops.index_expr(0, torch.int64)
        tmp167 = tmp165 >= tmp166
        tmp168 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp169 = ops.index_expr(112, torch.int64)
        tmp170 = tmp168 < tmp169
        tmp171 = tmp167 & tmp170
        tmp172 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp173 = ops.index_expr(0, torch.int64)
        tmp174 = tmp172 >= tmp173
        tmp175 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp176 = ops.index_expr(112, torch.int64)
        tmp177 = tmp175 < tmp176
        tmp178 = tmp174 & tmp177
        tmp179 = tmp171 & tmp178
        tmp180 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp181 = ops.masked(tmp179, tmp180, -inf)
        tmp182 = ops.index_expr(113 + 2 * i3 + 224 * i2, torch.int64)
        tmp183 = tmp181 > tmp164
        tmp184 = ops.where(tmp183, tmp182, tmp163)
        tmp185 = ops.maximum(tmp181, tmp164)
        return tmp184
    ,
    ranges=[1, 64, 56, 56],
    origins={getitem_3}
  ))
))
buf11
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: convolution_1
Overloadpacket: aten.convolution
Flop count: 236027904
Case 2: call function, n.target in layout_constraints

Call_function in graph------------------
Target: aten.convolution.default,
Args: [TensorBox(StorageBox(
  ComputedBuffer(name='buf10', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp1 = ops.index_expr(0, torch.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp4 = ops.index_expr(112, torch.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp2 & tmp5
        tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp8 = ops.index_expr(0, torch.int64)
        tmp9 = tmp7 >= tmp8
        tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp11 = ops.index_expr(112, torch.int64)
        tmp12 = tmp10 < tmp11
        tmp13 = tmp9 & tmp12
        tmp14 = tmp6 & tmp13
        tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp16 = ops.masked(tmp14, tmp15, -inf)
        tmp17 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp18 = ops.index_expr(0, torch.int64)
        tmp19 = tmp17 >= tmp18
        tmp20 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp21 = ops.index_expr(112, torch.int64)
        tmp22 = tmp20 < tmp21
        tmp23 = tmp19 & tmp22
        tmp24 = ops.index_expr(2 * i3, torch.int64)
        tmp25 = ops.index_expr(0, torch.int64)
        tmp26 = tmp24 >= tmp25
        tmp27 = ops.index_expr(2 * i3, torch.int64)
        tmp28 = ops.index_expr(112, torch.int64)
        tmp29 = tmp27 < tmp28
        tmp30 = tmp26 & tmp29
        tmp31 = tmp23 & tmp30
        tmp32 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp33 = ops.masked(tmp31, tmp32, -inf)
        tmp34 = ops.maximum(tmp33, tmp16)
        tmp35 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp36 = ops.index_expr(0, torch.int64)
        tmp37 = tmp35 >= tmp36
        tmp38 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp39 = ops.index_expr(112, torch.int64)
        tmp40 = tmp38 < tmp39
        tmp41 = tmp37 & tmp40
        tmp42 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp43 = ops.index_expr(0, torch.int64)
        tmp44 = tmp42 >= tmp43
        tmp45 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp46 = ops.index_expr(112, torch.int64)
        tmp47 = tmp45 < tmp46
        tmp48 = tmp44 & tmp47
        tmp49 = tmp41 & tmp48
        tmp50 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp51 = ops.masked(tmp49, tmp50, -inf)
        tmp52 = ops.maximum(tmp51, tmp34)
        tmp53 = ops.index_expr(2 * i2, torch.int64)
        tmp54 = ops.index_expr(0, torch.int64)
        tmp55 = tmp53 >= tmp54
        tmp56 = ops.index_expr(2 * i2, torch.int64)
        tmp57 = ops.index_expr(112, torch.int64)
        tmp58 = tmp56 < tmp57
        tmp59 = tmp55 & tmp58
        tmp60 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp61 = ops.index_expr(0, torch.int64)
        tmp62 = tmp60 >= tmp61
        tmp63 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp64 = ops.index_expr(112, torch.int64)
        tmp65 = tmp63 < tmp64
        tmp66 = tmp62 & tmp65
        tmp67 = tmp59 & tmp66
        tmp68 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp69 = ops.masked(tmp67, tmp68, -inf)
        tmp70 = ops.maximum(tmp69, tmp52)
        tmp71 = ops.index_expr(2 * i2, torch.int64)
        tmp72 = ops.index_expr(0, torch.int64)
        tmp73 = tmp71 >= tmp72
        tmp74 = ops.index_expr(2 * i2, torch.int64)
        tmp75 = ops.index_expr(112, torch.int64)
        tmp76 = tmp74 < tmp75
        tmp77 = tmp73 & tmp76
        tmp78 = ops.index_expr(2 * i3, torch.int64)
        tmp79 = ops.index_expr(0, torch.int64)
        tmp80 = tmp78 >= tmp79
        tmp81 = ops.index_expr(2 * i3, torch.int64)
        tmp82 = ops.index_expr(112, torch.int64)
        tmp83 = tmp81 < tmp82
        tmp84 = tmp80 & tmp83
        tmp85 = tmp77 & tmp84
        tmp86 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
        tmp87 = ops.masked(tmp85, tmp86, -inf)
        tmp88 = ops.maximum(tmp87, tmp70)
        tmp89 = ops.index_expr(2 * i2, torch.int64)
        tmp90 = ops.index_expr(0, torch.int64)
        tmp91 = tmp89 >= tmp90
        tmp92 = ops.index_expr(2 * i2, torch.int64)
        tmp93 = ops.index_expr(112, torch.int64)
        tmp94 = tmp92 < tmp93
        tmp95 = tmp91 & tmp94
        tmp96 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp97 = ops.index_expr(0, torch.int64)
        tmp98 = tmp96 >= tmp97
        tmp99 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp100 = ops.index_expr(112, torch.int64)
        tmp101 = tmp99 < tmp100
        tmp102 = tmp98 & tmp101
        tmp103 = tmp95 & tmp102
        tmp104 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp105 = ops.masked(tmp103, tmp104, -inf)
        tmp106 = ops.maximum(tmp105, tmp88)
        tmp107 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp108 = ops.index_expr(0, torch.int64)
        tmp109 = tmp107 >= tmp108
        tmp110 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp111 = ops.index_expr(112, torch.int64)
        tmp112 = tmp110 < tmp111
        tmp113 = tmp109 & tmp112
        tmp114 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp115 = ops.index_expr(0, torch.int64)
        tmp116 = tmp114 >= tmp115
        tmp117 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp118 = ops.index_expr(112, torch.int64)
        tmp119 = tmp117 < tmp118
        tmp120 = tmp116 & tmp119
        tmp121 = tmp113 & tmp120
        tmp122 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp123 = ops.masked(tmp121, tmp122, -inf)
        tmp124 = ops.maximum(tmp123, tmp106)
        tmp125 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp126 = ops.index_expr(0, torch.int64)
        tmp127 = tmp125 >= tmp126
        tmp128 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp129 = ops.index_expr(112, torch.int64)
        tmp130 = tmp128 < tmp129
        tmp131 = tmp127 & tmp130
        tmp132 = ops.index_expr(2 * i3, torch.int64)
        tmp133 = ops.index_expr(0, torch.int64)
        tmp134 = tmp132 >= tmp133
        tmp135 = ops.index_expr(2 * i3, torch.int64)
        tmp136 = ops.index_expr(112, torch.int64)
        tmp137 = tmp135 < tmp136
        tmp138 = tmp134 & tmp137
        tmp139 = tmp131 & tmp138
        tmp140 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp141 = ops.masked(tmp139, tmp140, -inf)
        tmp142 = ops.maximum(tmp141, tmp124)
        tmp143 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp144 = ops.index_expr(0, torch.int64)
        tmp145 = tmp143 >= tmp144
        tmp146 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp147 = ops.index_expr(112, torch.int64)
        tmp148 = tmp146 < tmp147
        tmp149 = tmp145 & tmp148
        tmp150 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp151 = ops.index_expr(0, torch.int64)
        tmp152 = tmp150 >= tmp151
        tmp153 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp154 = ops.index_expr(112, torch.int64)
        tmp155 = tmp153 < tmp154
        tmp156 = tmp152 & tmp155
        tmp157 = tmp149 & tmp156
        tmp158 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp159 = ops.masked(tmp157, tmp158, -inf)
        tmp160 = ops.maximum(tmp159, tmp142)
        return tmp160
    ,
    ranges=[1, 64, 56, 56],
    origins={getitem_2}
  ))
)), TensorBox(StorageBox(
  InputBuffer(name='primals_4', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))
)), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1],
Kwargs: {}...
Before calling out


Not realizing StorageBox with name: buf10

Not realizing StorageBox with name: primals_4
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf12,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf10', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp1 = ops.index_expr(0, torch.int64)
          tmp2 = tmp0 >= tmp1
          tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp4 = ops.index_expr(112, torch.int64)
          tmp5 = tmp3 < tmp4
          tmp6 = tmp2 & tmp5
          tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp8 = ops.index_expr(0, torch.int64)
          tmp9 = tmp7 >= tmp8
          tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp11 = ops.index_expr(112, torch.int64)
          tmp12 = tmp10 < tmp11
          tmp13 = tmp9 & tmp12
          tmp14 = tmp6 & tmp13
          tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp16 = ops.masked(tmp14, tmp15, -inf)
          tmp17 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp18 = ops.index_expr(0, torch.int64)
          tmp19 = tmp17 >= tmp18
          tmp20 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp21 = ops.index_expr(112, torch.int64)
          tmp22 = tmp20 < tmp21
          tmp23 = tmp19 & tmp22
          tmp24 = ops.index_expr(2 * i3, torch.int64)
          tmp25 = ops.index_expr(0, torch.int64)
          tmp26 = tmp24 >= tmp25
          tmp27 = ops.index_expr(2 * i3, torch.int64)
          tmp28 = ops.index_expr(112, torch.int64)
          tmp29 = tmp27 < tmp28
          tmp30 = tmp26 & tmp29
          tmp31 = tmp23 & tmp30
          tmp32 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp33 = ops.masked(tmp31, tmp32, -inf)
          tmp34 = ops.maximum(tmp33, tmp16)
          tmp35 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp36 = ops.index_expr(0, torch.int64)
          tmp37 = tmp35 >= tmp36
          tmp38 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp39 = ops.index_expr(112, torch.int64)
          tmp40 = tmp38 < tmp39
          tmp41 = tmp37 & tmp40
          tmp42 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp43 = ops.index_expr(0, torch.int64)
          tmp44 = tmp42 >= tmp43
          tmp45 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp46 = ops.index_expr(112, torch.int64)
          tmp47 = tmp45 < tmp46
          tmp48 = tmp44 & tmp47
          tmp49 = tmp41 & tmp48
          tmp50 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp51 = ops.masked(tmp49, tmp50, -inf)
          tmp52 = ops.maximum(tmp51, tmp34)
          tmp53 = ops.index_expr(2 * i2, torch.int64)
          tmp54 = ops.index_expr(0, torch.int64)
          tmp55 = tmp53 >= tmp54
          tmp56 = ops.index_expr(2 * i2, torch.int64)
          tmp57 = ops.index_expr(112, torch.int64)
          tmp58 = tmp56 < tmp57
          tmp59 = tmp55 & tmp58
          tmp60 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp61 = ops.index_expr(0, torch.int64)
          tmp62 = tmp60 >= tmp61
          tmp63 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp64 = ops.index_expr(112, torch.int64)
          tmp65 = tmp63 < tmp64
          tmp66 = tmp62 & tmp65
          tmp67 = tmp59 & tmp66
          tmp68 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp69 = ops.masked(tmp67, tmp68, -inf)
          tmp70 = ops.maximum(tmp69, tmp52)
          tmp71 = ops.index_expr(2 * i2, torch.int64)
          tmp72 = ops.index_expr(0, torch.int64)
          tmp73 = tmp71 >= tmp72
          tmp74 = ops.index_expr(2 * i2, torch.int64)
          tmp75 = ops.index_expr(112, torch.int64)
          tmp76 = tmp74 < tmp75
          tmp77 = tmp73 & tmp76
          tmp78 = ops.index_expr(2 * i3, torch.int64)
          tmp79 = ops.index_expr(0, torch.int64)
          tmp80 = tmp78 >= tmp79
          tmp81 = ops.index_expr(2 * i3, torch.int64)
          tmp82 = ops.index_expr(112, torch.int64)
          tmp83 = tmp81 < tmp82
          tmp84 = tmp80 & tmp83
          tmp85 = tmp77 & tmp84
          tmp86 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
          tmp87 = ops.masked(tmp85, tmp86, -inf)
          tmp88 = ops.maximum(tmp87, tmp70)
          tmp89 = ops.index_expr(2 * i2, torch.int64)
          tmp90 = ops.index_expr(0, torch.int64)
          tmp91 = tmp89 >= tmp90
          tmp92 = ops.index_expr(2 * i2, torch.int64)
          tmp93 = ops.index_expr(112, torch.int64)
          tmp94 = tmp92 < tmp93
          tmp95 = tmp91 & tmp94
          tmp96 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp97 = ops.index_expr(0, torch.int64)
          tmp98 = tmp96 >= tmp97
          tmp99 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp100 = ops.index_expr(112, torch.int64)
          tmp101 = tmp99 < tmp100
          tmp102 = tmp98 & tmp101
          tmp103 = tmp95 & tmp102
          tmp104 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp105 = ops.masked(tmp103, tmp104, -inf)
          tmp106 = ops.maximum(tmp105, tmp88)
          tmp107 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp108 = ops.index_expr(0, torch.int64)
          tmp109 = tmp107 >= tmp108
          tmp110 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp111 = ops.index_expr(112, torch.int64)
          tmp112 = tmp110 < tmp111
          tmp113 = tmp109 & tmp112
          tmp114 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp115 = ops.index_expr(0, torch.int64)
          tmp116 = tmp114 >= tmp115
          tmp117 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp118 = ops.index_expr(112, torch.int64)
          tmp119 = tmp117 < tmp118
          tmp120 = tmp116 & tmp119
          tmp121 = tmp113 & tmp120
          tmp122 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp123 = ops.masked(tmp121, tmp122, -inf)
          tmp124 = ops.maximum(tmp123, tmp106)
          tmp125 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp126 = ops.index_expr(0, torch.int64)
          tmp127 = tmp125 >= tmp126
          tmp128 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp129 = ops.index_expr(112, torch.int64)
          tmp130 = tmp128 < tmp129
          tmp131 = tmp127 & tmp130
          tmp132 = ops.index_expr(2 * i3, torch.int64)
          tmp133 = ops.index_expr(0, torch.int64)
          tmp134 = tmp132 >= tmp133
          tmp135 = ops.index_expr(2 * i3, torch.int64)
          tmp136 = ops.index_expr(112, torch.int64)
          tmp137 = tmp135 < tmp136
          tmp138 = tmp134 & tmp137
          tmp139 = tmp131 & tmp138
          tmp140 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp141 = ops.masked(tmp139, tmp140, -inf)
          tmp142 = ops.maximum(tmp141, tmp124)
          tmp143 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp144 = ops.index_expr(0, torch.int64)
          tmp145 = tmp143 >= tmp144
          tmp146 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp147 = ops.index_expr(112, torch.int64)
          tmp148 = tmp146 < tmp147
          tmp149 = tmp145 & tmp148
          tmp150 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp151 = ops.index_expr(0, torch.int64)
          tmp152 = tmp150 >= tmp151
          tmp153 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp154 = ops.index_expr(112, torch.int64)
          tmp155 = tmp153 < tmp154
          tmp156 = tmp152 & tmp155
          tmp157 = tmp149 & tmp156
          tmp158 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp159 = ops.masked(tmp157, tmp158, -inf)
          tmp160 = ops.maximum(tmp159, tmp142)
          return tmp160
      ,
      ranges=[1, 64, 56, 56],
      origins={getitem_2}
    )), InputBuffer(name='primals_4', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_1}
  )
))
buf12
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_5
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_68', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
)), 1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_68, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_5}
  )
))
Except block: add_5
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: var_mean_1
Overloadpacket: aten.var_mean
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.var_mean.correction,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf12,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf10', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp1 = ops.index_expr(0, torch.int64)
          tmp2 = tmp0 >= tmp1
          tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp4 = ops.index_expr(112, torch.int64)
          tmp5 = tmp3 < tmp4
          tmp6 = tmp2 & tmp5
          tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp8 = ops.index_expr(0, torch.int64)
          tmp9 = tmp7 >= tmp8
          tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp11 = ops.index_expr(112, torch.int64)
          tmp12 = tmp10 < tmp11
          tmp13 = tmp9 & tmp12
          tmp14 = tmp6 & tmp13
          tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp16 = ops.masked(tmp14, tmp15, -inf)
          tmp17 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp18 = ops.index_expr(0, torch.int64)
          tmp19 = tmp17 >= tmp18
          tmp20 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp21 = ops.index_expr(112, torch.int64)
          tmp22 = tmp20 < tmp21
          tmp23 = tmp19 & tmp22
          tmp24 = ops.index_expr(2 * i3, torch.int64)
          tmp25 = ops.index_expr(0, torch.int64)
          tmp26 = tmp24 >= tmp25
          tmp27 = ops.index_expr(2 * i3, torch.int64)
          tmp28 = ops.index_expr(112, torch.int64)
          tmp29 = tmp27 < tmp28
          tmp30 = tmp26 & tmp29
          tmp31 = tmp23 & tmp30
          tmp32 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp33 = ops.masked(tmp31, tmp32, -inf)
          tmp34 = ops.maximum(tmp33, tmp16)
          tmp35 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp36 = ops.index_expr(0, torch.int64)
          tmp37 = tmp35 >= tmp36
          tmp38 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp39 = ops.index_expr(112, torch.int64)
          tmp40 = tmp38 < tmp39
          tmp41 = tmp37 & tmp40
          tmp42 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp43 = ops.index_expr(0, torch.int64)
          tmp44 = tmp42 >= tmp43
          tmp45 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp46 = ops.index_expr(112, torch.int64)
          tmp47 = tmp45 < tmp46
          tmp48 = tmp44 & tmp47
          tmp49 = tmp41 & tmp48
          tmp50 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp51 = ops.masked(tmp49, tmp50, -inf)
          tmp52 = ops.maximum(tmp51, tmp34)
          tmp53 = ops.index_expr(2 * i2, torch.int64)
          tmp54 = ops.index_expr(0, torch.int64)
          tmp55 = tmp53 >= tmp54
          tmp56 = ops.index_expr(2 * i2, torch.int64)
          tmp57 = ops.index_expr(112, torch.int64)
          tmp58 = tmp56 < tmp57
          tmp59 = tmp55 & tmp58
          tmp60 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp61 = ops.index_expr(0, torch.int64)
          tmp62 = tmp60 >= tmp61
          tmp63 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp64 = ops.index_expr(112, torch.int64)
          tmp65 = tmp63 < tmp64
          tmp66 = tmp62 & tmp65
          tmp67 = tmp59 & tmp66
          tmp68 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp69 = ops.masked(tmp67, tmp68, -inf)
          tmp70 = ops.maximum(tmp69, tmp52)
          tmp71 = ops.index_expr(2 * i2, torch.int64)
          tmp72 = ops.index_expr(0, torch.int64)
          tmp73 = tmp71 >= tmp72
          tmp74 = ops.index_expr(2 * i2, torch.int64)
          tmp75 = ops.index_expr(112, torch.int64)
          tmp76 = tmp74 < tmp75
          tmp77 = tmp73 & tmp76
          tmp78 = ops.index_expr(2 * i3, torch.int64)
          tmp79 = ops.index_expr(0, torch.int64)
          tmp80 = tmp78 >= tmp79
          tmp81 = ops.index_expr(2 * i3, torch.int64)
          tmp82 = ops.index_expr(112, torch.int64)
          tmp83 = tmp81 < tmp82
          tmp84 = tmp80 & tmp83
          tmp85 = tmp77 & tmp84
          tmp86 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
          tmp87 = ops.masked(tmp85, tmp86, -inf)
          tmp88 = ops.maximum(tmp87, tmp70)
          tmp89 = ops.index_expr(2 * i2, torch.int64)
          tmp90 = ops.index_expr(0, torch.int64)
          tmp91 = tmp89 >= tmp90
          tmp92 = ops.index_expr(2 * i2, torch.int64)
          tmp93 = ops.index_expr(112, torch.int64)
          tmp94 = tmp92 < tmp93
          tmp95 = tmp91 & tmp94
          tmp96 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp97 = ops.index_expr(0, torch.int64)
          tmp98 = tmp96 >= tmp97
          tmp99 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp100 = ops.index_expr(112, torch.int64)
          tmp101 = tmp99 < tmp100
          tmp102 = tmp98 & tmp101
          tmp103 = tmp95 & tmp102
          tmp104 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp105 = ops.masked(tmp103, tmp104, -inf)
          tmp106 = ops.maximum(tmp105, tmp88)
          tmp107 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp108 = ops.index_expr(0, torch.int64)
          tmp109 = tmp107 >= tmp108
          tmp110 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp111 = ops.index_expr(112, torch.int64)
          tmp112 = tmp110 < tmp111
          tmp113 = tmp109 & tmp112
          tmp114 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp115 = ops.index_expr(0, torch.int64)
          tmp116 = tmp114 >= tmp115
          tmp117 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp118 = ops.index_expr(112, torch.int64)
          tmp119 = tmp117 < tmp118
          tmp120 = tmp116 & tmp119
          tmp121 = tmp113 & tmp120
          tmp122 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp123 = ops.masked(tmp121, tmp122, -inf)
          tmp124 = ops.maximum(tmp123, tmp106)
          tmp125 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp126 = ops.index_expr(0, torch.int64)
          tmp127 = tmp125 >= tmp126
          tmp128 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp129 = ops.index_expr(112, torch.int64)
          tmp130 = tmp128 < tmp129
          tmp131 = tmp127 & tmp130
          tmp132 = ops.index_expr(2 * i3, torch.int64)
          tmp133 = ops.index_expr(0, torch.int64)
          tmp134 = tmp132 >= tmp133
          tmp135 = ops.index_expr(2 * i3, torch.int64)
          tmp136 = ops.index_expr(112, torch.int64)
          tmp137 = tmp135 < tmp136
          tmp138 = tmp134 & tmp137
          tmp139 = tmp131 & tmp138
          tmp140 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp141 = ops.masked(tmp139, tmp140, -inf)
          tmp142 = ops.maximum(tmp141, tmp124)
          tmp143 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp144 = ops.index_expr(0, torch.int64)
          tmp145 = tmp143 >= tmp144
          tmp146 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp147 = ops.index_expr(112, torch.int64)
          tmp148 = tmp146 < tmp147
          tmp149 = tmp145 & tmp148
          tmp150 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp151 = ops.index_expr(0, torch.int64)
          tmp152 = tmp150 >= tmp151
          tmp153 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp154 = ops.index_expr(112, torch.int64)
          tmp155 = tmp153 < tmp154
          tmp156 = tmp152 & tmp155
          tmp157 = tmp149 & tmp156
          tmp158 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp159 = ops.masked(tmp157, tmp158, -inf)
          tmp160 = ops.maximum(tmp159, tmp142)
          return tmp160
      ,
      ranges=[1, 64, 56, 56],
      origins={getitem_2}
    )), InputBuffer(name='primals_4', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_1}
  )
)), [0, 2, 3]),
Kwargs: {'correction': 0, 'keepdim': True}...
Before calling out


Realized StorageBox:
{'data': ComputedBuffer(name='buf13', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf12, r2 + 56 * r1 + 3136 * i1)
      return tmp0
  ,
  ranges=[1, 64, 1, 1],
  reduction_ranges=[1, 56, 56],
  reduction_type=sum,
  origins={var_mean_1}
)), 'origins': {var_mean_1}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf14', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, _, _ = index
      tmp0 = ops.load(buf13, i1)
      tmp1 = ops.index_expr(3136, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=[1, 64, 1, 1],
  origins={var_mean_1}
)), 'origins': {var_mean_1}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf15', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf12, r2 + 56 * r1 + 3136 * i1)
      tmp1 = ops.load(buf14, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.square(tmp2)
      return tmp3
  ,
  ranges=[1, 64, 1, 1],
  reduction_ranges=[1, 56, 56],
  reduction_type=sum,
  origins={var_mean_1}
)), 'origins': {var_mean_1}}
End call_function in graph-----------

Result after run_node: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf15, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_1}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf13, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_1}
  ))
)))
Except block: var_mean_1
buf14
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_4
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf15, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_1}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf13, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_1}
  ))
))), 0),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf15, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_1}
  )
))

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf15, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_1}
  )
))
Except block: getitem_4
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_5
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf15, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_1}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf13, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_1}
  ))
))), 1),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf13, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_1}
  ))
))

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf13, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_1}
  ))
))
buf14
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_6
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf15, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_1}
  )
)), 1e-05),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf15, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 64, 1, 1],
    origins={add_6, var_mean_1}
  )
))
Except block: add_6
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: rsqrt_1
Overloadpacket: aten.rsqrt
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.rsqrt.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf15, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 64, 1, 1],
    origins={add_6, var_mean_1}
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf15, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 64, 1, 1],
    origins={rsqrt_1, add_6, var_mean_1}
  )
))
Except block: rsqrt_1
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: sub_1
Overloadpacket: aten.sub
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.sub.Tensor,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf12,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf10', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp1 = ops.index_expr(0, torch.int64)
          tmp2 = tmp0 >= tmp1
          tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp4 = ops.index_expr(112, torch.int64)
          tmp5 = tmp3 < tmp4
          tmp6 = tmp2 & tmp5
          tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp8 = ops.index_expr(0, torch.int64)
          tmp9 = tmp7 >= tmp8
          tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp11 = ops.index_expr(112, torch.int64)
          tmp12 = tmp10 < tmp11
          tmp13 = tmp9 & tmp12
          tmp14 = tmp6 & tmp13
          tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp16 = ops.masked(tmp14, tmp15, -inf)
          tmp17 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp18 = ops.index_expr(0, torch.int64)
          tmp19 = tmp17 >= tmp18
          tmp20 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp21 = ops.index_expr(112, torch.int64)
          tmp22 = tmp20 < tmp21
          tmp23 = tmp19 & tmp22
          tmp24 = ops.index_expr(2 * i3, torch.int64)
          tmp25 = ops.index_expr(0, torch.int64)
          tmp26 = tmp24 >= tmp25
          tmp27 = ops.index_expr(2 * i3, torch.int64)
          tmp28 = ops.index_expr(112, torch.int64)
          tmp29 = tmp27 < tmp28
          tmp30 = tmp26 & tmp29
          tmp31 = tmp23 & tmp30
          tmp32 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp33 = ops.masked(tmp31, tmp32, -inf)
          tmp34 = ops.maximum(tmp33, tmp16)
          tmp35 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp36 = ops.index_expr(0, torch.int64)
          tmp37 = tmp35 >= tmp36
          tmp38 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp39 = ops.index_expr(112, torch.int64)
          tmp40 = tmp38 < tmp39
          tmp41 = tmp37 & tmp40
          tmp42 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp43 = ops.index_expr(0, torch.int64)
          tmp44 = tmp42 >= tmp43
          tmp45 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp46 = ops.index_expr(112, torch.int64)
          tmp47 = tmp45 < tmp46
          tmp48 = tmp44 & tmp47
          tmp49 = tmp41 & tmp48
          tmp50 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp51 = ops.masked(tmp49, tmp50, -inf)
          tmp52 = ops.maximum(tmp51, tmp34)
          tmp53 = ops.index_expr(2 * i2, torch.int64)
          tmp54 = ops.index_expr(0, torch.int64)
          tmp55 = tmp53 >= tmp54
          tmp56 = ops.index_expr(2 * i2, torch.int64)
          tmp57 = ops.index_expr(112, torch.int64)
          tmp58 = tmp56 < tmp57
          tmp59 = tmp55 & tmp58
          tmp60 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp61 = ops.index_expr(0, torch.int64)
          tmp62 = tmp60 >= tmp61
          tmp63 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp64 = ops.index_expr(112, torch.int64)
          tmp65 = tmp63 < tmp64
          tmp66 = tmp62 & tmp65
          tmp67 = tmp59 & tmp66
          tmp68 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp69 = ops.masked(tmp67, tmp68, -inf)
          tmp70 = ops.maximum(tmp69, tmp52)
          tmp71 = ops.index_expr(2 * i2, torch.int64)
          tmp72 = ops.index_expr(0, torch.int64)
          tmp73 = tmp71 >= tmp72
          tmp74 = ops.index_expr(2 * i2, torch.int64)
          tmp75 = ops.index_expr(112, torch.int64)
          tmp76 = tmp74 < tmp75
          tmp77 = tmp73 & tmp76
          tmp78 = ops.index_expr(2 * i3, torch.int64)
          tmp79 = ops.index_expr(0, torch.int64)
          tmp80 = tmp78 >= tmp79
          tmp81 = ops.index_expr(2 * i3, torch.int64)
          tmp82 = ops.index_expr(112, torch.int64)
          tmp83 = tmp81 < tmp82
          tmp84 = tmp80 & tmp83
          tmp85 = tmp77 & tmp84
          tmp86 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
          tmp87 = ops.masked(tmp85, tmp86, -inf)
          tmp88 = ops.maximum(tmp87, tmp70)
          tmp89 = ops.index_expr(2 * i2, torch.int64)
          tmp90 = ops.index_expr(0, torch.int64)
          tmp91 = tmp89 >= tmp90
          tmp92 = ops.index_expr(2 * i2, torch.int64)
          tmp93 = ops.index_expr(112, torch.int64)
          tmp94 = tmp92 < tmp93
          tmp95 = tmp91 & tmp94
          tmp96 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp97 = ops.index_expr(0, torch.int64)
          tmp98 = tmp96 >= tmp97
          tmp99 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp100 = ops.index_expr(112, torch.int64)
          tmp101 = tmp99 < tmp100
          tmp102 = tmp98 & tmp101
          tmp103 = tmp95 & tmp102
          tmp104 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp105 = ops.masked(tmp103, tmp104, -inf)
          tmp106 = ops.maximum(tmp105, tmp88)
          tmp107 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp108 = ops.index_expr(0, torch.int64)
          tmp109 = tmp107 >= tmp108
          tmp110 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp111 = ops.index_expr(112, torch.int64)
          tmp112 = tmp110 < tmp111
          tmp113 = tmp109 & tmp112
          tmp114 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp115 = ops.index_expr(0, torch.int64)
          tmp116 = tmp114 >= tmp115
          tmp117 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp118 = ops.index_expr(112, torch.int64)
          tmp119 = tmp117 < tmp118
          tmp120 = tmp116 & tmp119
          tmp121 = tmp113 & tmp120
          tmp122 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp123 = ops.masked(tmp121, tmp122, -inf)
          tmp124 = ops.maximum(tmp123, tmp106)
          tmp125 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp126 = ops.index_expr(0, torch.int64)
          tmp127 = tmp125 >= tmp126
          tmp128 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp129 = ops.index_expr(112, torch.int64)
          tmp130 = tmp128 < tmp129
          tmp131 = tmp127 & tmp130
          tmp132 = ops.index_expr(2 * i3, torch.int64)
          tmp133 = ops.index_expr(0, torch.int64)
          tmp134 = tmp132 >= tmp133
          tmp135 = ops.index_expr(2 * i3, torch.int64)
          tmp136 = ops.index_expr(112, torch.int64)
          tmp137 = tmp135 < tmp136
          tmp138 = tmp134 & tmp137
          tmp139 = tmp131 & tmp138
          tmp140 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp141 = ops.masked(tmp139, tmp140, -inf)
          tmp142 = ops.maximum(tmp141, tmp124)
          tmp143 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp144 = ops.index_expr(0, torch.int64)
          tmp145 = tmp143 >= tmp144
          tmp146 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp147 = ops.index_expr(112, torch.int64)
          tmp148 = tmp146 < tmp147
          tmp149 = tmp145 & tmp148
          tmp150 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp151 = ops.index_expr(0, torch.int64)
          tmp152 = tmp150 >= tmp151
          tmp153 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp154 = ops.index_expr(112, torch.int64)
          tmp155 = tmp153 < tmp154
          tmp156 = tmp152 & tmp155
          tmp157 = tmp149 & tmp156
          tmp158 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp159 = ops.masked(tmp157, tmp158, -inf)
          tmp160 = ops.maximum(tmp159, tmp142)
          return tmp160
      ,
      ranges=[1, 64, 56, 56],
      origins={getitem_2}
    )), InputBuffer(name='primals_4', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_1}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf13, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_1}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf12, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf14, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 64, 56, 56],
    origins={sub_1}
  )
))
Except block: sub_1
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_7
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf12, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf14, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 64, 56, 56],
    origins={sub_1}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf15, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 64, 1, 1],
    origins={rsqrt_1, add_6, var_mean_1}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf12, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf14, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf15, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 64, 56, 56],
    origins={sub_1, add_6, mul_7, var_mean_1, rsqrt_1}
  )
))
Except block: mul_7
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_3
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf13, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_1}
  ))
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf13, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_1}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[64], stride=[1]),
    origins=
  )
)
Except block: squeeze_3
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_4
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf15, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 64, 1, 1],
    origins={rsqrt_1, add_6, var_mean_1}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf16', layout=FlexibleLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf15, i0)
      tmp1 = ops.index_expr(3136, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1e-05, torch.float32)
      tmp4 = tmp2 + tmp3
      tmp5 = ops.rsqrt(tmp4)
      return tmp5
  ,
  ranges=(64,),
  origins={rsqrt_1, add_6, squeeze_4, var_mean_1}
)), 'origins': {rsqrt_1, add_6, squeeze_4, var_mean_1}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf16', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf15, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(64,),
    origins={rsqrt_1, add_6, squeeze_4, var_mean_1}
  ))
))
buf16
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_8
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf13, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_1}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[64], stride=[1]),
    origins=
  )
), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf14, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_8}
  )
))
Except block: mul_8
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_9
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_66', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_66, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_9}
  )
))
Except block: mul_9
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_7
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf14, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_8}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_66, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_9}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf17', layout=FlexibleLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf14, i0)
      tmp1 = ops.constant(0.1, torch.float32)
      tmp2 = tmp0 * tmp1
      tmp3 = ops.load(primals_66, i0)
      tmp4 = ops.constant(0.9, torch.float32)
      tmp5 = tmp3 * tmp4
      tmp6 = tmp2 + tmp5
      return tmp6
  ,
  ranges=[64],
  origins={mul_8, mul_9, add_7}
)), 'origins': {mul_8, mul_9, add_7}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf17', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf14, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_66, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[64],
    origins={mul_8, mul_9, add_7}
  ))
))
buf17
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_5
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf15, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_1}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf15, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_1}
      )
    ),
    size=(64,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_5, var_mean_1}
  )
)
Except block: squeeze_5
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_10
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf15, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_1}
      )
    ),
    size=(64,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_5, var_mean_1}
  )
), 1.0003189792663476),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf15, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(64,),
    origins={mul_10}
  )
))
Except block: mul_10
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_11
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf15, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(64,),
    origins={mul_10}
  )
)), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf15, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(64,),
    origins={mul_11, mul_10}
  )
))
Except block: mul_11
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_12
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_67', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_67, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_12}
  )
))
Except block: mul_12
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_8
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf15, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(64,),
    origins={mul_11, mul_10}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_67, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_12}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf18', layout=FlexibleLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf15, i0)
      tmp1 = ops.index_expr(3136, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1.0003189792663476, torch.float32)
      tmp4 = tmp2 * tmp3
      tmp5 = ops.constant(0.1, torch.float32)
      tmp6 = tmp4 * tmp5
      tmp7 = ops.load(primals_67, i0)
      tmp8 = ops.constant(0.9, torch.float32)
      tmp9 = tmp7 * tmp8
      tmp10 = tmp6 + tmp9
      return tmp10
  ,
  ranges=(64,),
  origins={mul_10, mul_11, mul_12, add_8}
)), 'origins': {mul_10, mul_11, mul_12, add_8}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf18', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf15, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_67, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(64,),
    origins={mul_10, mul_11, mul_12, add_8}
  ))
))
buf18
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_4
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_5', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_5', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_4
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_5
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_5', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_5', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_5
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_6
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_6', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_6', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_6
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_7
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_6', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_6', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_7
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_13
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf12, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf14, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf15, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 64, 56, 56],
    origins={sub_1, add_6, mul_7, var_mean_1, rsqrt_1}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_5', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf12, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf14, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf15, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_5, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 64, 56, 56],
    origins={sub_1, add_6, mul_7, mul_13, var_mean_1, rsqrt_1}
  )
))
Except block: mul_13
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_9
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf12, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf14, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf15, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_5, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 64, 56, 56],
    origins={sub_1, add_6, mul_7, mul_13, var_mean_1, rsqrt_1}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_6', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf12, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf14, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf15, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_5, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_6, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 64, 56, 56],
    origins={sub_1, add_6, var_mean_1, mul_7, rsqrt_1, mul_13, ad...
  )
))
Except block: add_9
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: relu_1
Overloadpacket: aten.relu
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.relu.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf12, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf14, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf15, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_5, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_6, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 64, 56, 56],
    origins={sub_1, add_6, var_mean_1, mul_7, rsqrt_1, mul_13, ad...
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf19', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf12, i3 + 56 * i2 + 3136 * i1)
      tmp1 = ops.load(buf14, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf15, i1)
      tmp4 = ops.index_expr(3136, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_5, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_6, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.relu(tmp13)
      return tmp14
  ,
  ranges=[1, 64, 56, 56],
  origins={relu_1, rsqrt_1, sub_1, add_6, mul_7, var_mean_1, mu...
)), 'origins': {relu_1, rsqrt_1, sub_1, add_6, mul_7, var_mean_1, mul_13, add_9}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf19', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf12, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf14, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf15, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_5, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_6, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 64, 56, 56],
    origins={relu_1, rsqrt_1, sub_1, add_6, mul_7, var_mean_1, mu...
  ))
))
buf19
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: convolution_2
Overloadpacket: aten.convolution
Flop count: 231211008
Case 2: call function, n.target in layout_constraints

Call_function in graph------------------
Target: aten.convolution.default,
Args: [TensorBox(StorageBox(
  ComputedBuffer(name='buf19', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf12, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf14, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf15, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_5, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_6, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 64, 56, 56],
    origins={relu_1, rsqrt_1, sub_1, add_6, mul_7, var_mean_1, mu...
  ))
)), TensorBox(StorageBox(
  InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))
)), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1],
Kwargs: {}...
Before calling out


Not realizing StorageBox with name: buf19

Not realizing StorageBox with name: primals_7
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf20,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf19', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf12, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf14, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf15, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_5, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_6, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 64, 56, 56],
      origins={relu_1, rsqrt_1, sub_1, add_6, mul_7, var_mean_1, mu...
    )), InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_2}
  )
))
buf20
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_10
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_71', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
)), 1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_71, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_10}
  )
))
Except block: add_10
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: var_mean_2
Overloadpacket: aten.var_mean
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.var_mean.correction,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf20,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf19', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf12, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf14, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf15, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_5, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_6, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 64, 56, 56],
      origins={relu_1, rsqrt_1, sub_1, add_6, mul_7, var_mean_1, mu...
    )), InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_2}
  )
)), [0, 2, 3]),
Kwargs: {'correction': 0, 'keepdim': True}...
Before calling out


Realized StorageBox:
{'data': ComputedBuffer(name='buf21', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf20, r2 + 56 * r1 + 3136 * i1)
      return tmp0
  ,
  ranges=[1, 64, 1, 1],
  reduction_ranges=[1, 56, 56],
  reduction_type=sum,
  origins={var_mean_2}
)), 'origins': {var_mean_2}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf22', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, _, _ = index
      tmp0 = ops.load(buf21, i1)
      tmp1 = ops.index_expr(3136, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=[1, 64, 1, 1],
  origins={var_mean_2}
)), 'origins': {var_mean_2}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf23', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf20, r2 + 56 * r1 + 3136 * i1)
      tmp1 = ops.load(buf22, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.square(tmp2)
      return tmp3
  ,
  ranges=[1, 64, 1, 1],
  reduction_ranges=[1, 56, 56],
  reduction_type=sum,
  origins={var_mean_2}
)), 'origins': {var_mean_2}}
End call_function in graph-----------

Result after run_node: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf23, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_2}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf22', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf21, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_2}
  ))
)))
Except block: var_mean_2
buf22
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_6
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf23, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_2}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf22', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf21, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_2}
  ))
))), 0),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf23, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_2}
  )
))

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf23, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_2}
  )
))
Except block: getitem_6
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_7
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf23, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_2}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf22', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf21, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_2}
  ))
))), 1),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  ComputedBuffer(name='buf22', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf21, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_2}
  ))
))

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf22', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf21, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_2}
  ))
))
buf22
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_11
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf23, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_2}
  )
)), 1e-05),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf23, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_2, add_11}
  )
))
Except block: add_11
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: rsqrt_2
Overloadpacket: aten.rsqrt
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.rsqrt.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf23, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_2, add_11}
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf23, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 64, 1, 1],
    origins={rsqrt_2, var_mean_2, add_11}
  )
))
Except block: rsqrt_2
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: sub_2
Overloadpacket: aten.sub
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.sub.Tensor,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf20,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf19', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf12, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf14, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf15, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_5, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_6, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 64, 56, 56],
      origins={relu_1, rsqrt_1, sub_1, add_6, mul_7, var_mean_1, mu...
    )), InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_2}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf22', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf21, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_2}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf22, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 64, 56, 56],
    origins={sub_2}
  )
))
Except block: sub_2
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_14
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf22, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 64, 56, 56],
    origins={sub_2}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf23, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 64, 1, 1],
    origins={rsqrt_2, var_mean_2, add_11}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf22, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf23, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 64, 56, 56],
    origins={var_mean_2, add_11, rsqrt_2, sub_2, mul_14}
  )
))
Except block: mul_14
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_6
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf22', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf21, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_2}
  ))
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf22', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf21, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_2}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[64], stride=[1]),
    origins=
  )
)
Except block: squeeze_6
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_7
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf23, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 64, 1, 1],
    origins={rsqrt_2, var_mean_2, add_11}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf24', layout=FlexibleLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf23, i0)
      tmp1 = ops.index_expr(3136, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1e-05, torch.float32)
      tmp4 = tmp2 + tmp3
      tmp5 = ops.rsqrt(tmp4)
      return tmp5
  ,
  ranges=(64,),
  origins={rsqrt_2, var_mean_2, squeeze_7, add_11}
)), 'origins': {rsqrt_2, var_mean_2, squeeze_7, add_11}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf24', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf23, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(64,),
    origins={rsqrt_2, var_mean_2, squeeze_7, add_11}
  ))
))
buf24
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_15
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf22', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf21, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_2}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[64], stride=[1]),
    origins=
  )
), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf22, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_15}
  )
))
Except block: mul_15
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_16
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_69', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_69, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_16}
  )
))
Except block: mul_16
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_12
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf22, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_15}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_69, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_16}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf25', layout=FlexibleLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf22, i0)
      tmp1 = ops.constant(0.1, torch.float32)
      tmp2 = tmp0 * tmp1
      tmp3 = ops.load(primals_69, i0)
      tmp4 = ops.constant(0.9, torch.float32)
      tmp5 = tmp3 * tmp4
      tmp6 = tmp2 + tmp5
      return tmp6
  ,
  ranges=[64],
  origins={mul_15, add_12, mul_16}
)), 'origins': {mul_15, add_12, mul_16}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf25', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf22, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_69, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[64],
    origins={mul_15, add_12, mul_16}
  ))
))
buf25
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_8
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf23, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_2}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf23, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_2}
      )
    ),
    size=(64,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_8, var_mean_2}
  )
)
Except block: squeeze_8
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_17
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf23, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_2}
      )
    ),
    size=(64,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_8, var_mean_2}
  )
), 1.0003189792663476),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf23, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(64,),
    origins={mul_17}
  )
))
Except block: mul_17
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_18
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf23, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(64,),
    origins={mul_17}
  )
)), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf23, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(64,),
    origins={mul_18, mul_17}
  )
))
Except block: mul_18
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_19
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_70', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_70, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_19}
  )
))
Except block: mul_19
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_13
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf23, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(64,),
    origins={mul_18, mul_17}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_70, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_19}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf26', layout=FlexibleLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf23, i0)
      tmp1 = ops.index_expr(3136, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1.0003189792663476, torch.float32)
      tmp4 = tmp2 * tmp3
      tmp5 = ops.constant(0.1, torch.float32)
      tmp6 = tmp4 * tmp5
      tmp7 = ops.load(primals_70, i0)
      tmp8 = ops.constant(0.9, torch.float32)
      tmp9 = tmp7 * tmp8
      tmp10 = tmp6 + tmp9
      return tmp10
  ,
  ranges=(64,),
  origins={mul_19, mul_17, add_13, mul_18}
)), 'origins': {mul_19, mul_17, add_13, mul_18}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf26', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf23, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_70, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(64,),
    origins={mul_19, mul_17, add_13, mul_18}
  ))
))
buf26
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_8
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_8', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_8', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_8
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_9
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_8', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_8', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_9
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_10
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_9', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_9', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_10
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_11
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_9', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_9', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_11
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_20
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf22, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf23, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 64, 56, 56],
    origins={var_mean_2, add_11, rsqrt_2, sub_2, mul_14}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_8', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf22, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf23, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_8, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 64, 56, 56],
    origins={mul_20, var_mean_2, add_11, rsqrt_2, sub_2, mul_14}
  )
))
Except block: mul_20
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_14
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf22, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf23, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_8, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 64, 56, 56],
    origins={mul_20, var_mean_2, add_11, rsqrt_2, sub_2, mul_14}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_9', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf22, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf23, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_8, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_9, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 64, 56, 56],
    origins={var_mean_2, mul_20, rsqrt_2, add_11, add_14, sub_2, ...
  )
))
Except block: add_14
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_15
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf22, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf23, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_8, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_9, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 64, 56, 56],
    origins={var_mean_2, mul_20, rsqrt_2, add_11, add_14, sub_2, ...
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf10', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp1 = ops.index_expr(0, torch.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp4 = ops.index_expr(112, torch.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp2 & tmp5
        tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp8 = ops.index_expr(0, torch.int64)
        tmp9 = tmp7 >= tmp8
        tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp11 = ops.index_expr(112, torch.int64)
        tmp12 = tmp10 < tmp11
        tmp13 = tmp9 & tmp12
        tmp14 = tmp6 & tmp13
        tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp16 = ops.masked(tmp14, tmp15, -inf)
        tmp17 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp18 = ops.index_expr(0, torch.int64)
        tmp19 = tmp17 >= tmp18
        tmp20 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp21 = ops.index_expr(112, torch.int64)
        tmp22 = tmp20 < tmp21
        tmp23 = tmp19 & tmp22
        tmp24 = ops.index_expr(2 * i3, torch.int64)
        tmp25 = ops.index_expr(0, torch.int64)
        tmp26 = tmp24 >= tmp25
        tmp27 = ops.index_expr(2 * i3, torch.int64)
        tmp28 = ops.index_expr(112, torch.int64)
        tmp29 = tmp27 < tmp28
        tmp30 = tmp26 & tmp29
        tmp31 = tmp23 & tmp30
        tmp32 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp33 = ops.masked(tmp31, tmp32, -inf)
        tmp34 = ops.maximum(tmp33, tmp16)
        tmp35 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp36 = ops.index_expr(0, torch.int64)
        tmp37 = tmp35 >= tmp36
        tmp38 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp39 = ops.index_expr(112, torch.int64)
        tmp40 = tmp38 < tmp39
        tmp41 = tmp37 & tmp40
        tmp42 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp43 = ops.index_expr(0, torch.int64)
        tmp44 = tmp42 >= tmp43
        tmp45 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp46 = ops.index_expr(112, torch.int64)
        tmp47 = tmp45 < tmp46
        tmp48 = tmp44 & tmp47
        tmp49 = tmp41 & tmp48
        tmp50 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp51 = ops.masked(tmp49, tmp50, -inf)
        tmp52 = ops.maximum(tmp51, tmp34)
        tmp53 = ops.index_expr(2 * i2, torch.int64)
        tmp54 = ops.index_expr(0, torch.int64)
        tmp55 = tmp53 >= tmp54
        tmp56 = ops.index_expr(2 * i2, torch.int64)
        tmp57 = ops.index_expr(112, torch.int64)
        tmp58 = tmp56 < tmp57
        tmp59 = tmp55 & tmp58
        tmp60 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp61 = ops.index_expr(0, torch.int64)
        tmp62 = tmp60 >= tmp61
        tmp63 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp64 = ops.index_expr(112, torch.int64)
        tmp65 = tmp63 < tmp64
        tmp66 = tmp62 & tmp65
        tmp67 = tmp59 & tmp66
        tmp68 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp69 = ops.masked(tmp67, tmp68, -inf)
        tmp70 = ops.maximum(tmp69, tmp52)
        tmp71 = ops.index_expr(2 * i2, torch.int64)
        tmp72 = ops.index_expr(0, torch.int64)
        tmp73 = tmp71 >= tmp72
        tmp74 = ops.index_expr(2 * i2, torch.int64)
        tmp75 = ops.index_expr(112, torch.int64)
        tmp76 = tmp74 < tmp75
        tmp77 = tmp73 & tmp76
        tmp78 = ops.index_expr(2 * i3, torch.int64)
        tmp79 = ops.index_expr(0, torch.int64)
        tmp80 = tmp78 >= tmp79
        tmp81 = ops.index_expr(2 * i3, torch.int64)
        tmp82 = ops.index_expr(112, torch.int64)
        tmp83 = tmp81 < tmp82
        tmp84 = tmp80 & tmp83
        tmp85 = tmp77 & tmp84
        tmp86 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
        tmp87 = ops.masked(tmp85, tmp86, -inf)
        tmp88 = ops.maximum(tmp87, tmp70)
        tmp89 = ops.index_expr(2 * i2, torch.int64)
        tmp90 = ops.index_expr(0, torch.int64)
        tmp91 = tmp89 >= tmp90
        tmp92 = ops.index_expr(2 * i2, torch.int64)
        tmp93 = ops.index_expr(112, torch.int64)
        tmp94 = tmp92 < tmp93
        tmp95 = tmp91 & tmp94
        tmp96 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp97 = ops.index_expr(0, torch.int64)
        tmp98 = tmp96 >= tmp97
        tmp99 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp100 = ops.index_expr(112, torch.int64)
        tmp101 = tmp99 < tmp100
        tmp102 = tmp98 & tmp101
        tmp103 = tmp95 & tmp102
        tmp104 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp105 = ops.masked(tmp103, tmp104, -inf)
        tmp106 = ops.maximum(tmp105, tmp88)
        tmp107 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp108 = ops.index_expr(0, torch.int64)
        tmp109 = tmp107 >= tmp108
        tmp110 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp111 = ops.index_expr(112, torch.int64)
        tmp112 = tmp110 < tmp111
        tmp113 = tmp109 & tmp112
        tmp114 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp115 = ops.index_expr(0, torch.int64)
        tmp116 = tmp114 >= tmp115
        tmp117 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp118 = ops.index_expr(112, torch.int64)
        tmp119 = tmp117 < tmp118
        tmp120 = tmp116 & tmp119
        tmp121 = tmp113 & tmp120
        tmp122 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp123 = ops.masked(tmp121, tmp122, -inf)
        tmp124 = ops.maximum(tmp123, tmp106)
        tmp125 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp126 = ops.index_expr(0, torch.int64)
        tmp127 = tmp125 >= tmp126
        tmp128 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp129 = ops.index_expr(112, torch.int64)
        tmp130 = tmp128 < tmp129
        tmp131 = tmp127 & tmp130
        tmp132 = ops.index_expr(2 * i3, torch.int64)
        tmp133 = ops.index_expr(0, torch.int64)
        tmp134 = tmp132 >= tmp133
        tmp135 = ops.index_expr(2 * i3, torch.int64)
        tmp136 = ops.index_expr(112, torch.int64)
        tmp137 = tmp135 < tmp136
        tmp138 = tmp134 & tmp137
        tmp139 = tmp131 & tmp138
        tmp140 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp141 = ops.masked(tmp139, tmp140, -inf)
        tmp142 = ops.maximum(tmp141, tmp124)
        tmp143 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp144 = ops.index_expr(0, torch.int64)
        tmp145 = tmp143 >= tmp144
        tmp146 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp147 = ops.index_expr(112, torch.int64)
        tmp148 = tmp146 < tmp147
        tmp149 = tmp145 & tmp148
        tmp150 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp151 = ops.index_expr(0, torch.int64)
        tmp152 = tmp150 >= tmp151
        tmp153 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp154 = ops.index_expr(112, torch.int64)
        tmp155 = tmp153 < tmp154
        tmp156 = tmp152 & tmp155
        tmp157 = tmp149 & tmp156
        tmp158 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp159 = ops.masked(tmp157, tmp158, -inf)
        tmp160 = ops.maximum(tmp159, tmp142)
        return tmp160
    ,
    ranges=[1, 64, 56, 56],
    origins={getitem_2}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf22, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf23, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_8, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_9, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf10, i3 + 56 * i2 + 3136 * i1)
        tmp15 = tmp13 + tmp14
        return tmp15
    ,
    ranges=[1, 64, 56, 56],
    origins={add_15, add_11, mul_14, rsqrt_2, var_mean_2, mul_20,...
  )
))
Except block: add_15
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: relu_2
Overloadpacket: aten.relu
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.relu.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf22, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf23, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_8, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_9, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf10, i3 + 56 * i2 + 3136 * i1)
        tmp15 = tmp13 + tmp14
        return tmp15
    ,
    ranges=[1, 64, 56, 56],
    origins={add_15, add_11, mul_14, rsqrt_2, var_mean_2, mul_20,...
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf27', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
      tmp1 = ops.load(buf22, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf23, i1)
      tmp4 = ops.index_expr(3136, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_8, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_9, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.load(buf10, i3 + 56 * i2 + 3136 * i1)
      tmp15 = tmp13 + tmp14
      tmp16 = ops.relu(tmp15)
      return tmp16
  ,
  ranges=[1, 64, 56, 56],
  origins={add_11, add_15, mul_14, rsqrt_2, var_mean_2, mul_20,...
)), 'origins': {add_11, add_15, mul_14, rsqrt_2, var_mean_2, mul_20, relu_2, add_14, sub_2}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf27', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf22, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf23, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_8, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_9, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf10, i3 + 56 * i2 + 3136 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 64, 56, 56],
    origins={add_11, add_15, mul_14, rsqrt_2, var_mean_2, mul_20,...
  ))
))
buf27
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: convolution_3
Overloadpacket: aten.convolution
Flop count: 231211008
Case 2: call function, n.target in layout_constraints

Call_function in graph------------------
Target: aten.convolution.default,
Args: [TensorBox(StorageBox(
  ComputedBuffer(name='buf27', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf22, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf23, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_8, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_9, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf10, i3 + 56 * i2 + 3136 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 64, 56, 56],
    origins={add_11, add_15, mul_14, rsqrt_2, var_mean_2, mul_20,...
  ))
)), TensorBox(StorageBox(
  InputBuffer(name='primals_10', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))
)), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1],
Kwargs: {}...
Before calling out


Not realizing StorageBox with name: buf27

Not realizing StorageBox with name: primals_10
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf28,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf27', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf22, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf23, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_8, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_9, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf10, i3 + 56 * i2 + 3136 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 64, 56, 56],
      origins={add_11, add_15, mul_14, rsqrt_2, var_mean_2, mul_20,...
    )), InputBuffer(name='primals_10', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_3}
  )
))
buf28
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_16
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_74', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
)), 1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_74, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_16}
  )
))
Except block: add_16
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: var_mean_3
Overloadpacket: aten.var_mean
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.var_mean.correction,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf28,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf27', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf22, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf23, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_8, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_9, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf10, i3 + 56 * i2 + 3136 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 64, 56, 56],
      origins={add_11, add_15, mul_14, rsqrt_2, var_mean_2, mul_20,...
    )), InputBuffer(name='primals_10', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_3}
  )
)), [0, 2, 3]),
Kwargs: {'correction': 0, 'keepdim': True}...
Before calling out


Realized StorageBox:
{'data': ComputedBuffer(name='buf29', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf28, r2 + 56 * r1 + 3136 * i1)
      return tmp0
  ,
  ranges=[1, 64, 1, 1],
  reduction_ranges=[1, 56, 56],
  reduction_type=sum,
  origins={var_mean_3}
)), 'origins': {var_mean_3}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf30', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, _, _ = index
      tmp0 = ops.load(buf29, i1)
      tmp1 = ops.index_expr(3136, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=[1, 64, 1, 1],
  origins={var_mean_3}
)), 'origins': {var_mean_3}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf31', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf28, r2 + 56 * r1 + 3136 * i1)
      tmp1 = ops.load(buf30, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.square(tmp2)
      return tmp3
  ,
  ranges=[1, 64, 1, 1],
  reduction_ranges=[1, 56, 56],
  reduction_type=sum,
  origins={var_mean_3}
)), 'origins': {var_mean_3}}
End call_function in graph-----------

Result after run_node: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf31, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_3}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf30', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf29, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_3}
  ))
)))
Except block: var_mean_3
buf30
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_8
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf31, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_3}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf30', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf29, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_3}
  ))
))), 0),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf31, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_3}
  )
))

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf31, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_3}
  )
))
Except block: getitem_8
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_9
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf31, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_3}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf30', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf29, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_3}
  ))
))), 1),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  ComputedBuffer(name='buf30', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf29, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_3}
  ))
))

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf30', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf29, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_3}
  ))
))
buf30
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_17
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf31, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_3}
  )
)), 1e-05),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf31, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_3, add_17}
  )
))
Except block: add_17
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: rsqrt_3
Overloadpacket: aten.rsqrt
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.rsqrt.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf31, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_3, add_17}
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf31, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 64, 1, 1],
    origins={rsqrt_3, add_17, var_mean_3}
  )
))
Except block: rsqrt_3
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: sub_3
Overloadpacket: aten.sub
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.sub.Tensor,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf28,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf27', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf22, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf23, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_8, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_9, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf10, i3 + 56 * i2 + 3136 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 64, 56, 56],
      origins={add_11, add_15, mul_14, rsqrt_2, var_mean_2, mul_20,...
    )), InputBuffer(name='primals_10', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_3}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf30', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf29, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_3}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf28, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf30, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 64, 56, 56],
    origins={sub_3}
  )
))
Except block: sub_3
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_21
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf28, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf30, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 64, 56, 56],
    origins={sub_3}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf31, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 64, 1, 1],
    origins={rsqrt_3, add_17, var_mean_3}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf28, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf30, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf31, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 64, 56, 56],
    origins={rsqrt_3, add_17, sub_3, mul_21, var_mean_3}
  )
))
Except block: mul_21
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_9
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf30', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf29, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_3}
  ))
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf30', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf29, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_3}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[64], stride=[1]),
    origins=
  )
)
Except block: squeeze_9
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_10
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf31, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 64, 1, 1],
    origins={rsqrt_3, add_17, var_mean_3}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf32', layout=FlexibleLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf31, i0)
      tmp1 = ops.index_expr(3136, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1e-05, torch.float32)
      tmp4 = tmp2 + tmp3
      tmp5 = ops.rsqrt(tmp4)
      return tmp5
  ,
  ranges=(64,),
  origins={rsqrt_3, add_17, var_mean_3, squeeze_10}
)), 'origins': {rsqrt_3, add_17, var_mean_3, squeeze_10}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf32', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf31, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(64,),
    origins={rsqrt_3, add_17, var_mean_3, squeeze_10}
  ))
))
buf32
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_22
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf30', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf29, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_3}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[64], stride=[1]),
    origins=
  )
), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf30, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_22}
  )
))
Except block: mul_22
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_23
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_72', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_72, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_23}
  )
))
Except block: mul_23
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_18
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf30, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_22}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_72, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_23}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf33', layout=FlexibleLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf30, i0)
      tmp1 = ops.constant(0.1, torch.float32)
      tmp2 = tmp0 * tmp1
      tmp3 = ops.load(primals_72, i0)
      tmp4 = ops.constant(0.9, torch.float32)
      tmp5 = tmp3 * tmp4
      tmp6 = tmp2 + tmp5
      return tmp6
  ,
  ranges=[64],
  origins={mul_23, add_18, mul_22}
)), 'origins': {mul_23, add_18, mul_22}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf33', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf30, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_72, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[64],
    origins={mul_23, add_18, mul_22}
  ))
))
buf33
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_11
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf31, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_3}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf31, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_3}
      )
    ),
    size=(64,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_11, var_mean_3}
  )
)
Except block: squeeze_11
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_24
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf31, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_3}
      )
    ),
    size=(64,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_11, var_mean_3}
  )
), 1.0003189792663476),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf31, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(64,),
    origins={mul_24}
  )
))
Except block: mul_24
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_25
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf31, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(64,),
    origins={mul_24}
  )
)), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf31, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(64,),
    origins={mul_24, mul_25}
  )
))
Except block: mul_25
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_26
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_73', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_73, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_26}
  )
))
Except block: mul_26
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_19
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf31, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(64,),
    origins={mul_24, mul_25}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_73, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_26}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf34', layout=FlexibleLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf31, i0)
      tmp1 = ops.index_expr(3136, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1.0003189792663476, torch.float32)
      tmp4 = tmp2 * tmp3
      tmp5 = ops.constant(0.1, torch.float32)
      tmp6 = tmp4 * tmp5
      tmp7 = ops.load(primals_73, i0)
      tmp8 = ops.constant(0.9, torch.float32)
      tmp9 = tmp7 * tmp8
      tmp10 = tmp6 + tmp9
      return tmp10
  ,
  ranges=(64,),
  origins={mul_26, mul_25, mul_24, add_19}
)), 'origins': {mul_26, mul_25, mul_24, add_19}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf34', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf31, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_73, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(64,),
    origins={mul_26, mul_25, mul_24, add_19}
  ))
))
buf34
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_12
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_11', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_11', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_12
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_13
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_11', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_11', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_13
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_14
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_12', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_12', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_14
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_15
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_12', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_12', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_15
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_27
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf28, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf30, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf31, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 64, 56, 56],
    origins={rsqrt_3, add_17, sub_3, mul_21, var_mean_3}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_11', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf28, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf30, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf31, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_11, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 64, 56, 56],
    origins={rsqrt_3, add_17, sub_3, mul_21, var_mean_3, mul_27}
  )
))
Except block: mul_27
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_20
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf28, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf30, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf31, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_11, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 64, 56, 56],
    origins={rsqrt_3, add_17, sub_3, mul_21, var_mean_3, mul_27}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_12', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf28, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf30, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf31, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_11, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_12, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 64, 56, 56],
    origins={rsqrt_3, add_17, sub_3, add_20, mul_21, var_mean_3, ...
  )
))
Except block: add_20
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: relu_3
Overloadpacket: aten.relu
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.relu.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf28, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf30, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf31, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_11, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_12, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 64, 56, 56],
    origins={rsqrt_3, add_17, sub_3, add_20, mul_21, var_mean_3, ...
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf35', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf28, i3 + 56 * i2 + 3136 * i1)
      tmp1 = ops.load(buf30, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf31, i1)
      tmp4 = ops.index_expr(3136, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_11, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_12, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.relu(tmp13)
      return tmp14
  ,
  ranges=[1, 64, 56, 56],
  origins={rsqrt_3, add_17, sub_3, add_20, mul_27, mul_21, var_...
)), 'origins': {rsqrt_3, add_17, sub_3, add_20, mul_27, mul_21, var_mean_3, relu_3}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf35', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf28, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf30, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf31, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_11, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_12, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 64, 56, 56],
    origins={rsqrt_3, add_17, sub_3, add_20, mul_27, mul_21, var_...
  ))
))
buf35
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: convolution_4
Overloadpacket: aten.convolution
Flop count: 231211008
Case 2: call function, n.target in layout_constraints

Call_function in graph------------------
Target: aten.convolution.default,
Args: [TensorBox(StorageBox(
  ComputedBuffer(name='buf35', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf28, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf30, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf31, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_11, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_12, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 64, 56, 56],
    origins={rsqrt_3, add_17, sub_3, add_20, mul_27, mul_21, var_...
  ))
)), TensorBox(StorageBox(
  InputBuffer(name='primals_13', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))
)), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1],
Kwargs: {}...
Before calling out


Not realizing StorageBox with name: buf35

Not realizing StorageBox with name: primals_13
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf36,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf35', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf28, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf30, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf31, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_11, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_12, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 64, 56, 56],
      origins={rsqrt_3, add_17, sub_3, add_20, mul_27, mul_21, var_...
    )), InputBuffer(name='primals_13', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_4}
  )
))
buf36
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_21
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_77', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
)), 1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_77, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_21}
  )
))
Except block: add_21
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: var_mean_4
Overloadpacket: aten.var_mean
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.var_mean.correction,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf36,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf35', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf28, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf30, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf31, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_11, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_12, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 64, 56, 56],
      origins={rsqrt_3, add_17, sub_3, add_20, mul_27, mul_21, var_...
    )), InputBuffer(name='primals_13', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_4}
  )
)), [0, 2, 3]),
Kwargs: {'correction': 0, 'keepdim': True}...
Before calling out


Realized StorageBox:
{'data': ComputedBuffer(name='buf37', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf36, r2 + 56 * r1 + 3136 * i1)
      return tmp0
  ,
  ranges=[1, 64, 1, 1],
  reduction_ranges=[1, 56, 56],
  reduction_type=sum,
  origins={var_mean_4}
)), 'origins': {var_mean_4}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf38', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, _, _ = index
      tmp0 = ops.load(buf37, i1)
      tmp1 = ops.index_expr(3136, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=[1, 64, 1, 1],
  origins={var_mean_4}
)), 'origins': {var_mean_4}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf39', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf36, r2 + 56 * r1 + 3136 * i1)
      tmp1 = ops.load(buf38, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.square(tmp2)
      return tmp3
  ,
  ranges=[1, 64, 1, 1],
  reduction_ranges=[1, 56, 56],
  reduction_type=sum,
  origins={var_mean_4}
)), 'origins': {var_mean_4}}
End call_function in graph-----------

Result after run_node: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf39, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_4}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf38', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf37, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_4}
  ))
)))
Except block: var_mean_4
buf38
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_10
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf39, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_4}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf38', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf37, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_4}
  ))
))), 0),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf39, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_4}
  )
))

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf39, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_4}
  )
))
Except block: getitem_10
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_11
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf39, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_4}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf38', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf37, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_4}
  ))
))), 1),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  ComputedBuffer(name='buf38', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf37, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_4}
  ))
))

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf38', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf37, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_4}
  ))
))
buf38
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_22
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf39, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_4}
  )
)), 1e-05),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf39, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_4, add_22}
  )
))
Except block: add_22
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: rsqrt_4
Overloadpacket: aten.rsqrt
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.rsqrt.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf39, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_4, add_22}
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf39, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 64, 1, 1],
    origins={rsqrt_4, var_mean_4, add_22}
  )
))
Except block: rsqrt_4
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: sub_4
Overloadpacket: aten.sub
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.sub.Tensor,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf36,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf35', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf28, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf30, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf31, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_11, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_12, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 64, 56, 56],
      origins={rsqrt_3, add_17, sub_3, add_20, mul_27, mul_21, var_...
    )), InputBuffer(name='primals_13', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_4}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf38', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf37, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_4}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf38, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 64, 56, 56],
    origins={sub_4}
  )
))
Except block: sub_4
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_28
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf38, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 64, 56, 56],
    origins={sub_4}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf39, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 64, 1, 1],
    origins={rsqrt_4, var_mean_4, add_22}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf38, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf39, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 64, 56, 56],
    origins={rsqrt_4, sub_4, mul_28, var_mean_4, add_22}
  )
))
Except block: mul_28
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_12
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf38', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf37, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_4}
  ))
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf38', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf37, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_4}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[64], stride=[1]),
    origins=
  )
)
Except block: squeeze_12
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_13
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf39, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 64, 1, 1],
    origins={rsqrt_4, var_mean_4, add_22}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf40', layout=FlexibleLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf39, i0)
      tmp1 = ops.index_expr(3136, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1e-05, torch.float32)
      tmp4 = tmp2 + tmp3
      tmp5 = ops.rsqrt(tmp4)
      return tmp5
  ,
  ranges=(64,),
  origins={rsqrt_4, var_mean_4, add_22, squeeze_13}
)), 'origins': {rsqrt_4, var_mean_4, add_22, squeeze_13}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf40', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf39, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(64,),
    origins={rsqrt_4, var_mean_4, add_22, squeeze_13}
  ))
))
buf40
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_29
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf38', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf37, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_4}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[64], stride=[1]),
    origins=
  )
), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf38, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_29}
  )
))
Except block: mul_29
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_30
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_75', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_75, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_30}
  )
))
Except block: mul_30
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_23
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf38, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_29}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_75, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_30}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf41', layout=FlexibleLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf38, i0)
      tmp1 = ops.constant(0.1, torch.float32)
      tmp2 = tmp0 * tmp1
      tmp3 = ops.load(primals_75, i0)
      tmp4 = ops.constant(0.9, torch.float32)
      tmp5 = tmp3 * tmp4
      tmp6 = tmp2 + tmp5
      return tmp6
  ,
  ranges=[64],
  origins={mul_30, mul_29, add_23}
)), 'origins': {mul_30, mul_29, add_23}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf41', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf38, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_75, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[64],
    origins={mul_30, mul_29, add_23}
  ))
))
buf41
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_14
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf39, i1)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 64, 1, 1],
    origins={var_mean_4}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf39, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_4}
      )
    ),
    size=(64,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={var_mean_4, squeeze_14}
  )
)
Except block: squeeze_14
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_31
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf39, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_4}
      )
    ),
    size=(64,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={var_mean_4, squeeze_14}
  )
), 1.0003189792663476),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf39, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(64,),
    origins={mul_31}
  )
))
Except block: mul_31
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_32
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf39, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(64,),
    origins={mul_31}
  )
)), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf39, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(64,),
    origins={mul_32, mul_31}
  )
))
Except block: mul_32
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_33
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_76', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_76, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_33}
  )
))
Except block: mul_33
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_24
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf39, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(64,),
    origins={mul_32, mul_31}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_76, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[64],
    origins={mul_33}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf42', layout=FlexibleLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf39, i0)
      tmp1 = ops.index_expr(3136, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1.0003189792663476, torch.float32)
      tmp4 = tmp2 * tmp3
      tmp5 = ops.constant(0.1, torch.float32)
      tmp6 = tmp4 * tmp5
      tmp7 = ops.load(primals_76, i0)
      tmp8 = ops.constant(0.9, torch.float32)
      tmp9 = tmp7 * tmp8
      tmp10 = tmp6 + tmp9
      return tmp10
  ,
  ranges=(64,),
  origins={mul_32, mul_33, mul_31, add_24}
)), 'origins': {mul_32, mul_33, mul_31, add_24}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf42', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf39, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_76, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(64,),
    origins={mul_32, mul_33, mul_31, add_24}
  ))
))
buf42
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_16
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_14', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_14', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_16
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_17
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_14', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_14', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_17
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_18
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_15', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_15', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_18
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_19
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_15', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_15', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_19
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_34
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf38, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf39, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 64, 56, 56],
    origins={rsqrt_4, sub_4, mul_28, var_mean_4, add_22}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_14', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf38, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf39, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_14, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 64, 56, 56],
    origins={rsqrt_4, sub_4, mul_28, var_mean_4, add_22, mul_34}
  )
))
Except block: mul_34
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_25
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf38, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf39, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_14, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 64, 56, 56],
    origins={rsqrt_4, sub_4, mul_28, var_mean_4, add_22, mul_34}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_15', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[64, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf38, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf39, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_14, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_15, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 64, 56, 56],
    origins={rsqrt_4, sub_4, mul_28, add_25, var_mean_4, add_22, ...
  )
))
Except block: add_25
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_26
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf38, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf39, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_14, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_15, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 64, 56, 56],
    origins={rsqrt_4, sub_4, mul_28, add_25, var_mean_4, add_22, ...
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf27', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf22, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf23, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_8, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_9, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf10, i3 + 56 * i2 + 3136 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 64, 56, 56],
    origins={add_11, add_15, mul_14, rsqrt_2, var_mean_2, mul_20,...
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf38, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf39, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_14, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_15, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
        tmp15 = tmp13 + tmp14
        return tmp15
    ,
    ranges=[1, 64, 56, 56],
    origins={add_26, rsqrt_4, sub_4, add_25, var_mean_4, add_22, ...
  )
))
Except block: add_26
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: relu_4
Overloadpacket: aten.relu
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.relu.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf38, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf39, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_14, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_15, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
        tmp15 = tmp13 + tmp14
        return tmp15
    ,
    ranges=[1, 64, 56, 56],
    origins={add_26, rsqrt_4, sub_4, add_25, var_mean_4, add_22, ...
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf43', layout=FlexibleLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
      tmp1 = ops.load(buf38, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf39, i1)
      tmp4 = ops.index_expr(3136, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_14, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_15, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
      tmp15 = tmp13 + tmp14
      tmp16 = ops.relu(tmp15)
      return tmp16
  ,
  ranges=[1, 64, 56, 56],
  origins={relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, ...
)), 'origins': {relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, add_22, mul_34, mul_28}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf43', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf38, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf39, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_14, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_15, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 64, 56, 56],
    origins={relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, ...
  ))
))
buf43
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: convolution_5
Overloadpacket: aten.convolution
Flop count: 231211008
Case 2: call function, n.target in layout_constraints

Call_function in graph------------------
Target: aten.convolution.default,
Args: [TensorBox(StorageBox(
  ComputedBuffer(name='buf43', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf38, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf39, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_14, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_15, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 64, 56, 56],
    origins={relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, ...
  ))
)), TensorBox(StorageBox(
  InputBuffer(name='primals_16', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 3, 3], stride=[576, 9, 3, 1]))
)), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1],
Kwargs: {}...
Before calling out


Not realizing StorageBox with name: buf43

Not realizing StorageBox with name: primals_16
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf44,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf43', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf38, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf39, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_14, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_15, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 64, 56, 56],
      origins={relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, ...
    )), InputBuffer(name='primals_16', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_5}
  )
))
buf44
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_27
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_80', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
)), 1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_80, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_27}
  )
))
Except block: add_27
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: var_mean_5
Overloadpacket: aten.var_mean
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.var_mean.correction,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf44,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf43', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf38, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf39, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_14, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_15, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 64, 56, 56],
      origins={relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, ...
    )), InputBuffer(name='primals_16', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_5}
  )
)), [0, 2, 3]),
Kwargs: {'correction': 0, 'keepdim': True}...
Before calling out


Realized StorageBox:
{'data': ComputedBuffer(name='buf45', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf44, r2 + 28 * r1 + 784 * i1)
      return tmp0
  ,
  ranges=[1, 128, 1, 1],
  reduction_ranges=[1, 28, 28],
  reduction_type=sum,
  origins={var_mean_5}
)), 'origins': {var_mean_5}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf46', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, _, _ = index
      tmp0 = ops.load(buf45, i1)
      tmp1 = ops.index_expr(784, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=[1, 128, 1, 1],
  origins={var_mean_5}
)), 'origins': {var_mean_5}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf47', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf44, r2 + 28 * r1 + 784 * i1)
      tmp1 = ops.load(buf46, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.square(tmp2)
      return tmp3
  ,
  ranges=[1, 128, 1, 1],
  reduction_ranges=[1, 28, 28],
  reduction_type=sum,
  origins={var_mean_5}
)), 'origins': {var_mean_5}}
End call_function in graph-----------

Result after run_node: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf47, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_5}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf46', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf45, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_5}
  ))
)))
Except block: var_mean_5
buf46
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_12
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf47, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_5}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf46', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf45, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_5}
  ))
))), 0),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf47, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_5}
  )
))

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf47, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_5}
  )
))
Except block: getitem_12
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_13
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf47, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_5}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf46', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf45, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_5}
  ))
))), 1),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  ComputedBuffer(name='buf46', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf45, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_5}
  ))
))

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf46', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf45, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_5}
  ))
))
buf46
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_28
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf47, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_5}
  )
)), 1e-05),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf47, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_5, add_28}
  )
))
Except block: add_28
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: rsqrt_5
Overloadpacket: aten.rsqrt
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.rsqrt.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf47, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_5, add_28}
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf47, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_5, add_28, rsqrt_5}
  )
))
Except block: rsqrt_5
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: sub_5
Overloadpacket: aten.sub
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.sub.Tensor,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf44,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf43', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf38, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf39, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_14, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_15, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 64, 56, 56],
      origins={relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, ...
    )), InputBuffer(name='primals_16', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_5}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf46', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf45, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_5}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf44, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf46, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 128, 28, 28],
    origins={sub_5}
  )
))
Except block: sub_5
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_35
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf44, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf46, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 128, 28, 28],
    origins={sub_5}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf47, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_5, add_28, rsqrt_5}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf44, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf46, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf47, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 128, 28, 28],
    origins={var_mean_5, sub_5, add_28, rsqrt_5, mul_35}
  )
))
Except block: mul_35
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_15
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf46', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf45, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_5}
  ))
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf46', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf45, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_5}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[128], stride=[1]),
    origins=
  )
)
Except block: squeeze_15
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_16
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf47, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_5, add_28, rsqrt_5}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf48', layout=FlexibleLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf47, i0)
      tmp1 = ops.index_expr(784, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1e-05, torch.float32)
      tmp4 = tmp2 + tmp3
      tmp5 = ops.rsqrt(tmp4)
      return tmp5
  ,
  ranges=(128,),
  origins={squeeze_16, var_mean_5, add_28, rsqrt_5}
)), 'origins': {squeeze_16, var_mean_5, add_28, rsqrt_5}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf48', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf47, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(128,),
    origins={squeeze_16, var_mean_5, add_28, rsqrt_5}
  ))
))
buf48
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_36
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf46', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf45, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_5}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[128], stride=[1]),
    origins=
  )
), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf46, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_36}
  )
))
Except block: mul_36
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_37
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_78', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_78, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_37}
  )
))
Except block: mul_37
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_29
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf46, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_36}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_78, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_37}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf49', layout=FlexibleLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf46, i0)
      tmp1 = ops.constant(0.1, torch.float32)
      tmp2 = tmp0 * tmp1
      tmp3 = ops.load(primals_78, i0)
      tmp4 = ops.constant(0.9, torch.float32)
      tmp5 = tmp3 * tmp4
      tmp6 = tmp2 + tmp5
      return tmp6
  ,
  ranges=[128],
  origins={mul_36, add_29, mul_37}
)), 'origins': {mul_36, add_29, mul_37}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf49', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf46, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_78, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[128],
    origins={mul_36, add_29, mul_37}
  ))
))
buf49
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_17
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf47, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_5}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf47, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_5}
      )
    ),
    size=(128,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={var_mean_5, squeeze_17}
  )
)
Except block: squeeze_17
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_38
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf47, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_5}
      )
    ),
    size=(128,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={var_mean_5, squeeze_17}
  )
), 1.0012771392081736),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf47, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(128,),
    origins={mul_38}
  )
))
Except block: mul_38
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_39
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf47, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(128,),
    origins={mul_38}
  )
)), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf47, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(128,),
    origins={mul_38, mul_39}
  )
))
Except block: mul_39
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_40
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_79', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_79, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_40}
  )
))
Except block: mul_40
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_30
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf47, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(128,),
    origins={mul_38, mul_39}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_79, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_40}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf50', layout=FlexibleLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf47, i0)
      tmp1 = ops.index_expr(784, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1.0012771392081736, torch.float32)
      tmp4 = tmp2 * tmp3
      tmp5 = ops.constant(0.1, torch.float32)
      tmp6 = tmp4 * tmp5
      tmp7 = ops.load(primals_79, i0)
      tmp8 = ops.constant(0.9, torch.float32)
      tmp9 = tmp7 * tmp8
      tmp10 = tmp6 + tmp9
      return tmp10
  ,
  ranges=(128,),
  origins={mul_40, add_30, mul_38, mul_39}
)), 'origins': {mul_40, add_30, mul_38, mul_39}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf50', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf47, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_79, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(128,),
    origins={mul_40, add_30, mul_38, mul_39}
  ))
))
buf50
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_20
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_17', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_17', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_20
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_21
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_17', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_17', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_21
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_22
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_18', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_18', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_22
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_23
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_18', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_18', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_23
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_41
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf44, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf46, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf47, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 128, 28, 28],
    origins={var_mean_5, sub_5, add_28, rsqrt_5, mul_35}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_17', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf44, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf46, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf47, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_17, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 128, 28, 28],
    origins={var_mean_5, sub_5, mul_41, add_28, rsqrt_5, mul_35}
  )
))
Except block: mul_41
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_31
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf44, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf46, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf47, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_17, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 128, 28, 28],
    origins={var_mean_5, sub_5, mul_41, add_28, rsqrt_5, mul_35}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_18', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf44, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf46, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf47, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_17, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_18, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 128, 28, 28],
    origins={var_mean_5, add_31, sub_5, mul_41, add_28, rsqrt_5, ...
  )
))
Except block: add_31
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: relu_5
Overloadpacket: aten.relu
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.relu.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf44, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf46, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf47, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_17, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_18, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 128, 28, 28],
    origins={var_mean_5, add_31, sub_5, mul_41, add_28, rsqrt_5, ...
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf51', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf44, i3 + 28 * i2 + 784 * i1)
      tmp1 = ops.load(buf46, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf47, i1)
      tmp4 = ops.index_expr(784, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_17, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_18, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.relu(tmp13)
      return tmp14
  ,
  ranges=[1, 128, 28, 28],
  origins={add_31, add_28, rsqrt_5, mul_35, sub_5, relu_5, mul_...
)), 'origins': {add_31, add_28, rsqrt_5, mul_35, sub_5, relu_5, mul_41, var_mean_5}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf51', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf44, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf46, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf47, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_17, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_18, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 128, 28, 28],
    origins={add_31, add_28, rsqrt_5, mul_35, sub_5, relu_5, mul_...
  ))
))
buf51
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: convolution_6
Overloadpacket: aten.convolution
Flop count: 231211008
Case 2: call function, n.target in layout_constraints

Call_function in graph------------------
Target: aten.convolution.default,
Args: [TensorBox(StorageBox(
  ComputedBuffer(name='buf51', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf44, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf46, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf47, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_17, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_18, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 128, 28, 28],
    origins={add_31, add_28, rsqrt_5, mul_35, sub_5, relu_5, mul_...
  ))
)), TensorBox(StorageBox(
  InputBuffer(name='primals_19', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))
)), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1],
Kwargs: {}...
Before calling out


Not realizing StorageBox with name: buf51

Not realizing StorageBox with name: primals_19
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf52,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf51', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf44, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf46, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf47, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_17, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_18, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 128, 28, 28],
      origins={add_31, add_28, rsqrt_5, mul_35, sub_5, relu_5, mul_...
    )), InputBuffer(name='primals_19', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_6}
  )
))
buf52
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_32
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_83', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
)), 1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_83, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_32}
  )
))
Except block: add_32
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: var_mean_6
Overloadpacket: aten.var_mean
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.var_mean.correction,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf52,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf51', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf44, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf46, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf47, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_17, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_18, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 128, 28, 28],
      origins={add_31, add_28, rsqrt_5, mul_35, sub_5, relu_5, mul_...
    )), InputBuffer(name='primals_19', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_6}
  )
)), [0, 2, 3]),
Kwargs: {'correction': 0, 'keepdim': True}...
Before calling out


Realized StorageBox:
{'data': ComputedBuffer(name='buf53', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf52, r2 + 28 * r1 + 784 * i1)
      return tmp0
  ,
  ranges=[1, 128, 1, 1],
  reduction_ranges=[1, 28, 28],
  reduction_type=sum,
  origins={var_mean_6}
)), 'origins': {var_mean_6}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf54', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, _, _ = index
      tmp0 = ops.load(buf53, i1)
      tmp1 = ops.index_expr(784, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=[1, 128, 1, 1],
  origins={var_mean_6}
)), 'origins': {var_mean_6}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf55', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf52, r2 + 28 * r1 + 784 * i1)
      tmp1 = ops.load(buf54, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.square(tmp2)
      return tmp3
  ,
  ranges=[1, 128, 1, 1],
  reduction_ranges=[1, 28, 28],
  reduction_type=sum,
  origins={var_mean_6}
)), 'origins': {var_mean_6}}
End call_function in graph-----------

Result after run_node: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf55, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_6}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf54', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf53, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_6}
  ))
)))
Except block: var_mean_6
buf54
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_14
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf55, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_6}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf54', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf53, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_6}
  ))
))), 0),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf55, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_6}
  )
))

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf55, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_6}
  )
))
Except block: getitem_14
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_15
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf55, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_6}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf54', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf53, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_6}
  ))
))), 1),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  ComputedBuffer(name='buf54', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf53, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_6}
  ))
))

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf54', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf53, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_6}
  ))
))
buf54
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_33
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf55, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_6}
  )
)), 1e-05),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf55, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_6, add_33}
  )
))
Except block: add_33
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: rsqrt_6
Overloadpacket: aten.rsqrt
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.rsqrt.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf55, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_6, add_33}
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf55, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 128, 1, 1],
    origins={add_33, var_mean_6, rsqrt_6}
  )
))
Except block: rsqrt_6
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: sub_6
Overloadpacket: aten.sub
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.sub.Tensor,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf52,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf51', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf44, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf46, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf47, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_17, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_18, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 128, 28, 28],
      origins={add_31, add_28, rsqrt_5, mul_35, sub_5, relu_5, mul_...
    )), InputBuffer(name='primals_19', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_6}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf54', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf53, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_6}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf52, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf54, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 128, 28, 28],
    origins={sub_6}
  )
))
Except block: sub_6
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_42
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf52, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf54, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 128, 28, 28],
    origins={sub_6}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf55, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 128, 1, 1],
    origins={add_33, var_mean_6, rsqrt_6}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf52, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf54, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf55, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 128, 28, 28],
    origins={var_mean_6, sub_6, mul_42, add_33, rsqrt_6}
  )
))
Except block: mul_42
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_18
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf54', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf53, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_6}
  ))
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf54', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf53, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_6}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[128], stride=[1]),
    origins=
  )
)
Except block: squeeze_18
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_19
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf55, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 128, 1, 1],
    origins={add_33, var_mean_6, rsqrt_6}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf56', layout=FlexibleLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf55, i0)
      tmp1 = ops.index_expr(784, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1e-05, torch.float32)
      tmp4 = tmp2 + tmp3
      tmp5 = ops.rsqrt(tmp4)
      return tmp5
  ,
  ranges=(128,),
  origins={add_33, squeeze_19, rsqrt_6, var_mean_6}
)), 'origins': {add_33, squeeze_19, rsqrt_6, var_mean_6}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf56', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf55, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(128,),
    origins={add_33, squeeze_19, rsqrt_6, var_mean_6}
  ))
))
buf56
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_43
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf54', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf53, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_6}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[128], stride=[1]),
    origins=
  )
), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf54, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_43}
  )
))
Except block: mul_43
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_44
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_81', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_81, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_44}
  )
))
Except block: mul_44
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_34
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf54, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_43}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_81, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_44}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf57', layout=FlexibleLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf54, i0)
      tmp1 = ops.constant(0.1, torch.float32)
      tmp2 = tmp0 * tmp1
      tmp3 = ops.load(primals_81, i0)
      tmp4 = ops.constant(0.9, torch.float32)
      tmp5 = tmp3 * tmp4
      tmp6 = tmp2 + tmp5
      return tmp6
  ,
  ranges=[128],
  origins={add_34, mul_43, mul_44}
)), 'origins': {add_34, mul_43, mul_44}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf57', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf54, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_81, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[128],
    origins={add_34, mul_43, mul_44}
  ))
))
buf57
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_20
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf55, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_6}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf55, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_6}
      )
    ),
    size=(128,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={var_mean_6, squeeze_20}
  )
)
Except block: squeeze_20
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_45
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf55, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_6}
      )
    ),
    size=(128,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={var_mean_6, squeeze_20}
  )
), 1.0012771392081736),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf55, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(128,),
    origins={mul_45}
  )
))
Except block: mul_45
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_46
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf55, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(128,),
    origins={mul_45}
  )
)), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf55, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(128,),
    origins={mul_45, mul_46}
  )
))
Except block: mul_46
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_47
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_82', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_82, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_47}
  )
))
Except block: mul_47
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_35
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf55, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(128,),
    origins={mul_45, mul_46}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_82, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_47}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf58', layout=FlexibleLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf55, i0)
      tmp1 = ops.index_expr(784, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1.0012771392081736, torch.float32)
      tmp4 = tmp2 * tmp3
      tmp5 = ops.constant(0.1, torch.float32)
      tmp6 = tmp4 * tmp5
      tmp7 = ops.load(primals_82, i0)
      tmp8 = ops.constant(0.9, torch.float32)
      tmp9 = tmp7 * tmp8
      tmp10 = tmp6 + tmp9
      return tmp10
  ,
  ranges=(128,),
  origins={mul_45, add_35, mul_47, mul_46}
)), 'origins': {mul_45, add_35, mul_47, mul_46}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf58', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf55, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_82, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(128,),
    origins={mul_45, add_35, mul_47, mul_46}
  ))
))
buf58
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_24
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_20', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_20', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_24
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_25
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_20', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_20', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_25
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_26
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_21', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_21', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_26
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_27
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_21', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_21', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_27
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_48
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf52, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf54, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf55, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 128, 28, 28],
    origins={var_mean_6, sub_6, mul_42, add_33, rsqrt_6}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_20', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf52, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf54, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf55, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_20, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 128, 28, 28],
    origins={var_mean_6, sub_6, rsqrt_6, mul_42, add_33, mul_48}
  )
))
Except block: mul_48
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_36
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf52, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf54, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf55, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_20, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 128, 28, 28],
    origins={var_mean_6, sub_6, rsqrt_6, mul_42, add_33, mul_48}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_21', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf52, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf54, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf55, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_20, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_21, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 128, 28, 28],
    origins={add_36, sub_6, var_mean_6, mul_42, mul_48, add_33, r...
  )
))
Except block: add_36
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: convolution_7
Overloadpacket: aten.convolution
Flop count: 231211008
Case 2: call function, n.target in layout_constraints

Call_function in graph------------------
Target: aten.convolution.default,
Args: [TensorBox(StorageBox(
  ComputedBuffer(name='buf43', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf38, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf39, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_14, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_15, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 64, 56, 56],
    origins={relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, ...
  ))
)), TensorBox(StorageBox(
  InputBuffer(name='primals_22', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 1, 1], stride=[64, 1, 1, 1]))
)), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1],
Kwargs: {}...
Before calling out


Not realizing StorageBox with name: buf43

Not realizing StorageBox with name: primals_22
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf59,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf43', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf38, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf39, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_14, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_15, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 64, 56, 56],
      origins={relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, ...
    )), InputBuffer(name='primals_22', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 1, 1], stride=[64, 1, 1, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (0, 0), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_7}
  )
))
buf59
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_37
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_86', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
)), 1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_86, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_37}
  )
))
Except block: add_37
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: var_mean_7
Overloadpacket: aten.var_mean
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.var_mean.correction,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf59,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf43', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf38, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf39, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_14, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_15, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 64, 56, 56],
      origins={relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, ...
    )), InputBuffer(name='primals_22', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 1, 1], stride=[64, 1, 1, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (0, 0), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_7}
  )
)), [0, 2, 3]),
Kwargs: {'correction': 0, 'keepdim': True}...
Before calling out


Realized StorageBox:
{'data': ComputedBuffer(name='buf60', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf59, r2 + 28 * r1 + 784 * i1)
      return tmp0
  ,
  ranges=[1, 128, 1, 1],
  reduction_ranges=[1, 28, 28],
  reduction_type=sum,
  origins={var_mean_7}
)), 'origins': {var_mean_7}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf61', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, _, _ = index
      tmp0 = ops.load(buf60, i1)
      tmp1 = ops.index_expr(784, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=[1, 128, 1, 1],
  origins={var_mean_7}
)), 'origins': {var_mean_7}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf62', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf59, r2 + 28 * r1 + 784 * i1)
      tmp1 = ops.load(buf61, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.square(tmp2)
      return tmp3
  ,
  ranges=[1, 128, 1, 1],
  reduction_ranges=[1, 28, 28],
  reduction_type=sum,
  origins={var_mean_7}
)), 'origins': {var_mean_7}}
End call_function in graph-----------

Result after run_node: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf62, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_7}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf61', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf60, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_7}
  ))
)))
Except block: var_mean_7
buf61
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_16
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf62, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_7}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf61', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf60, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_7}
  ))
))), 0),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf62, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_7}
  )
))

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf62, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_7}
  )
))
Except block: getitem_16
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_17
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf62, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_7}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf61', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf60, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_7}
  ))
))), 1),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  ComputedBuffer(name='buf61', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf60, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_7}
  ))
))

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf61', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf60, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_7}
  ))
))
buf61
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_38
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf62, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_7}
  )
)), 1e-05),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf62, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_7, add_38}
  )
))
Except block: add_38
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: rsqrt_7
Overloadpacket: aten.rsqrt
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.rsqrt.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf62, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_7, add_38}
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf62, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_7, rsqrt_7, add_38}
  )
))
Except block: rsqrt_7
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: sub_7
Overloadpacket: aten.sub
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.sub.Tensor,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf59,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf43', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf38, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf39, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_14, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_15, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 64, 56, 56],
      origins={relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, ...
    )), InputBuffer(name='primals_22', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 1, 1], stride=[64, 1, 1, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (0, 0), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_7}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf61', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf60, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_7}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf59, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf61, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 128, 28, 28],
    origins={sub_7}
  )
))
Except block: sub_7
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_49
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf59, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf61, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 128, 28, 28],
    origins={sub_7}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf62, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_7, rsqrt_7, add_38}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf59, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf61, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf62, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 128, 28, 28],
    origins={sub_7, add_38, var_mean_7, rsqrt_7, mul_49}
  )
))
Except block: mul_49
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_21
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf61', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf60, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_7}
  ))
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf61', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf60, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_7}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[128], stride=[1]),
    origins=
  )
)
Except block: squeeze_21
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_22
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf62, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_7, rsqrt_7, add_38}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf63', layout=FlexibleLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf62, i0)
      tmp1 = ops.index_expr(784, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1e-05, torch.float32)
      tmp4 = tmp2 + tmp3
      tmp5 = ops.rsqrt(tmp4)
      return tmp5
  ,
  ranges=(128,),
  origins={var_mean_7, rsqrt_7, add_38, squeeze_22}
)), 'origins': {var_mean_7, rsqrt_7, add_38, squeeze_22}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf63', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf62, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(128,),
    origins={var_mean_7, rsqrt_7, add_38, squeeze_22}
  ))
))
buf63
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_50
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf61', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf60, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_7}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[128], stride=[1]),
    origins=
  )
), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf61, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_50}
  )
))
Except block: mul_50
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_51
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_84', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_84, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_51}
  )
))
Except block: mul_51
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_39
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf61, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_50}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_84, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_51}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf64', layout=FlexibleLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf61, i0)
      tmp1 = ops.constant(0.1, torch.float32)
      tmp2 = tmp0 * tmp1
      tmp3 = ops.load(primals_84, i0)
      tmp4 = ops.constant(0.9, torch.float32)
      tmp5 = tmp3 * tmp4
      tmp6 = tmp2 + tmp5
      return tmp6
  ,
  ranges=[128],
  origins={mul_50, add_39, mul_51}
)), 'origins': {mul_50, add_39, mul_51}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf64', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf61, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_84, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[128],
    origins={mul_50, add_39, mul_51}
  ))
))
buf64
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_23
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf62, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_7}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf62, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_7}
      )
    ),
    size=(128,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={var_mean_7, squeeze_23}
  )
)
Except block: squeeze_23
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_52
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf62, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_7}
      )
    ),
    size=(128,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={var_mean_7, squeeze_23}
  )
), 1.0012771392081736),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf62, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(128,),
    origins={mul_52}
  )
))
Except block: mul_52
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_53
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf62, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(128,),
    origins={mul_52}
  )
)), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf62, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(128,),
    origins={mul_53, mul_52}
  )
))
Except block: mul_53
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_54
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_85', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_85, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_54}
  )
))
Except block: mul_54
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_40
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf62, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(128,),
    origins={mul_53, mul_52}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_85, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_54}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf65', layout=FlexibleLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf62, i0)
      tmp1 = ops.index_expr(784, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1.0012771392081736, torch.float32)
      tmp4 = tmp2 * tmp3
      tmp5 = ops.constant(0.1, torch.float32)
      tmp6 = tmp4 * tmp5
      tmp7 = ops.load(primals_85, i0)
      tmp8 = ops.constant(0.9, torch.float32)
      tmp9 = tmp7 * tmp8
      tmp10 = tmp6 + tmp9
      return tmp10
  ,
  ranges=(128,),
  origins={mul_52, mul_53, mul_54, add_40}
)), 'origins': {mul_52, mul_53, mul_54, add_40}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf65', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf62, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_85, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(128,),
    origins={mul_52, mul_53, mul_54, add_40}
  ))
))
buf65
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_28
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_23', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_23', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_28
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_29
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_23', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_23', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_29
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_30
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_24', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_24', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_30
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_31
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_24', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_24', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_31
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_55
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf59, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf61, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf62, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 128, 28, 28],
    origins={sub_7, add_38, var_mean_7, rsqrt_7, mul_49}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_23', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf59, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf61, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf62, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_23, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 128, 28, 28],
    origins={sub_7, add_38, var_mean_7, rsqrt_7, mul_49, mul_55}
  )
))
Except block: mul_55
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_41
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf59, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf61, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf62, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_23, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 128, 28, 28],
    origins={sub_7, add_38, var_mean_7, rsqrt_7, mul_49, mul_55}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_24', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf59, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf61, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf62, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_23, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_24, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 128, 28, 28],
    origins={sub_7, var_mean_7, add_38, add_41, rsqrt_7, mul_49, ...
  )
))
Except block: add_41
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_42
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf52, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf54, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf55, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_20, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_21, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 128, 28, 28],
    origins={add_36, sub_6, var_mean_6, mul_42, mul_48, add_33, r...
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf59, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf61, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf62, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_23, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_24, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 128, 28, 28],
    origins={sub_7, var_mean_7, add_38, add_41, rsqrt_7, mul_49, ...
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Realized StorageBox:
{'data': ComputedBuffer(name='buf66', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf52, i3 + 28 * i2 + 784 * i1)
      tmp1 = ops.load(buf54, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf55, i1)
      tmp4 = ops.index_expr(784, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_20, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_21, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.load(buf59, i3 + 28 * i2 + 784 * i1)
      tmp15 = ops.load(buf61, i1)
      tmp16 = tmp14 - tmp15
      tmp17 = ops.load(buf62, i1)
      tmp18 = ops.index_expr(784, torch.float32)
      tmp19 = tmp17 / tmp18
      tmp20 = ops.constant(1e-05, torch.float32)
      tmp21 = tmp19 + tmp20
      tmp22 = ops.rsqrt(tmp21)
      tmp23 = tmp16 * tmp22
      tmp24 = ops.load(primals_23, i1)
      tmp25 = tmp23 * tmp24
      tmp26 = ops.load(primals_24, i1)
      tmp27 = tmp25 + tmp26
      tmp28 = tmp13 + tmp27
      return tmp28
  ,
  ranges=[1, 128, 28, 28],
  origins={add_42, sub_7, sub_6, rsqrt_7, mul_49, mul_48, rsqrt...
)), 'origins': {add_42, sub_7, sub_6, rsqrt_7, mul_49, mul_48, rsqrt_6, add_36, var_mean_6, var_mean_7, add_38, mul_42, add_41, add_33, mul_55}, '__num_reads_cache': 10}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf66', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf52, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf54, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf55, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_20, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_21, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf59, i3 + 28 * i2 + 784 * i1)
        tmp15 = ops.load(buf61, i1)
        tmp16 = tmp14 - tmp15
        tmp17 = ops.load(buf62, i1)
        tmp18 = ops.index_expr(784, torch.float32)
        tmp19 = tmp17 / tmp18
        tmp20 = ops.constant(1e-05, torch.float32)
        tmp21 = tmp19 + tmp20
        tmp22 = ops.rsqrt(tmp21)
        tmp23 = tmp16 * tmp22
        tmp24 = ops.load(primals_23, i1)
        tmp25 = tmp23 * tmp24
        tmp26 = ops.load(primals_24, i1)
        tmp27 = tmp25 + tmp26
        tmp28 = tmp13 + tmp27
        return tmp28
    ,
    ranges=[1, 128, 28, 28],
    origins={add_42, sub_7, sub_6, rsqrt_7, mul_49, mul_48, rsqrt...
  ))
))
buf66
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: relu_6
Overloadpacket: aten.relu
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.relu.default,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf66', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf52, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf54, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf55, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_20, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_21, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf59, i3 + 28 * i2 + 784 * i1)
        tmp15 = ops.load(buf61, i1)
        tmp16 = tmp14 - tmp15
        tmp17 = ops.load(buf62, i1)
        tmp18 = ops.index_expr(784, torch.float32)
        tmp19 = tmp17 / tmp18
        tmp20 = ops.constant(1e-05, torch.float32)
        tmp21 = tmp19 + tmp20
        tmp22 = ops.rsqrt(tmp21)
        tmp23 = tmp16 * tmp22
        tmp24 = ops.load(primals_23, i1)
        tmp25 = tmp23 * tmp24
        tmp26 = ops.load(primals_24, i1)
        tmp27 = tmp25 + tmp26
        tmp28 = tmp13 + tmp27
        return tmp28
    ,
    ranges=[1, 128, 28, 28],
    origins={add_42, sub_7, sub_6, rsqrt_7, mul_49, mul_48, rsqrt...
  ))
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf67', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf66, i3 + 28 * i2 + 784 * i1)
      tmp1 = ops.relu(tmp0)
      return tmp1
  ,
  ranges=[1, 128, 28, 28],
  origins={relu_6}
)), 'origins': {relu_6}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf67', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf66, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.relu(tmp0)
        return tmp1
    ,
    ranges=[1, 128, 28, 28],
    origins={relu_6}
  ))
))
buf67
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: convolution_8
Overloadpacket: aten.convolution
Flop count: 231211008
Case 2: call function, n.target in layout_constraints

Call_function in graph------------------
Target: aten.convolution.default,
Args: [TensorBox(StorageBox(
  ComputedBuffer(name='buf67', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf66, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.relu(tmp0)
        return tmp1
    ,
    ranges=[1, 128, 28, 28],
    origins={relu_6}
  ))
)), TensorBox(StorageBox(
  InputBuffer(name='primals_25', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))
)), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1],
Kwargs: {}...
Before calling out


Not realizing StorageBox with name: buf67

Not realizing StorageBox with name: primals_25
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf68,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf67', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf66, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.relu(tmp0)
          return tmp1
      ,
      ranges=[1, 128, 28, 28],
      origins={relu_6}
    )), InputBuffer(name='primals_25', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_8}
  )
))
buf68
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_43
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_89', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
)), 1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_89, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_43}
  )
))
Except block: add_43
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: var_mean_8
Overloadpacket: aten.var_mean
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.var_mean.correction,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf68,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf67', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf66, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.relu(tmp0)
          return tmp1
      ,
      ranges=[1, 128, 28, 28],
      origins={relu_6}
    )), InputBuffer(name='primals_25', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_8}
  )
)), [0, 2, 3]),
Kwargs: {'correction': 0, 'keepdim': True}...
Before calling out


Realized StorageBox:
{'data': ComputedBuffer(name='buf69', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf68, r2 + 28 * r1 + 784 * i1)
      return tmp0
  ,
  ranges=[1, 128, 1, 1],
  reduction_ranges=[1, 28, 28],
  reduction_type=sum,
  origins={var_mean_8}
)), 'origins': {var_mean_8}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf70', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, _, _ = index
      tmp0 = ops.load(buf69, i1)
      tmp1 = ops.index_expr(784, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=[1, 128, 1, 1],
  origins={var_mean_8}
)), 'origins': {var_mean_8}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf71', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf68, r2 + 28 * r1 + 784 * i1)
      tmp1 = ops.load(buf70, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.square(tmp2)
      return tmp3
  ,
  ranges=[1, 128, 1, 1],
  reduction_ranges=[1, 28, 28],
  reduction_type=sum,
  origins={var_mean_8}
)), 'origins': {var_mean_8}}
End call_function in graph-----------

Result after run_node: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf71, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_8}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf70', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf69, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_8}
  ))
)))
Except block: var_mean_8
buf70
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_18
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf71, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_8}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf70', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf69, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_8}
  ))
))), 0),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf71, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_8}
  )
))

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf71, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_8}
  )
))
Except block: getitem_18
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_19
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf71, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_8}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf70', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf69, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_8}
  ))
))), 1),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  ComputedBuffer(name='buf70', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf69, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_8}
  ))
))

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf70', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf69, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_8}
  ))
))
buf70
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_44
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf71, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_8}
  )
)), 1e-05),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf71, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 128, 1, 1],
    origins={add_44, var_mean_8}
  )
))
Except block: add_44
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: rsqrt_8
Overloadpacket: aten.rsqrt
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.rsqrt.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf71, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 128, 1, 1],
    origins={add_44, var_mean_8}
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf71, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 128, 1, 1],
    origins={add_44, rsqrt_8, var_mean_8}
  )
))
Except block: rsqrt_8
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: sub_8
Overloadpacket: aten.sub
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.sub.Tensor,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf68,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf67', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf66, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.relu(tmp0)
          return tmp1
      ,
      ranges=[1, 128, 28, 28],
      origins={relu_6}
    )), InputBuffer(name='primals_25', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_8}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf70', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf69, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_8}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf68, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf70, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 128, 28, 28],
    origins={sub_8}
  )
))
Except block: sub_8
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_56
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf68, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf70, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 128, 28, 28],
    origins={sub_8}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf71, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 128, 1, 1],
    origins={add_44, rsqrt_8, var_mean_8}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf68, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf70, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf71, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 128, 28, 28],
    origins={add_44, sub_8, var_mean_8, rsqrt_8, mul_56}
  )
))
Except block: mul_56
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_24
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf70', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf69, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_8}
  ))
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf70', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf69, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_8}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[128], stride=[1]),
    origins=
  )
)
Except block: squeeze_24
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_25
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf71, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 128, 1, 1],
    origins={add_44, rsqrt_8, var_mean_8}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf72', layout=FlexibleLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf71, i0)
      tmp1 = ops.index_expr(784, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1e-05, torch.float32)
      tmp4 = tmp2 + tmp3
      tmp5 = ops.rsqrt(tmp4)
      return tmp5
  ,
  ranges=(128,),
  origins={add_44, squeeze_25, rsqrt_8, var_mean_8}
)), 'origins': {add_44, squeeze_25, rsqrt_8, var_mean_8}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf72', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf71, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(128,),
    origins={add_44, squeeze_25, rsqrt_8, var_mean_8}
  ))
))
buf72
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_57
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf70', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf69, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_8}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[128], stride=[1]),
    origins=
  )
), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf70, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_57}
  )
))
Except block: mul_57
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_58
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_87', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_87, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_58}
  )
))
Except block: mul_58
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_45
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf70, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_57}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_87, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_58}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf73', layout=FlexibleLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf70, i0)
      tmp1 = ops.constant(0.1, torch.float32)
      tmp2 = tmp0 * tmp1
      tmp3 = ops.load(primals_87, i0)
      tmp4 = ops.constant(0.9, torch.float32)
      tmp5 = tmp3 * tmp4
      tmp6 = tmp2 + tmp5
      return tmp6
  ,
  ranges=[128],
  origins={add_45, mul_57, mul_58}
)), 'origins': {add_45, mul_57, mul_58}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf73', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf70, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_87, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[128],
    origins={add_45, mul_57, mul_58}
  ))
))
buf73
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_26
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf71, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_8}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf71, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_8}
      )
    ),
    size=(128,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={var_mean_8, squeeze_26}
  )
)
Except block: squeeze_26
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_59
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf71, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_8}
      )
    ),
    size=(128,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={var_mean_8, squeeze_26}
  )
), 1.0012771392081736),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf71, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(128,),
    origins={mul_59}
  )
))
Except block: mul_59
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_60
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf71, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(128,),
    origins={mul_59}
  )
)), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf71, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(128,),
    origins={mul_60, mul_59}
  )
))
Except block: mul_60
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_61
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_88', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_88, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_61}
  )
))
Except block: mul_61
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_46
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf71, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(128,),
    origins={mul_60, mul_59}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_88, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_61}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf74', layout=FlexibleLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf71, i0)
      tmp1 = ops.index_expr(784, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1.0012771392081736, torch.float32)
      tmp4 = tmp2 * tmp3
      tmp5 = ops.constant(0.1, torch.float32)
      tmp6 = tmp4 * tmp5
      tmp7 = ops.load(primals_88, i0)
      tmp8 = ops.constant(0.9, torch.float32)
      tmp9 = tmp7 * tmp8
      tmp10 = tmp6 + tmp9
      return tmp10
  ,
  ranges=(128,),
  origins={mul_60, mul_59, mul_61, add_46}
)), 'origins': {mul_60, mul_59, mul_61, add_46}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf74', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf71, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_88, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(128,),
    origins={mul_60, mul_59, mul_61, add_46}
  ))
))
buf74
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_32
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_26', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_26', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_32
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_33
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_26', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_26', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_33
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_34
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_27', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_27', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_34
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_35
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_27', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_27', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_35
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_62
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf68, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf70, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf71, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 128, 28, 28],
    origins={add_44, sub_8, var_mean_8, rsqrt_8, mul_56}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_26', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf68, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf70, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf71, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_26, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 128, 28, 28],
    origins={add_44, mul_62, sub_8, var_mean_8, rsqrt_8, mul_56}
  )
))
Except block: mul_62
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_47
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf68, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf70, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf71, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_26, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 128, 28, 28],
    origins={add_44, mul_62, sub_8, var_mean_8, rsqrt_8, mul_56}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_27', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf68, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf70, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf71, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_26, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_27, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 128, 28, 28],
    origins={add_44, mul_62, sub_8, var_mean_8, rsqrt_8, mul_56, ...
  )
))
Except block: add_47
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: relu_7
Overloadpacket: aten.relu
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.relu.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf68, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf70, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf71, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_26, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_27, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 128, 28, 28],
    origins={add_44, mul_62, sub_8, var_mean_8, rsqrt_8, mul_56, ...
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf75', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf68, i3 + 28 * i2 + 784 * i1)
      tmp1 = ops.load(buf70, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf71, i1)
      tmp4 = ops.index_expr(784, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_26, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_27, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.relu(tmp13)
      return tmp14
  ,
  ranges=[1, 128, 28, 28],
  origins={add_44, sub_8, relu_7, rsqrt_8, add_47, mul_62, var_...
)), 'origins': {add_44, sub_8, relu_7, rsqrt_8, add_47, mul_62, var_mean_8, mul_56}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf75', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf68, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf70, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf71, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_26, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_27, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 128, 28, 28],
    origins={add_44, sub_8, relu_7, rsqrt_8, add_47, mul_62, var_...
  ))
))
buf75
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: convolution_9
Overloadpacket: aten.convolution
Flop count: 231211008
Case 2: call function, n.target in layout_constraints

Call_function in graph------------------
Target: aten.convolution.default,
Args: [TensorBox(StorageBox(
  ComputedBuffer(name='buf75', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf68, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf70, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf71, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_26, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_27, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 128, 28, 28],
    origins={add_44, sub_8, relu_7, rsqrt_8, add_47, mul_62, var_...
  ))
)), TensorBox(StorageBox(
  InputBuffer(name='primals_28', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))
)), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1],
Kwargs: {}...
Before calling out


Not realizing StorageBox with name: buf75

Not realizing StorageBox with name: primals_28
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf76,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf75', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf68, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf70, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf71, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_26, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_27, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 128, 28, 28],
      origins={add_44, sub_8, relu_7, rsqrt_8, add_47, mul_62, var_...
    )), InputBuffer(name='primals_28', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_9}
  )
))
buf76
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_48
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_92', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
)), 1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_92, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_48}
  )
))
Except block: add_48
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: var_mean_9
Overloadpacket: aten.var_mean
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.var_mean.correction,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf76,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf75', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf68, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf70, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf71, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_26, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_27, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 128, 28, 28],
      origins={add_44, sub_8, relu_7, rsqrt_8, add_47, mul_62, var_...
    )), InputBuffer(name='primals_28', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_9}
  )
)), [0, 2, 3]),
Kwargs: {'correction': 0, 'keepdim': True}...
Before calling out


Realized StorageBox:
{'data': ComputedBuffer(name='buf77', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf76, r2 + 28 * r1 + 784 * i1)
      return tmp0
  ,
  ranges=[1, 128, 1, 1],
  reduction_ranges=[1, 28, 28],
  reduction_type=sum,
  origins={var_mean_9}
)), 'origins': {var_mean_9}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf78', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, _, _ = index
      tmp0 = ops.load(buf77, i1)
      tmp1 = ops.index_expr(784, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=[1, 128, 1, 1],
  origins={var_mean_9}
)), 'origins': {var_mean_9}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf79', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf76, r2 + 28 * r1 + 784 * i1)
      tmp1 = ops.load(buf78, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.square(tmp2)
      return tmp3
  ,
  ranges=[1, 128, 1, 1],
  reduction_ranges=[1, 28, 28],
  reduction_type=sum,
  origins={var_mean_9}
)), 'origins': {var_mean_9}}
End call_function in graph-----------

Result after run_node: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf79, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_9}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf78', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf77, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_9}
  ))
)))
Except block: var_mean_9
buf78
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_20
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf79, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_9}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf78', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf77, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_9}
  ))
))), 0),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf79, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_9}
  )
))

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf79, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_9}
  )
))
Except block: getitem_20
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_21
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf79, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_9}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf78', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf77, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_9}
  ))
))), 1),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  ComputedBuffer(name='buf78', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf77, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_9}
  ))
))

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf78', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf77, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_9}
  ))
))
buf78
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_49
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf79, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_9}
  )
)), 1e-05),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf79, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_9, add_49}
  )
))
Except block: add_49
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: rsqrt_9
Overloadpacket: aten.rsqrt
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.rsqrt.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf79, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_9, add_49}
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf79, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_9, rsqrt_9, add_49}
  )
))
Except block: rsqrt_9
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: sub_9
Overloadpacket: aten.sub
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.sub.Tensor,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf76,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf75', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf68, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf70, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf71, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_26, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_27, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 128, 28, 28],
      origins={add_44, sub_8, relu_7, rsqrt_8, add_47, mul_62, var_...
    )), InputBuffer(name='primals_28', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_9}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf78', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf77, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_9}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf78, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 128, 28, 28],
    origins={sub_9}
  )
))
Except block: sub_9
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_63
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf78, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 128, 28, 28],
    origins={sub_9}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf79, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_9, rsqrt_9, add_49}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf78, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf79, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 128, 28, 28],
    origins={mul_63, var_mean_9, rsqrt_9, sub_9, add_49}
  )
))
Except block: mul_63
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_27
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf78', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf77, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_9}
  ))
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf78', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf77, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_9}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[128], stride=[1]),
    origins=
  )
)
Except block: squeeze_27
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_28
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf79, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_9, rsqrt_9, add_49}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf80', layout=FlexibleLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf79, i0)
      tmp1 = ops.index_expr(784, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1e-05, torch.float32)
      tmp4 = tmp2 + tmp3
      tmp5 = ops.rsqrt(tmp4)
      return tmp5
  ,
  ranges=(128,),
  origins={squeeze_28, var_mean_9, rsqrt_9, add_49}
)), 'origins': {squeeze_28, var_mean_9, rsqrt_9, add_49}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf80', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf79, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(128,),
    origins={squeeze_28, var_mean_9, rsqrt_9, add_49}
  ))
))
buf80
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_64
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf78', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf77, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_9}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[128], stride=[1]),
    origins=
  )
), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf78, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_64}
  )
))
Except block: mul_64
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_65
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_90', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_90, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_65}
  )
))
Except block: mul_65
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_50
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf78, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_64}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_90, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_65}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf81', layout=FlexibleLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf78, i0)
      tmp1 = ops.constant(0.1, torch.float32)
      tmp2 = tmp0 * tmp1
      tmp3 = ops.load(primals_90, i0)
      tmp4 = ops.constant(0.9, torch.float32)
      tmp5 = tmp3 * tmp4
      tmp6 = tmp2 + tmp5
      return tmp6
  ,
  ranges=[128],
  origins={mul_64, add_50, mul_65}
)), 'origins': {mul_64, add_50, mul_65}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf81', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf78, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_90, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[128],
    origins={mul_64, add_50, mul_65}
  ))
))
buf81
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_29
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf79, i1)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 128, 1, 1],
    origins={var_mean_9}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf79, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_9}
      )
    ),
    size=(128,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_29, var_mean_9}
  )
)
Except block: squeeze_29
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_66
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf79, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_9}
      )
    ),
    size=(128,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_29, var_mean_9}
  )
), 1.0012771392081736),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf79, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(128,),
    origins={mul_66}
  )
))
Except block: mul_66
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_67
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf79, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(128,),
    origins={mul_66}
  )
)), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf79, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(128,),
    origins={mul_66, mul_67}
  )
))
Except block: mul_67
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_68
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_91', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_91, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_68}
  )
))
Except block: mul_68
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_51
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf79, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(128,),
    origins={mul_66, mul_67}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_91, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[128],
    origins={mul_68}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf82', layout=FlexibleLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf79, i0)
      tmp1 = ops.index_expr(784, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1.0012771392081736, torch.float32)
      tmp4 = tmp2 * tmp3
      tmp5 = ops.constant(0.1, torch.float32)
      tmp6 = tmp4 * tmp5
      tmp7 = ops.load(primals_91, i0)
      tmp8 = ops.constant(0.9, torch.float32)
      tmp9 = tmp7 * tmp8
      tmp10 = tmp6 + tmp9
      return tmp10
  ,
  ranges=(128,),
  origins={mul_66, mul_67, add_51, mul_68}
)), 'origins': {mul_66, mul_67, add_51, mul_68}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf82', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf79, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_91, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(128,),
    origins={mul_66, mul_67, add_51, mul_68}
  ))
))
buf82
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_36
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_29', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_29', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_36
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_37
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_29', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_29', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_37
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_38
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_30', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_30', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_38
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_39
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_30', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_30', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_39
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_69
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf78, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf79, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 128, 28, 28],
    origins={mul_63, var_mean_9, rsqrt_9, sub_9, add_49}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_29', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf78, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf79, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_29, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 128, 28, 28],
    origins={mul_63, var_mean_9, rsqrt_9, sub_9, add_49, mul_69}
  )
))
Except block: mul_69
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_52
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf78, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf79, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_29, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 128, 28, 28],
    origins={mul_63, var_mean_9, rsqrt_9, sub_9, add_49, mul_69}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_30', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[128, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf78, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf79, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_29, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_30, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 128, 28, 28],
    origins={mul_63, var_mean_9, rsqrt_9, sub_9, add_49, mul_69, ...
  )
))
Except block: add_52
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_53
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf78, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf79, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_29, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_30, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 128, 28, 28],
    origins={mul_63, var_mean_9, rsqrt_9, sub_9, add_49, mul_69, ...
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf67', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf66, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.relu(tmp0)
        return tmp1
    ,
    ranges=[1, 128, 28, 28],
    origins={relu_6}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf78, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf79, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_29, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_30, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
        tmp15 = tmp13 + tmp14
        return tmp15
    ,
    ranges=[1, 128, 28, 28],
    origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
  )
))
Except block: add_53
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: relu_8
Overloadpacket: aten.relu
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.relu.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf78, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf79, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_29, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_30, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
        tmp15 = tmp13 + tmp14
        return tmp15
    ,
    ranges=[1, 128, 28, 28],
    origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf83', layout=FlexibleLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
      tmp1 = ops.load(buf78, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf79, i1)
      tmp4 = ops.index_expr(784, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_29, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_30, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
      tmp15 = tmp13 + tmp14
      tmp16 = ops.relu(tmp15)
      return tmp16
  ,
  ranges=[1, 128, 28, 28],
  origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
)), 'origins': {mul_63, var_mean_9, add_49, mul_69, add_52, add_53, rsqrt_9, sub_9, relu_8}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf83', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf78, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf79, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_29, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_30, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 128, 28, 28],
    origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
  ))
))
buf83
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: convolution_10
Overloadpacket: aten.convolution
Flop count: 115605504
Case 2: call function, n.target in layout_constraints

Call_function in graph------------------
Target: aten.convolution.default,
Args: [TensorBox(StorageBox(
  ComputedBuffer(name='buf83', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf78, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf79, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_29, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_30, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 128, 28, 28],
    origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
  ))
)), TensorBox(StorageBox(
  InputBuffer(name='primals_31', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1]))
)), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1],
Kwargs: {}...
Before calling out


Not realizing StorageBox with name: buf83

Not realizing StorageBox with name: primals_31
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf84,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf83', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf78, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf79, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_29, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_30, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 128, 28, 28],
      origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
    )), InputBuffer(name='primals_31', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_10}
  )
))
buf84
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_54
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_95', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
)), 1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_95, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_54}
  )
))
Except block: add_54
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: var_mean_10
Overloadpacket: aten.var_mean
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.var_mean.correction,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf84,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf83', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf78, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf79, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_29, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_30, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 128, 28, 28],
      origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
    )), InputBuffer(name='primals_31', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_10}
  )
)), [0, 2, 3]),
Kwargs: {'correction': 0, 'keepdim': True}...
Before calling out


Realized StorageBox:
{'data': ComputedBuffer(name='buf85', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf84, r2 + 14 * r1 + 196 * i1)
      return tmp0
  ,
  ranges=[1, 256, 1, 1],
  reduction_ranges=[1, 14, 14],
  reduction_type=sum,
  origins={var_mean_10}
)), 'origins': {var_mean_10}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf86', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, _, _ = index
      tmp0 = ops.load(buf85, i1)
      tmp1 = ops.index_expr(196, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=[1, 256, 1, 1],
  origins={var_mean_10}
)), 'origins': {var_mean_10}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf87', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf84, r2 + 14 * r1 + 196 * i1)
      tmp1 = ops.load(buf86, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.square(tmp2)
      return tmp3
  ,
  ranges=[1, 256, 1, 1],
  reduction_ranges=[1, 14, 14],
  reduction_type=sum,
  origins={var_mean_10}
)), 'origins': {var_mean_10}}
End call_function in graph-----------

Result after run_node: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf87, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_10}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf86', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf85, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_10}
  ))
)))
Except block: var_mean_10
buf86
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_22
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf87, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_10}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf86', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf85, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_10}
  ))
))), 0),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf87, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_10}
  )
))

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf87, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_10}
  )
))
Except block: getitem_22
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_23
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf87, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_10}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf86', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf85, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_10}
  ))
))), 1),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  ComputedBuffer(name='buf86', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf85, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_10}
  ))
))

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf86', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf85, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_10}
  ))
))
buf86
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_55
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf87, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_10}
  )
)), 1e-05),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf87, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_10, add_55}
  )
))
Except block: add_55
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: rsqrt_10
Overloadpacket: aten.rsqrt
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.rsqrt.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf87, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_10, add_55}
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf87, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 256, 1, 1],
    origins={rsqrt_10, var_mean_10, add_55}
  )
))
Except block: rsqrt_10
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: sub_10
Overloadpacket: aten.sub
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.sub.Tensor,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf84,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf83', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf78, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf79, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_29, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_30, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 128, 28, 28],
      origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
    )), InputBuffer(name='primals_31', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_10}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf86', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf85, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_10}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf84, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf86, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 256, 14, 14],
    origins={sub_10}
  )
))
Except block: sub_10
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_70
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf84, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf86, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 256, 14, 14],
    origins={sub_10}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf87, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 256, 1, 1],
    origins={rsqrt_10, var_mean_10, add_55}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf84, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf86, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf87, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 256, 14, 14],
    origins={var_mean_10, add_55, rsqrt_10, mul_70, sub_10}
  )
))
Except block: mul_70
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_30
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf86', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf85, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_10}
  ))
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf86', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf85, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_10}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[256], stride=[1]),
    origins=
  )
)
Except block: squeeze_30
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_31
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf87, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 256, 1, 1],
    origins={rsqrt_10, var_mean_10, add_55}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf88', layout=FlexibleLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf87, i0)
      tmp1 = ops.index_expr(196, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1e-05, torch.float32)
      tmp4 = tmp2 + tmp3
      tmp5 = ops.rsqrt(tmp4)
      return tmp5
  ,
  ranges=(256,),
  origins={rsqrt_10, squeeze_31, var_mean_10, add_55}
)), 'origins': {rsqrt_10, squeeze_31, var_mean_10, add_55}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf88', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf87, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(256,),
    origins={rsqrt_10, squeeze_31, var_mean_10, add_55}
  ))
))
buf88
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_71
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf86', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf85, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_10}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[256], stride=[1]),
    origins=
  )
), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf86, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_71}
  )
))
Except block: mul_71
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_72
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_93', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_93, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_72}
  )
))
Except block: mul_72
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_56
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf86, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_71}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_93, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_72}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf89', layout=FlexibleLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf86, i0)
      tmp1 = ops.constant(0.1, torch.float32)
      tmp2 = tmp0 * tmp1
      tmp3 = ops.load(primals_93, i0)
      tmp4 = ops.constant(0.9, torch.float32)
      tmp5 = tmp3 * tmp4
      tmp6 = tmp2 + tmp5
      return tmp6
  ,
  ranges=[256],
  origins={add_56, mul_72, mul_71}
)), 'origins': {add_56, mul_72, mul_71}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf89', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf86, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_93, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[256],
    origins={add_56, mul_72, mul_71}
  ))
))
buf89
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_32
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf87, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_10}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf87, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_10}
      )
    ),
    size=(256,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_32, var_mean_10}
  )
)
Except block: squeeze_32
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_73
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf87, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_10}
      )
    ),
    size=(256,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_32, var_mean_10}
  )
), 1.005128205128205),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf87, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(256,),
    origins={mul_73}
  )
))
Except block: mul_73
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_74
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf87, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(256,),
    origins={mul_73}
  )
)), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf87, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(256,),
    origins={mul_74, mul_73}
  )
))
Except block: mul_74
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_75
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_94', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_94, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_75}
  )
))
Except block: mul_75
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_57
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf87, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(256,),
    origins={mul_74, mul_73}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_94, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_75}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf90', layout=FlexibleLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf87, i0)
      tmp1 = ops.index_expr(196, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1.005128205128205, torch.float32)
      tmp4 = tmp2 * tmp3
      tmp5 = ops.constant(0.1, torch.float32)
      tmp6 = tmp4 * tmp5
      tmp7 = ops.load(primals_94, i0)
      tmp8 = ops.constant(0.9, torch.float32)
      tmp9 = tmp7 * tmp8
      tmp10 = tmp6 + tmp9
      return tmp10
  ,
  ranges=(256,),
  origins={add_57, mul_74, mul_73, mul_75}
)), 'origins': {add_57, mul_74, mul_73, mul_75}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf90', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf87, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_94, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(256,),
    origins={add_57, mul_74, mul_73, mul_75}
  ))
))
buf90
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_40
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_32', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_32', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_40
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_41
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_32', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_32', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_41
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_42
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_33', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_33', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_42
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_43
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_33', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_33', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_43
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_76
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf84, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf86, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf87, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 256, 14, 14],
    origins={var_mean_10, add_55, rsqrt_10, mul_70, sub_10}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_32', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf84, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf86, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf87, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_32, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_76, var_mean_10, add_55, rsqrt_10, sub_10, mul_70}
  )
))
Except block: mul_76
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_58
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf84, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf86, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf87, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_32, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_76, var_mean_10, add_55, rsqrt_10, sub_10, mul_70}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_33', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf84, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf86, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf87, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_32, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_33, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 256, 14, 14],
    origins={var_mean_10, add_58, mul_76, add_55, rsqrt_10, sub_1...
  )
))
Except block: add_58
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: relu_9
Overloadpacket: aten.relu
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.relu.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf84, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf86, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf87, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_32, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_33, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 256, 14, 14],
    origins={var_mean_10, add_58, mul_76, add_55, rsqrt_10, sub_1...
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf91', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf84, i3 + 14 * i2 + 196 * i1)
      tmp1 = ops.load(buf86, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf87, i1)
      tmp4 = ops.index_expr(196, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_32, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_33, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.relu(tmp13)
      return tmp14
  ,
  ranges=[1, 256, 14, 14],
  origins={var_mean_10, add_58, add_55, sub_10, mul_76, rsqrt_1...
)), 'origins': {var_mean_10, add_58, add_55, sub_10, mul_76, rsqrt_10, mul_70, relu_9}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf91', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf84, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf86, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf87, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_32, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_33, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 256, 14, 14],
    origins={var_mean_10, add_58, add_55, sub_10, mul_76, rsqrt_1...
  ))
))
buf91
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: convolution_11
Overloadpacket: aten.convolution
Flop count: 115605504
Case 2: call function, n.target in layout_constraints

Call_function in graph------------------
Target: aten.convolution.default,
Args: [TensorBox(StorageBox(
  ComputedBuffer(name='buf91', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf84, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf86, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf87, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_32, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_33, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 256, 14, 14],
    origins={var_mean_10, add_58, add_55, sub_10, mul_76, rsqrt_1...
  ))
)), TensorBox(StorageBox(
  InputBuffer(name='primals_34', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))
)), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1],
Kwargs: {}...
Before calling out


Not realizing StorageBox with name: buf91

Not realizing StorageBox with name: primals_34
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf92,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf91', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf84, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf86, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf87, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_32, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_33, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 256, 14, 14],
      origins={var_mean_10, add_58, add_55, sub_10, mul_76, rsqrt_1...
    )), InputBuffer(name='primals_34', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_11}
  )
))
buf92
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_59
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_98', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
)), 1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_98, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_59}
  )
))
Except block: add_59
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: var_mean_11
Overloadpacket: aten.var_mean
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.var_mean.correction,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf92,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf91', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf84, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf86, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf87, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_32, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_33, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 256, 14, 14],
      origins={var_mean_10, add_58, add_55, sub_10, mul_76, rsqrt_1...
    )), InputBuffer(name='primals_34', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_11}
  )
)), [0, 2, 3]),
Kwargs: {'correction': 0, 'keepdim': True}...
Before calling out


Realized StorageBox:
{'data': ComputedBuffer(name='buf93', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf92, r2 + 14 * r1 + 196 * i1)
      return tmp0
  ,
  ranges=[1, 256, 1, 1],
  reduction_ranges=[1, 14, 14],
  reduction_type=sum,
  origins={var_mean_11}
)), 'origins': {var_mean_11}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf94', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, _, _ = index
      tmp0 = ops.load(buf93, i1)
      tmp1 = ops.index_expr(196, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=[1, 256, 1, 1],
  origins={var_mean_11}
)), 'origins': {var_mean_11}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf95', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf92, r2 + 14 * r1 + 196 * i1)
      tmp1 = ops.load(buf94, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.square(tmp2)
      return tmp3
  ,
  ranges=[1, 256, 1, 1],
  reduction_ranges=[1, 14, 14],
  reduction_type=sum,
  origins={var_mean_11}
)), 'origins': {var_mean_11}}
End call_function in graph-----------

Result after run_node: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf95, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_11}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf94', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf93, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_11}
  ))
)))
Except block: var_mean_11
buf94
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_24
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf95, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_11}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf94', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf93, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_11}
  ))
))), 0),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf95, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_11}
  )
))

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf95, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_11}
  )
))
Except block: getitem_24
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_25
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf95, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_11}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf94', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf93, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_11}
  ))
))), 1),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  ComputedBuffer(name='buf94', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf93, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_11}
  ))
))

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf94', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf93, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_11}
  ))
))
buf94
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_60
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf95, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_11}
  )
)), 1e-05),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf95, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 256, 1, 1],
    origins={add_60, var_mean_11}
  )
))
Except block: add_60
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: rsqrt_11
Overloadpacket: aten.rsqrt
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.rsqrt.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf95, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 256, 1, 1],
    origins={add_60, var_mean_11}
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf95, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 256, 1, 1],
    origins={add_60, rsqrt_11, var_mean_11}
  )
))
Except block: rsqrt_11
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: sub_11
Overloadpacket: aten.sub
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.sub.Tensor,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf92,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf91', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf84, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf86, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf87, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_32, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_33, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 256, 14, 14],
      origins={var_mean_10, add_58, add_55, sub_10, mul_76, rsqrt_1...
    )), InputBuffer(name='primals_34', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_11}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf94', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf93, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_11}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf92, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf94, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 256, 14, 14],
    origins={sub_11}
  )
))
Except block: sub_11
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_77
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf92, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf94, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 256, 14, 14],
    origins={sub_11}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf95, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 256, 1, 1],
    origins={add_60, rsqrt_11, var_mean_11}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf92, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf94, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf95, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 256, 14, 14],
    origins={rsqrt_11, var_mean_11, sub_11, mul_77, add_60}
  )
))
Except block: mul_77
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_33
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf94', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf93, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_11}
  ))
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf94', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf93, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_11}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[256], stride=[1]),
    origins=
  )
)
Except block: squeeze_33
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_34
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf95, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 256, 1, 1],
    origins={add_60, rsqrt_11, var_mean_11}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf96', layout=FlexibleLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf95, i0)
      tmp1 = ops.index_expr(196, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1e-05, torch.float32)
      tmp4 = tmp2 + tmp3
      tmp5 = ops.rsqrt(tmp4)
      return tmp5
  ,
  ranges=(256,),
  origins={squeeze_34, add_60, rsqrt_11, var_mean_11}
)), 'origins': {squeeze_34, add_60, rsqrt_11, var_mean_11}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf96', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf95, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(256,),
    origins={squeeze_34, add_60, rsqrt_11, var_mean_11}
  ))
))
buf96
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_78
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf94', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf93, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_11}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[256], stride=[1]),
    origins=
  )
), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf94, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_78}
  )
))
Except block: mul_78
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_79
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_96', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_96, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_79}
  )
))
Except block: mul_79
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_61
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf94, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_78}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_96, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_79}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf97', layout=FlexibleLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf94, i0)
      tmp1 = ops.constant(0.1, torch.float32)
      tmp2 = tmp0 * tmp1
      tmp3 = ops.load(primals_96, i0)
      tmp4 = ops.constant(0.9, torch.float32)
      tmp5 = tmp3 * tmp4
      tmp6 = tmp2 + tmp5
      return tmp6
  ,
  ranges=[256],
  origins={add_61, mul_79, mul_78}
)), 'origins': {add_61, mul_79, mul_78}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf97', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf94, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_96, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[256],
    origins={add_61, mul_79, mul_78}
  ))
))
buf97
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_35
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf95, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_11}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf95, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_11}
      )
    ),
    size=(256,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={var_mean_11, squeeze_35}
  )
)
Except block: squeeze_35
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_80
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf95, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_11}
      )
    ),
    size=(256,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={var_mean_11, squeeze_35}
  )
), 1.005128205128205),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf95, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(256,),
    origins={mul_80}
  )
))
Except block: mul_80
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_81
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf95, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(256,),
    origins={mul_80}
  )
)), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf95, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(256,),
    origins={mul_81, mul_80}
  )
))
Except block: mul_81
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_82
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_97', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_97, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_82}
  )
))
Except block: mul_82
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_62
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf95, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(256,),
    origins={mul_81, mul_80}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_97, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_82}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf98', layout=FlexibleLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf95, i0)
      tmp1 = ops.index_expr(196, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1.005128205128205, torch.float32)
      tmp4 = tmp2 * tmp3
      tmp5 = ops.constant(0.1, torch.float32)
      tmp6 = tmp4 * tmp5
      tmp7 = ops.load(primals_97, i0)
      tmp8 = ops.constant(0.9, torch.float32)
      tmp9 = tmp7 * tmp8
      tmp10 = tmp6 + tmp9
      return tmp10
  ,
  ranges=(256,),
  origins={mul_81, add_62, mul_80, mul_82}
)), 'origins': {mul_81, add_62, mul_80, mul_82}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf98', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf95, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_97, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(256,),
    origins={mul_81, add_62, mul_80, mul_82}
  ))
))
buf98
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_44
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_35', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_35', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_44
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_45
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_35', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_35', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_45
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_46
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_36', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_36', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_46
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_47
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_36', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_36', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_47
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_83
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf92, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf94, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf95, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 256, 14, 14],
    origins={rsqrt_11, var_mean_11, sub_11, mul_77, add_60}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_35', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf92, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf94, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf95, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_35, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 256, 14, 14],
    origins={rsqrt_11, var_mean_11, sub_11, mul_77, add_60, mul_83}
  )
))
Except block: mul_83
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_63
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf92, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf94, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf95, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_35, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 256, 14, 14],
    origins={rsqrt_11, var_mean_11, sub_11, mul_77, add_60, mul_83}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_36', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf92, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf94, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf95, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_35, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_36, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 256, 14, 14],
    origins={rsqrt_11, var_mean_11, sub_11, mul_77, add_60, mul_8...
  )
))
Except block: add_63
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: convolution_12
Overloadpacket: aten.convolution
Flop count: 231211008
Case 2: call function, n.target in layout_constraints

Call_function in graph------------------
Target: aten.convolution.default,
Args: [TensorBox(StorageBox(
  ComputedBuffer(name='buf83', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf78, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf79, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_29, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_30, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 128, 28, 28],
    origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
  ))
)), TensorBox(StorageBox(
  InputBuffer(name='primals_37', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1]))
)), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1],
Kwargs: {}...
Before calling out


Not realizing StorageBox with name: buf83

Not realizing StorageBox with name: primals_37
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf99,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf83', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf78, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf79, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_29, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_30, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 128, 28, 28],
      origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
    )), InputBuffer(name='primals_37', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (0, 0), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_12}
  )
))
buf99
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_64
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_101', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
)), 1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_101, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_64}
  )
))
Except block: add_64
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: var_mean_12
Overloadpacket: aten.var_mean
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.var_mean.correction,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf99,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf83', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf78, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf79, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_29, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_30, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 128, 28, 28],
      origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
    )), InputBuffer(name='primals_37', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (0, 0), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_12}
  )
)), [0, 2, 3]),
Kwargs: {'correction': 0, 'keepdim': True}...
Before calling out


Realized StorageBox:
{'data': ComputedBuffer(name='buf100', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf99, r2 + 14 * r1 + 196 * i1)
      return tmp0
  ,
  ranges=[1, 256, 1, 1],
  reduction_ranges=[1, 14, 14],
  reduction_type=sum,
  origins={var_mean_12}
)), 'origins': {var_mean_12}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf101', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, _, _ = index
      tmp0 = ops.load(buf100, i1)
      tmp1 = ops.index_expr(196, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=[1, 256, 1, 1],
  origins={var_mean_12}
)), 'origins': {var_mean_12}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf102', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf99, r2 + 14 * r1 + 196 * i1)
      tmp1 = ops.load(buf101, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.square(tmp2)
      return tmp3
  ,
  ranges=[1, 256, 1, 1],
  reduction_ranges=[1, 14, 14],
  reduction_type=sum,
  origins={var_mean_12}
)), 'origins': {var_mean_12}}
End call_function in graph-----------

Result after run_node: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf102, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_12}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf101', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf100, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_12}
  ))
)))
Except block: var_mean_12
buf101
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_26
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf102, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_12}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf101', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf100, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_12}
  ))
))), 0),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf102, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_12}
  )
))

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf102, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_12}
  )
))
Except block: getitem_26
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_27
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf102, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_12}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf101', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf100, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_12}
  ))
))), 1),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  ComputedBuffer(name='buf101', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf100, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_12}
  ))
))

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf101', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf100, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_12}
  ))
))
buf101
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_65
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf102, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_12}
  )
)), 1e-05),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf102, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 256, 1, 1],
    origins={add_65, var_mean_12}
  )
))
Except block: add_65
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: rsqrt_12
Overloadpacket: aten.rsqrt
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.rsqrt.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf102, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 256, 1, 1],
    origins={add_65, var_mean_12}
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf102, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 256, 1, 1],
    origins={rsqrt_12, add_65, var_mean_12}
  )
))
Except block: rsqrt_12
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: sub_12
Overloadpacket: aten.sub
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.sub.Tensor,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf99,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf83', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf78, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf79, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_29, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_30, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 128, 28, 28],
      origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
    )), InputBuffer(name='primals_37', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (0, 0), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_12}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf101', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf100, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_12}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf99, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf101, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 256, 14, 14],
    origins={sub_12}
  )
))
Except block: sub_12
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_84
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf99, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf101, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 256, 14, 14],
    origins={sub_12}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf102, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 256, 1, 1],
    origins={rsqrt_12, add_65, var_mean_12}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf99, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf101, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf102, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_84, sub_12, rsqrt_12, add_65, var_mean_12}
  )
))
Except block: mul_84
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_36
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf101', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf100, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_12}
  ))
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf101', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf100, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_12}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[256], stride=[1]),
    origins=
  )
)
Except block: squeeze_36
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_37
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf102, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 256, 1, 1],
    origins={rsqrt_12, add_65, var_mean_12}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf103', layout=FlexibleLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf102, i0)
      tmp1 = ops.index_expr(196, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1e-05, torch.float32)
      tmp4 = tmp2 + tmp3
      tmp5 = ops.rsqrt(tmp4)
      return tmp5
  ,
  ranges=(256,),
  origins={var_mean_12, rsqrt_12, add_65, squeeze_37}
)), 'origins': {var_mean_12, rsqrt_12, add_65, squeeze_37}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf103', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf102, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(256,),
    origins={var_mean_12, rsqrt_12, add_65, squeeze_37}
  ))
))
buf103
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_85
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf101', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf100, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_12}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[256], stride=[1]),
    origins=
  )
), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf101, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_85}
  )
))
Except block: mul_85
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_86
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_99', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_99, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_86}
  )
))
Except block: mul_86
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_66
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf101, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_85}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_99, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_86}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf104', layout=FlexibleLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf101, i0)
      tmp1 = ops.constant(0.1, torch.float32)
      tmp2 = tmp0 * tmp1
      tmp3 = ops.load(primals_99, i0)
      tmp4 = ops.constant(0.9, torch.float32)
      tmp5 = tmp3 * tmp4
      tmp6 = tmp2 + tmp5
      return tmp6
  ,
  ranges=[256],
  origins={mul_85, add_66, mul_86}
)), 'origins': {mul_85, add_66, mul_86}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf104', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf101, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_99, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[256],
    origins={mul_85, add_66, mul_86}
  ))
))
buf104
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_38
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf102, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_12}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf102, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_12}
      )
    ),
    size=(256,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_38, var_mean_12}
  )
)
Except block: squeeze_38
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_87
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf102, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_12}
      )
    ),
    size=(256,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_38, var_mean_12}
  )
), 1.005128205128205),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf102, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(256,),
    origins={mul_87}
  )
))
Except block: mul_87
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_88
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf102, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(256,),
    origins={mul_87}
  )
)), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf102, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(256,),
    origins={mul_87, mul_88}
  )
))
Except block: mul_88
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_89
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_100', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_100, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_89}
  )
))
Except block: mul_89
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_67
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf102, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(256,),
    origins={mul_87, mul_88}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_100, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_89}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf105', layout=FlexibleLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf102, i0)
      tmp1 = ops.index_expr(196, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1.005128205128205, torch.float32)
      tmp4 = tmp2 * tmp3
      tmp5 = ops.constant(0.1, torch.float32)
      tmp6 = tmp4 * tmp5
      tmp7 = ops.load(primals_100, i0)
      tmp8 = ops.constant(0.9, torch.float32)
      tmp9 = tmp7 * tmp8
      tmp10 = tmp6 + tmp9
      return tmp10
  ,
  ranges=(256,),
  origins={mul_87, add_67, mul_88, mul_89}
)), 'origins': {mul_87, add_67, mul_88, mul_89}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf105', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf102, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_100, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(256,),
    origins={mul_87, add_67, mul_88, mul_89}
  ))
))
buf105
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_48
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_38', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_38', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_48
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_49
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_38', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_38', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_49
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_50
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_39', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_39', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_50
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_51
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_39', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_39', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_51
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_90
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf99, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf101, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf102, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_84, sub_12, rsqrt_12, add_65, var_mean_12}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_38', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf99, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf101, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf102, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_38, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_84, var_mean_12, sub_12, rsqrt_12, add_65, mul_90}
  )
))
Except block: mul_90
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_68
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf99, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf101, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf102, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_38, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_84, var_mean_12, sub_12, rsqrt_12, add_65, mul_90}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_39', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf99, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf101, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf102, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_38, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_39, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 256, 14, 14],
    origins={add_68, mul_84, var_mean_12, sub_12, rsqrt_12, add_6...
  )
))
Except block: add_68
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_69
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf92, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf94, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf95, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_35, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_36, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 256, 14, 14],
    origins={rsqrt_11, var_mean_11, sub_11, mul_77, add_60, mul_8...
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf99, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf101, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf102, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_38, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_39, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 256, 14, 14],
    origins={add_68, mul_84, var_mean_12, sub_12, rsqrt_12, add_6...
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Realized StorageBox:
{'data': ComputedBuffer(name='buf106', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf92, i3 + 14 * i2 + 196 * i1)
      tmp1 = ops.load(buf94, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf95, i1)
      tmp4 = ops.index_expr(196, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_35, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_36, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.load(buf99, i3 + 14 * i2 + 196 * i1)
      tmp15 = ops.load(buf101, i1)
      tmp16 = tmp14 - tmp15
      tmp17 = ops.load(buf102, i1)
      tmp18 = ops.index_expr(196, torch.float32)
      tmp19 = tmp17 / tmp18
      tmp20 = ops.constant(1e-05, torch.float32)
      tmp21 = tmp19 + tmp20
      tmp22 = ops.rsqrt(tmp21)
      tmp23 = tmp16 * tmp22
      tmp24 = ops.load(primals_38, i1)
      tmp25 = tmp23 * tmp24
      tmp26 = ops.load(primals_39, i1)
      tmp27 = tmp25 + tmp26
      tmp28 = tmp13 + tmp27
      return tmp28
  ,
  ranges=[1, 256, 14, 14],
  origins={add_68, var_mean_12, rsqrt_11, var_mean_11, sub_11, ...
)), 'origins': {add_68, var_mean_12, rsqrt_11, var_mean_11, sub_11, add_60, rsqrt_12, add_65, mul_77, mul_84, add_69, sub_12, mul_83, mul_90, add_63}, '__num_reads_cache': 10}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf106', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf92, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf94, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf95, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_35, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_36, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf99, i3 + 14 * i2 + 196 * i1)
        tmp15 = ops.load(buf101, i1)
        tmp16 = tmp14 - tmp15
        tmp17 = ops.load(buf102, i1)
        tmp18 = ops.index_expr(196, torch.float32)
        tmp19 = tmp17 / tmp18
        tmp20 = ops.constant(1e-05, torch.float32)
        tmp21 = tmp19 + tmp20
        tmp22 = ops.rsqrt(tmp21)
        tmp23 = tmp16 * tmp22
        tmp24 = ops.load(primals_38, i1)
        tmp25 = tmp23 * tmp24
        tmp26 = ops.load(primals_39, i1)
        tmp27 = tmp25 + tmp26
        tmp28 = tmp13 + tmp27
        return tmp28
    ,
    ranges=[1, 256, 14, 14],
    origins={add_68, var_mean_12, rsqrt_11, var_mean_11, sub_11, ...
  ))
))
buf106
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: relu_10
Overloadpacket: aten.relu
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.relu.default,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf106', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf92, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf94, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf95, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_35, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_36, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf99, i3 + 14 * i2 + 196 * i1)
        tmp15 = ops.load(buf101, i1)
        tmp16 = tmp14 - tmp15
        tmp17 = ops.load(buf102, i1)
        tmp18 = ops.index_expr(196, torch.float32)
        tmp19 = tmp17 / tmp18
        tmp20 = ops.constant(1e-05, torch.float32)
        tmp21 = tmp19 + tmp20
        tmp22 = ops.rsqrt(tmp21)
        tmp23 = tmp16 * tmp22
        tmp24 = ops.load(primals_38, i1)
        tmp25 = tmp23 * tmp24
        tmp26 = ops.load(primals_39, i1)
        tmp27 = tmp25 + tmp26
        tmp28 = tmp13 + tmp27
        return tmp28
    ,
    ranges=[1, 256, 14, 14],
    origins={add_68, var_mean_12, rsqrt_11, var_mean_11, sub_11, ...
  ))
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf107', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf106, i3 + 14 * i2 + 196 * i1)
      tmp1 = ops.relu(tmp0)
      return tmp1
  ,
  ranges=[1, 256, 14, 14],
  origins={relu_10}
)), 'origins': {relu_10}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf107', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf106, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.relu(tmp0)
        return tmp1
    ,
    ranges=[1, 256, 14, 14],
    origins={relu_10}
  ))
))
buf107
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: convolution_13
Overloadpacket: aten.convolution
Flop count: 231211008
Case 2: call function, n.target in layout_constraints

Call_function in graph------------------
Target: aten.convolution.default,
Args: [TensorBox(StorageBox(
  ComputedBuffer(name='buf107', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf106, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.relu(tmp0)
        return tmp1
    ,
    ranges=[1, 256, 14, 14],
    origins={relu_10}
  ))
)), TensorBox(StorageBox(
  InputBuffer(name='primals_40', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))
)), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1],
Kwargs: {}...
Before calling out


Not realizing StorageBox with name: buf107

Not realizing StorageBox with name: primals_40
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf108,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf107', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf106, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.relu(tmp0)
          return tmp1
      ,
      ranges=[1, 256, 14, 14],
      origins={relu_10}
    )), InputBuffer(name='primals_40', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_13}
  )
))
buf108
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_70
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_104', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
)), 1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_104, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_70}
  )
))
Except block: add_70
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: var_mean_13
Overloadpacket: aten.var_mean
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.var_mean.correction,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf108,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf107', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf106, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.relu(tmp0)
          return tmp1
      ,
      ranges=[1, 256, 14, 14],
      origins={relu_10}
    )), InputBuffer(name='primals_40', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_13}
  )
)), [0, 2, 3]),
Kwargs: {'correction': 0, 'keepdim': True}...
Before calling out


Realized StorageBox:
{'data': ComputedBuffer(name='buf109', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf108, r2 + 14 * r1 + 196 * i1)
      return tmp0
  ,
  ranges=[1, 256, 1, 1],
  reduction_ranges=[1, 14, 14],
  reduction_type=sum,
  origins={var_mean_13}
)), 'origins': {var_mean_13}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf110', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, _, _ = index
      tmp0 = ops.load(buf109, i1)
      tmp1 = ops.index_expr(196, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=[1, 256, 1, 1],
  origins={var_mean_13}
)), 'origins': {var_mean_13}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf111', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf108, r2 + 14 * r1 + 196 * i1)
      tmp1 = ops.load(buf110, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.square(tmp2)
      return tmp3
  ,
  ranges=[1, 256, 1, 1],
  reduction_ranges=[1, 14, 14],
  reduction_type=sum,
  origins={var_mean_13}
)), 'origins': {var_mean_13}}
End call_function in graph-----------

Result after run_node: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf111, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_13}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf110', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf109, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_13}
  ))
)))
Except block: var_mean_13
buf110
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_28
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf111, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_13}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf110', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf109, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_13}
  ))
))), 0),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf111, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_13}
  )
))

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf111, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_13}
  )
))
Except block: getitem_28
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_29
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf111, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_13}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf110', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf109, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_13}
  ))
))), 1),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  ComputedBuffer(name='buf110', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf109, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_13}
  ))
))

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf110', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf109, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_13}
  ))
))
buf110
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_71
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf111, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_13}
  )
)), 1e-05),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf111, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 256, 1, 1],
    origins={add_71, var_mean_13}
  )
))
Except block: add_71
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: rsqrt_13
Overloadpacket: aten.rsqrt
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.rsqrt.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf111, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 256, 1, 1],
    origins={add_71, var_mean_13}
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf111, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 256, 1, 1],
    origins={rsqrt_13, add_71, var_mean_13}
  )
))
Except block: rsqrt_13
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: sub_13
Overloadpacket: aten.sub
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.sub.Tensor,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf108,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf107', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf106, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.relu(tmp0)
          return tmp1
      ,
      ranges=[1, 256, 14, 14],
      origins={relu_10}
    )), InputBuffer(name='primals_40', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_13}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf110', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf109, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_13}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf108, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf110, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 256, 14, 14],
    origins={sub_13}
  )
))
Except block: sub_13
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_91
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf108, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf110, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 256, 14, 14],
    origins={sub_13}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf111, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 256, 1, 1],
    origins={rsqrt_13, add_71, var_mean_13}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf108, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf110, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf111, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_91, rsqrt_13, add_71, sub_13, var_mean_13}
  )
))
Except block: mul_91
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_39
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf110', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf109, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_13}
  ))
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf110', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf109, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_13}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[256], stride=[1]),
    origins=
  )
)
Except block: squeeze_39
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_40
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf111, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 256, 1, 1],
    origins={rsqrt_13, add_71, var_mean_13}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf112', layout=FlexibleLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf111, i0)
      tmp1 = ops.index_expr(196, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1e-05, torch.float32)
      tmp4 = tmp2 + tmp3
      tmp5 = ops.rsqrt(tmp4)
      return tmp5
  ,
  ranges=(256,),
  origins={squeeze_40, rsqrt_13, add_71, var_mean_13}
)), 'origins': {squeeze_40, rsqrt_13, add_71, var_mean_13}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf112', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf111, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(256,),
    origins={squeeze_40, rsqrt_13, add_71, var_mean_13}
  ))
))
buf112
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_92
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf110', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf109, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_13}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[256], stride=[1]),
    origins=
  )
), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf110, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_92}
  )
))
Except block: mul_92
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_93
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_102', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_102, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_93}
  )
))
Except block: mul_93
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_72
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf110, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_92}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_102, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_93}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf113', layout=FlexibleLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf110, i0)
      tmp1 = ops.constant(0.1, torch.float32)
      tmp2 = tmp0 * tmp1
      tmp3 = ops.load(primals_102, i0)
      tmp4 = ops.constant(0.9, torch.float32)
      tmp5 = tmp3 * tmp4
      tmp6 = tmp2 + tmp5
      return tmp6
  ,
  ranges=[256],
  origins={mul_92, mul_93, add_72}
)), 'origins': {mul_92, mul_93, add_72}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf113', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf110, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_102, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[256],
    origins={mul_92, mul_93, add_72}
  ))
))
buf113
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_41
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf111, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_13}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf111, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_13}
      )
    ),
    size=(256,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_41, var_mean_13}
  )
)
Except block: squeeze_41
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_94
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf111, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_13}
      )
    ),
    size=(256,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_41, var_mean_13}
  )
), 1.005128205128205),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf111, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(256,),
    origins={mul_94}
  )
))
Except block: mul_94
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_95
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf111, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(256,),
    origins={mul_94}
  )
)), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf111, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(256,),
    origins={mul_94, mul_95}
  )
))
Except block: mul_95
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_96
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_103', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_103, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_96}
  )
))
Except block: mul_96
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_73
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf111, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(256,),
    origins={mul_94, mul_95}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_103, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_96}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf114', layout=FlexibleLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf111, i0)
      tmp1 = ops.index_expr(196, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1.005128205128205, torch.float32)
      tmp4 = tmp2 * tmp3
      tmp5 = ops.constant(0.1, torch.float32)
      tmp6 = tmp4 * tmp5
      tmp7 = ops.load(primals_103, i0)
      tmp8 = ops.constant(0.9, torch.float32)
      tmp9 = tmp7 * tmp8
      tmp10 = tmp6 + tmp9
      return tmp10
  ,
  ranges=(256,),
  origins={mul_96, mul_94, add_73, mul_95}
)), 'origins': {mul_96, mul_94, add_73, mul_95}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf114', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf111, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_103, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(256,),
    origins={mul_96, mul_94, add_73, mul_95}
  ))
))
buf114
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_52
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_41', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_41', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_52
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_53
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_41', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_41', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_53
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_54
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_42', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_42', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_54
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_55
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_42', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_42', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_55
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_97
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf108, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf110, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf111, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_91, rsqrt_13, add_71, sub_13, var_mean_13}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_41', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf108, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf110, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf111, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_41, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_91, mul_97, rsqrt_13, add_71, sub_13, var_mean_13}
  )
))
Except block: mul_97
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_74
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf108, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf110, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf111, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_41, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_91, mul_97, rsqrt_13, add_71, sub_13, var_mean_13}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_42', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf108, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf110, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf111, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_41, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_42, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_91, mul_97, rsqrt_13, add_71, add_74, sub_13, va...
  )
))
Except block: add_74
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: relu_11
Overloadpacket: aten.relu
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.relu.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf108, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf110, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf111, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_41, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_42, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_91, mul_97, rsqrt_13, add_71, add_74, sub_13, va...
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf115', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf108, i3 + 14 * i2 + 196 * i1)
      tmp1 = ops.load(buf110, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf111, i1)
      tmp4 = ops.index_expr(196, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_41, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_42, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.relu(tmp13)
      return tmp14
  ,
  ranges=[1, 256, 14, 14],
  origins={mul_91, relu_11, mul_97, rsqrt_13, add_74, sub_13, a...
)), 'origins': {mul_91, relu_11, mul_97, rsqrt_13, add_74, sub_13, add_71, var_mean_13}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf115', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf108, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf110, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf111, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_41, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_42, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_91, relu_11, mul_97, rsqrt_13, add_74, sub_13, a...
  ))
))
buf115
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: convolution_14
Overloadpacket: aten.convolution
Flop count: 12845056
Case 2: call function, n.target in layout_constraints

Call_function in graph------------------
Target: aten.convolution.default,
Args: [TensorBox(StorageBox(
  ComputedBuffer(name='buf115', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf108, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf110, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf111, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_41, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_42, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_91, relu_11, mul_97, rsqrt_13, add_74, sub_13, a...
  ))
)), TensorBox(StorageBox(
  InputBuffer(name='primals_43', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))
)), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1],
Kwargs: {}...
Before calling out


Not realizing StorageBox with name: buf115

Not realizing StorageBox with name: primals_43
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf116,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf115', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf108, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf110, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf111, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_41, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_42, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 256, 14, 14],
      origins={mul_91, relu_11, mul_97, rsqrt_13, add_74, sub_13, a...
    )), InputBuffer(name='primals_43', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_14}
  )
))
buf116
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_75
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_107', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
)), 1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_107, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_75}
  )
))
Except block: add_75
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: var_mean_14
Overloadpacket: aten.var_mean
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.var_mean.correction,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf116,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf115', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf108, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf110, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf111, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_41, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_42, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 256, 14, 14],
      origins={mul_91, relu_11, mul_97, rsqrt_13, add_74, sub_13, a...
    )), InputBuffer(name='primals_43', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_14}
  )
)), [0, 2, 3]),
Kwargs: {'correction': 0, 'keepdim': True}...
Before calling out


Realized StorageBox:
{'data': ComputedBuffer(name='buf117', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf116, r2 + 14 * r1 + 196 * i1)
      return tmp0
  ,
  ranges=[1, 256, 1, 1],
  reduction_ranges=[1, 14, 14],
  reduction_type=sum,
  origins={var_mean_14}
)), 'origins': {var_mean_14}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf118', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, _, _ = index
      tmp0 = ops.load(buf117, i1)
      tmp1 = ops.index_expr(196, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=[1, 256, 1, 1],
  origins={var_mean_14}
)), 'origins': {var_mean_14}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf119', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf116, r2 + 14 * r1 + 196 * i1)
      tmp1 = ops.load(buf118, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.square(tmp2)
      return tmp3
  ,
  ranges=[1, 256, 1, 1],
  reduction_ranges=[1, 14, 14],
  reduction_type=sum,
  origins={var_mean_14}
)), 'origins': {var_mean_14}}
End call_function in graph-----------

Result after run_node: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf119, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_14}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf118', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf117, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_14}
  ))
)))
Except block: var_mean_14
buf118
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_30
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf119, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_14}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf118', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf117, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_14}
  ))
))), 0),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf119, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_14}
  )
))

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf119, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_14}
  )
))
Except block: getitem_30
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_31
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf119, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_14}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf118', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf117, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_14}
  ))
))), 1),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  ComputedBuffer(name='buf118', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf117, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_14}
  ))
))

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf118', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf117, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_14}
  ))
))
buf118
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_76
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf119, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_14}
  )
)), 1e-05),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf119, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_14, add_76}
  )
))
Except block: add_76
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: rsqrt_14
Overloadpacket: aten.rsqrt
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.rsqrt.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf119, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_14, add_76}
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf119, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_14, add_76, rsqrt_14}
  )
))
Except block: rsqrt_14
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: sub_14
Overloadpacket: aten.sub
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.sub.Tensor,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf116,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf115', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf108, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf110, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf111, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_41, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_42, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 256, 14, 14],
      origins={mul_91, relu_11, mul_97, rsqrt_13, add_74, sub_13, a...
    )), InputBuffer(name='primals_43', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_14}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf118', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf117, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_14}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf118, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 256, 14, 14],
    origins={sub_14}
  )
))
Except block: sub_14
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_98
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf118, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 256, 14, 14],
    origins={sub_14}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf119, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_14, add_76, rsqrt_14}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf118, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf119, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_98, add_76, var_mean_14, sub_14, rsqrt_14}
  )
))
Except block: mul_98
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_42
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf118', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf117, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_14}
  ))
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf118', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf117, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_14}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[256], stride=[1]),
    origins=
  )
)
Except block: squeeze_42
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_43
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf119, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_14, add_76, rsqrt_14}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf120', layout=FlexibleLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf119, i0)
      tmp1 = ops.index_expr(196, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1e-05, torch.float32)
      tmp4 = tmp2 + tmp3
      tmp5 = ops.rsqrt(tmp4)
      return tmp5
  ,
  ranges=(256,),
  origins={squeeze_43, var_mean_14, add_76, rsqrt_14}
)), 'origins': {squeeze_43, var_mean_14, add_76, rsqrt_14}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf120', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf119, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(256,),
    origins={squeeze_43, var_mean_14, add_76, rsqrt_14}
  ))
))
buf120
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_99
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf118', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf117, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_14}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[256], stride=[1]),
    origins=
  )
), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf118, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_99}
  )
))
Except block: mul_99
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_100
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_105', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_105, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_100}
  )
))
Except block: mul_100
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_77
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf118, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_99}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_105, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_100}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf121', layout=FlexibleLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf118, i0)
      tmp1 = ops.constant(0.1, torch.float32)
      tmp2 = tmp0 * tmp1
      tmp3 = ops.load(primals_105, i0)
      tmp4 = ops.constant(0.9, torch.float32)
      tmp5 = tmp3 * tmp4
      tmp6 = tmp2 + tmp5
      return tmp6
  ,
  ranges=[256],
  origins={mul_99, mul_100, add_77}
)), 'origins': {mul_99, mul_100, add_77}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf121', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf118, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_105, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[256],
    origins={mul_99, mul_100, add_77}
  ))
))
buf121
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_44
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf119, i1)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 256, 1, 1],
    origins={var_mean_14}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf119, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_14}
      )
    ),
    size=(256,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_44, var_mean_14}
  )
)
Except block: squeeze_44
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_101
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf119, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_14}
      )
    ),
    size=(256,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_44, var_mean_14}
  )
), 1.005128205128205),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf119, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(256,),
    origins={mul_101}
  )
))
Except block: mul_101
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_102
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf119, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(256,),
    origins={mul_101}
  )
)), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf119, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(256,),
    origins={mul_101, mul_102}
  )
))
Except block: mul_102
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_103
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_106', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_106, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_103}
  )
))
Except block: mul_103
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_78
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf119, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(256,),
    origins={mul_101, mul_102}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_106, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[256],
    origins={mul_103}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf122', layout=FlexibleLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf119, i0)
      tmp1 = ops.index_expr(196, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1.005128205128205, torch.float32)
      tmp4 = tmp2 * tmp3
      tmp5 = ops.constant(0.1, torch.float32)
      tmp6 = tmp4 * tmp5
      tmp7 = ops.load(primals_106, i0)
      tmp8 = ops.constant(0.9, torch.float32)
      tmp9 = tmp7 * tmp8
      tmp10 = tmp6 + tmp9
      return tmp10
  ,
  ranges=(256,),
  origins={mul_103, add_78, mul_102, mul_101}
)), 'origins': {mul_103, add_78, mul_102, mul_101}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf122', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf119, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_106, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(256,),
    origins={mul_103, add_78, mul_102, mul_101}
  ))
))
buf122
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_56
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_44', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_44', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_56
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_57
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_44', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_44', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_57
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_58
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_45', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_45', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_58
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_59
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_45', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_45', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_59
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_104
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf118, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf119, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_98, add_76, var_mean_14, sub_14, rsqrt_14}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_44', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf118, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf119, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_44, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 256, 14, 14],
    origins={rsqrt_14, mul_98, add_76, var_mean_14, sub_14, mul_104}
  )
))
Except block: mul_104
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_79
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf118, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf119, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_44, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 256, 14, 14],
    origins={rsqrt_14, mul_98, add_76, var_mean_14, sub_14, mul_104}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_45', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[256, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf118, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf119, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_44, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_45, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 256, 14, 14],
    origins={add_79, rsqrt_14, mul_98, add_76, var_mean_14, sub_1...
  )
))
Except block: add_79
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_80
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf118, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf119, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_44, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_45, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 256, 14, 14],
    origins={add_79, rsqrt_14, mul_98, add_76, var_mean_14, sub_1...
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf107', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf106, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.relu(tmp0)
        return tmp1
    ,
    ranges=[1, 256, 14, 14],
    origins={relu_10}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf118, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf119, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_44, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_45, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
        tmp15 = tmp13 + tmp14
        return tmp15
    ,
    ranges=[1, 256, 14, 14],
    origins={add_80, mul_98, var_mean_14, add_79, add_76, rsqrt_1...
  )
))
Except block: add_80
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: relu_12
Overloadpacket: aten.relu
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.relu.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf118, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf119, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_44, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_45, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
        tmp15 = tmp13 + tmp14
        return tmp15
    ,
    ranges=[1, 256, 14, 14],
    origins={add_80, mul_98, var_mean_14, add_79, add_76, rsqrt_1...
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf123', layout=FlexibleLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
      tmp1 = ops.load(buf118, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf119, i1)
      tmp4 = ops.index_expr(196, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_44, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_45, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
      tmp15 = tmp13 + tmp14
      tmp16 = ops.relu(tmp15)
      return tmp16
  ,
  ranges=[1, 256, 14, 14],
  origins={mul_98, add_80, var_mean_14, add_79, add_76, relu_12...
)), 'origins': {mul_98, add_80, var_mean_14, add_79, add_76, relu_12, rsqrt_14, sub_14, mul_104}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf123', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf118, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf119, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_44, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_45, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_98, add_80, var_mean_14, add_79, add_76, relu_12...
  ))
))
buf123
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: convolution_15
Overloadpacket: aten.convolution
Flop count: 12845056
Case 2: call function, n.target in layout_constraints

Call_function in graph------------------
Target: aten.convolution.default,
Args: [TensorBox(StorageBox(
  ComputedBuffer(name='buf123', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf118, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf119, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_44, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_45, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_98, add_80, var_mean_14, add_79, add_76, relu_12...
  ))
)), TensorBox(StorageBox(
  InputBuffer(name='primals_46', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 3, 3], stride=[2304, 9, 3, 1]))
)), None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1],
Kwargs: {}...
Before calling out


Not realizing StorageBox with name: buf123

Not realizing StorageBox with name: primals_46
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf124,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf123', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf118, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf119, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_44, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_45, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 256, 14, 14],
      origins={mul_98, add_80, var_mean_14, add_79, add_76, relu_12...
    )), InputBuffer(name='primals_46', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_15}
  )
))
buf124
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_81
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_110', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
)), 1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_110, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_81}
  )
))
Except block: add_81
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: var_mean_15
Overloadpacket: aten.var_mean
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.var_mean.correction,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf124,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf123', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf118, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf119, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_44, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_45, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 256, 14, 14],
      origins={mul_98, add_80, var_mean_14, add_79, add_76, relu_12...
    )), InputBuffer(name='primals_46', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_15}
  )
)), [0, 2, 3]),
Kwargs: {'correction': 0, 'keepdim': True}...
Before calling out


Realized StorageBox:
{'data': ComputedBuffer(name='buf125', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf124, r2 + 7 * r1 + 49 * i1)
      return tmp0
  ,
  ranges=[1, 512, 1, 1],
  reduction_ranges=[1, 7, 7],
  reduction_type=sum,
  origins={var_mean_15}
)), 'origins': {var_mean_15}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf126', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, _, _ = index
      tmp0 = ops.load(buf125, i1)
      tmp1 = ops.index_expr(49, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=[1, 512, 1, 1],
  origins={var_mean_15}
)), 'origins': {var_mean_15}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf127', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf124, r2 + 7 * r1 + 49 * i1)
      tmp1 = ops.load(buf126, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.square(tmp2)
      return tmp3
  ,
  ranges=[1, 512, 1, 1],
  reduction_ranges=[1, 7, 7],
  reduction_type=sum,
  origins={var_mean_15}
)), 'origins': {var_mean_15}}
End call_function in graph-----------

Result after run_node: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf127, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_15}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf126', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf125, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_15}
  ))
)))
Except block: var_mean_15
buf126
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_32
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf127, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_15}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf126', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf125, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_15}
  ))
))), 0),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf127, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_15}
  )
))

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf127, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_15}
  )
))
Except block: getitem_32
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_33
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf127, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_15}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf126', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf125, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_15}
  ))
))), 1),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  ComputedBuffer(name='buf126', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf125, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_15}
  ))
))

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf126', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf125, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_15}
  ))
))
buf126
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_82
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf127, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_15}
  )
)), 1e-05),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf127, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 512, 1, 1],
    origins={add_82, var_mean_15}
  )
))
Except block: add_82
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: rsqrt_15
Overloadpacket: aten.rsqrt
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.rsqrt.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf127, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 512, 1, 1],
    origins={add_82, var_mean_15}
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf127, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 512, 1, 1],
    origins={add_82, rsqrt_15, var_mean_15}
  )
))
Except block: rsqrt_15
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: sub_15
Overloadpacket: aten.sub
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.sub.Tensor,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf124,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf123', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf118, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf119, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_44, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_45, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 256, 14, 14],
      origins={mul_98, add_80, var_mean_14, add_79, add_76, relu_12...
    )), InputBuffer(name='primals_46', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_15}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf126', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf125, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_15}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf124, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf126, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 512, 7, 7],
    origins={sub_15}
  )
))
Except block: sub_15
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_105
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf124, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf126, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 512, 7, 7],
    origins={sub_15}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf127, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 512, 1, 1],
    origins={add_82, rsqrt_15, var_mean_15}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf124, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf126, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf127, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 512, 7, 7],
    origins={sub_15, add_82, rsqrt_15, var_mean_15, mul_105}
  )
))
Except block: mul_105
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_45
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf126', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf125, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_15}
  ))
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf126', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf125, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_15}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[512], stride=[1]),
    origins=
  )
)
Except block: squeeze_45
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_46
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf127, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 512, 1, 1],
    origins={add_82, rsqrt_15, var_mean_15}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf128', layout=FlexibleLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf127, i0)
      tmp1 = ops.index_expr(49, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1e-05, torch.float32)
      tmp4 = tmp2 + tmp3
      tmp5 = ops.rsqrt(tmp4)
      return tmp5
  ,
  ranges=(512,),
  origins={add_82, squeeze_46, rsqrt_15, var_mean_15}
)), 'origins': {add_82, squeeze_46, rsqrt_15, var_mean_15}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf128', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf127, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(512,),
    origins={add_82, squeeze_46, rsqrt_15, var_mean_15}
  ))
))
buf128
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_106
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf126', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf125, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_15}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[512], stride=[1]),
    origins=
  )
), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf126, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_106}
  )
))
Except block: mul_106
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_107
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_108', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_108, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_107}
  )
))
Except block: mul_107
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_83
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf126, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_106}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_108, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_107}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf129', layout=FlexibleLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf126, i0)
      tmp1 = ops.constant(0.1, torch.float32)
      tmp2 = tmp0 * tmp1
      tmp3 = ops.load(primals_108, i0)
      tmp4 = ops.constant(0.9, torch.float32)
      tmp5 = tmp3 * tmp4
      tmp6 = tmp2 + tmp5
      return tmp6
  ,
  ranges=[512],
  origins={mul_107, add_83, mul_106}
)), 'origins': {mul_107, add_83, mul_106}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf129', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf126, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_108, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[512],
    origins={mul_107, add_83, mul_106}
  ))
))
buf129
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_47
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf127, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_15}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf127, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_15}
      )
    ),
    size=(512,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_47, var_mean_15}
  )
)
Except block: squeeze_47
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_108
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf127, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_15}
      )
    ),
    size=(512,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_47, var_mean_15}
  )
), 1.0208333333333333),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf127, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(512,),
    origins={mul_108}
  )
))
Except block: mul_108
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_109
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf127, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(512,),
    origins={mul_108}
  )
)), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf127, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(512,),
    origins={mul_108, mul_109}
  )
))
Except block: mul_109
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_110
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_109', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_109, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_110}
  )
))
Except block: mul_110
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_84
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf127, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(512,),
    origins={mul_108, mul_109}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_109, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_110}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf130', layout=FlexibleLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf127, i0)
      tmp1 = ops.index_expr(49, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1.0208333333333333, torch.float32)
      tmp4 = tmp2 * tmp3
      tmp5 = ops.constant(0.1, torch.float32)
      tmp6 = tmp4 * tmp5
      tmp7 = ops.load(primals_109, i0)
      tmp8 = ops.constant(0.9, torch.float32)
      tmp9 = tmp7 * tmp8
      tmp10 = tmp6 + tmp9
      return tmp10
  ,
  ranges=(512,),
  origins={add_84, mul_110, mul_108, mul_109}
)), 'origins': {add_84, mul_110, mul_108, mul_109}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf130', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf127, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_109, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(512,),
    origins={add_84, mul_110, mul_108, mul_109}
  ))
))
buf130
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_60
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_47', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_47', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_60
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_61
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_47', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_47', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_61
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_62
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_48', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_48', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_62
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_63
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_48', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_48', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_63
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_111
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf124, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf126, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf127, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 512, 7, 7],
    origins={sub_15, add_82, rsqrt_15, var_mean_15, mul_105}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_47', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf124, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf126, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf127, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_47, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 512, 7, 7],
    origins={var_mean_15, mul_111, add_82, rsqrt_15, sub_15, mul_...
  )
))
Except block: mul_111
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_85
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf124, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf126, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf127, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_47, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 512, 7, 7],
    origins={var_mean_15, mul_111, add_82, rsqrt_15, sub_15, mul_...
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_48', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf124, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf126, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf127, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_47, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_48, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 512, 7, 7],
    origins={var_mean_15, add_85, mul_111, add_82, rsqrt_15, sub_...
  )
))
Except block: add_85
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: relu_13
Overloadpacket: aten.relu
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.relu.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf124, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf126, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf127, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_47, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_48, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 512, 7, 7],
    origins={var_mean_15, add_85, mul_111, add_82, rsqrt_15, sub_...
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf131', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf124, i3 + 7 * i2 + 49 * i1)
      tmp1 = ops.load(buf126, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf127, i1)
      tmp4 = ops.index_expr(49, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_47, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_48, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.relu(tmp13)
      return tmp14
  ,
  ranges=[1, 512, 7, 7],
  origins={relu_13, add_85, mul_111, add_82, rsqrt_15, sub_15, ...
)), 'origins': {relu_13, add_85, mul_111, add_82, rsqrt_15, sub_15, var_mean_15, mul_105}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf131', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf124, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf126, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf127, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_47, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_48, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 512, 7, 7],
    origins={relu_13, add_85, mul_111, add_82, rsqrt_15, sub_15, ...
  ))
))
buf131
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: convolution_16
Overloadpacket: aten.convolution
Flop count: 231211008
Case 2: call function, n.target in layout_constraints

Call_function in graph------------------
Target: aten.convolution.default,
Args: [TensorBox(StorageBox(
  ComputedBuffer(name='buf131', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf124, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf126, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf127, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_47, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_48, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 512, 7, 7],
    origins={relu_13, add_85, mul_111, add_82, rsqrt_15, sub_15, ...
  ))
)), TensorBox(StorageBox(
  InputBuffer(name='primals_49', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))
)), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1],
Kwargs: {}...
Before calling out


Not realizing StorageBox with name: buf131

Not realizing StorageBox with name: primals_49
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf132,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf131', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf124, i3 + 7 * i2 + 49 * i1)
          tmp1 = ops.load(buf126, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf127, i1)
          tmp4 = ops.index_expr(49, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_47, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_48, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 512, 7, 7],
      origins={relu_13, add_85, mul_111, add_82, rsqrt_15, sub_15, ...
    )), InputBuffer(name='primals_49', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_16}
  )
))
buf132
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_86
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_113', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
)), 1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_113, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_86}
  )
))
Except block: add_86
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: var_mean_16
Overloadpacket: aten.var_mean
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.var_mean.correction,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf132,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf131', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf124, i3 + 7 * i2 + 49 * i1)
          tmp1 = ops.load(buf126, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf127, i1)
          tmp4 = ops.index_expr(49, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_47, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_48, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 512, 7, 7],
      origins={relu_13, add_85, mul_111, add_82, rsqrt_15, sub_15, ...
    )), InputBuffer(name='primals_49', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_16}
  )
)), [0, 2, 3]),
Kwargs: {'correction': 0, 'keepdim': True}...
Before calling out


Realized StorageBox:
{'data': ComputedBuffer(name='buf133', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf132, r2 + 7 * r1 + 49 * i1)
      return tmp0
  ,
  ranges=[1, 512, 1, 1],
  reduction_ranges=[1, 7, 7],
  reduction_type=sum,
  origins={var_mean_16}
)), 'origins': {var_mean_16}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf134', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, _, _ = index
      tmp0 = ops.load(buf133, i1)
      tmp1 = ops.index_expr(49, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=[1, 512, 1, 1],
  origins={var_mean_16}
)), 'origins': {var_mean_16}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf135', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf132, r2 + 7 * r1 + 49 * i1)
      tmp1 = ops.load(buf134, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.square(tmp2)
      return tmp3
  ,
  ranges=[1, 512, 1, 1],
  reduction_ranges=[1, 7, 7],
  reduction_type=sum,
  origins={var_mean_16}
)), 'origins': {var_mean_16}}
End call_function in graph-----------

Result after run_node: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf135, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_16}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf134', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf133, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_16}
  ))
)))
Except block: var_mean_16
buf134
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_34
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf135, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_16}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf134', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf133, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_16}
  ))
))), 0),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf135, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_16}
  )
))

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf135, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_16}
  )
))
Except block: getitem_34
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_35
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf135, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_16}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf134', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf133, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_16}
  ))
))), 1),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  ComputedBuffer(name='buf134', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf133, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_16}
  ))
))

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf134', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf133, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_16}
  ))
))
buf134
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_87
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf135, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_16}
  )
)), 1e-05),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf135, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_16, add_87}
  )
))
Except block: add_87
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: rsqrt_16
Overloadpacket: aten.rsqrt
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.rsqrt.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf135, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_16, add_87}
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf135, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_16, add_87, rsqrt_16}
  )
))
Except block: rsqrt_16
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: sub_16
Overloadpacket: aten.sub
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.sub.Tensor,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf132,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf131', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf124, i3 + 7 * i2 + 49 * i1)
          tmp1 = ops.load(buf126, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf127, i1)
          tmp4 = ops.index_expr(49, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_47, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_48, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 512, 7, 7],
      origins={relu_13, add_85, mul_111, add_82, rsqrt_15, sub_15, ...
    )), InputBuffer(name='primals_49', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_16}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf134', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf133, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_16}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf132, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf134, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 512, 7, 7],
    origins={sub_16}
  )
))
Except block: sub_16
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_112
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf132, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf134, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 512, 7, 7],
    origins={sub_16}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf135, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_16, add_87, rsqrt_16}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf132, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf134, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf135, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 512, 7, 7],
    origins={var_mean_16, sub_16, add_87, mul_112, rsqrt_16}
  )
))
Except block: mul_112
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_48
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf134', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf133, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_16}
  ))
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf134', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf133, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_16}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[512], stride=[1]),
    origins=
  )
)
Except block: squeeze_48
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_49
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf135, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_16, add_87, rsqrt_16}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf136', layout=FlexibleLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf135, i0)
      tmp1 = ops.index_expr(49, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1e-05, torch.float32)
      tmp4 = tmp2 + tmp3
      tmp5 = ops.rsqrt(tmp4)
      return tmp5
  ,
  ranges=(512,),
  origins={rsqrt_16, var_mean_16, add_87, squeeze_49}
)), 'origins': {rsqrt_16, var_mean_16, add_87, squeeze_49}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf136', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf135, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(512,),
    origins={rsqrt_16, var_mean_16, add_87, squeeze_49}
  ))
))
buf136
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_113
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf134', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf133, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_16}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[512], stride=[1]),
    origins=
  )
), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf134, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_113}
  )
))
Except block: mul_113
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_114
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_111', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_111, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_114}
  )
))
Except block: mul_114
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_88
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf134, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_113}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_111, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_114}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf137', layout=FlexibleLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf134, i0)
      tmp1 = ops.constant(0.1, torch.float32)
      tmp2 = tmp0 * tmp1
      tmp3 = ops.load(primals_111, i0)
      tmp4 = ops.constant(0.9, torch.float32)
      tmp5 = tmp3 * tmp4
      tmp6 = tmp2 + tmp5
      return tmp6
  ,
  ranges=[512],
  origins={add_88, mul_114, mul_113}
)), 'origins': {add_88, mul_114, mul_113}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf137', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf134, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_111, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[512],
    origins={add_88, mul_114, mul_113}
  ))
))
buf137
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_50
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf135, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_16}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf135, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_16}
      )
    ),
    size=(512,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={var_mean_16, squeeze_50}
  )
)
Except block: squeeze_50
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_115
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf135, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_16}
      )
    ),
    size=(512,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={var_mean_16, squeeze_50}
  )
), 1.0208333333333333),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf135, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(512,),
    origins={mul_115}
  )
))
Except block: mul_115
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_116
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf135, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(512,),
    origins={mul_115}
  )
)), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf135, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(512,),
    origins={mul_115, mul_116}
  )
))
Except block: mul_116
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_117
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_112', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_112, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_117}
  )
))
Except block: mul_117
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_89
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf135, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(512,),
    origins={mul_115, mul_116}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_112, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_117}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf138', layout=FlexibleLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf135, i0)
      tmp1 = ops.index_expr(49, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1.0208333333333333, torch.float32)
      tmp4 = tmp2 * tmp3
      tmp5 = ops.constant(0.1, torch.float32)
      tmp6 = tmp4 * tmp5
      tmp7 = ops.load(primals_112, i0)
      tmp8 = ops.constant(0.9, torch.float32)
      tmp9 = tmp7 * tmp8
      tmp10 = tmp6 + tmp9
      return tmp10
  ,
  ranges=(512,),
  origins={mul_115, add_89, mul_117, mul_116}
)), 'origins': {mul_115, add_89, mul_117, mul_116}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf138', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf135, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_112, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(512,),
    origins={mul_115, add_89, mul_117, mul_116}
  ))
))
buf138
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_64
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_50', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_50', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_64
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_65
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_50', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_50', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_65
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_66
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_51', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_51', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_66
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_67
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_51', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_51', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_67
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_118
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf132, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf134, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf135, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 512, 7, 7],
    origins={var_mean_16, sub_16, add_87, mul_112, rsqrt_16}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_50', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf132, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf134, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf135, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_50, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 512, 7, 7],
    origins={mul_118, var_mean_16, sub_16, add_87, mul_112, rsqrt...
  )
))
Except block: mul_118
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_90
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf132, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf134, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf135, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_50, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 512, 7, 7],
    origins={mul_118, var_mean_16, sub_16, add_87, mul_112, rsqrt...
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_51', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf132, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf134, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf135, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_50, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_51, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 512, 7, 7],
    origins={mul_118, var_mean_16, sub_16, add_87, mul_112, add_9...
  )
))
Except block: add_90
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: convolution_17
Overloadpacket: aten.convolution
Flop count: 231211008
Case 2: call function, n.target in layout_constraints

Call_function in graph------------------
Target: aten.convolution.default,
Args: [TensorBox(StorageBox(
  ComputedBuffer(name='buf123', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf118, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf119, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_44, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_45, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_98, add_80, var_mean_14, add_79, add_76, relu_12...
  ))
)), TensorBox(StorageBox(
  InputBuffer(name='primals_52', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1]))
)), None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1],
Kwargs: {}...
Before calling out


Not realizing StorageBox with name: buf123

Not realizing StorageBox with name: primals_52
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf139,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf123', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf118, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf119, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_44, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_45, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 256, 14, 14],
      origins={mul_98, add_80, var_mean_14, add_79, add_76, relu_12...
    )), InputBuffer(name='primals_52', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (0, 0), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_17}
  )
))
buf139
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_91
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_116', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
)), 1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_116, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_91}
  )
))
Except block: add_91
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: var_mean_17
Overloadpacket: aten.var_mean
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.var_mean.correction,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf139,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf123', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf118, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf119, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_44, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_45, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 256, 14, 14],
      origins={mul_98, add_80, var_mean_14, add_79, add_76, relu_12...
    )), InputBuffer(name='primals_52', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (0, 0), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_17}
  )
)), [0, 2, 3]),
Kwargs: {'correction': 0, 'keepdim': True}...
Before calling out


Realized StorageBox:
{'data': ComputedBuffer(name='buf140', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf139, r2 + 7 * r1 + 49 * i1)
      return tmp0
  ,
  ranges=[1, 512, 1, 1],
  reduction_ranges=[1, 7, 7],
  reduction_type=sum,
  origins={var_mean_17}
)), 'origins': {var_mean_17}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf141', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, _, _ = index
      tmp0 = ops.load(buf140, i1)
      tmp1 = ops.index_expr(49, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=[1, 512, 1, 1],
  origins={var_mean_17}
)), 'origins': {var_mean_17}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf142', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf139, r2 + 7 * r1 + 49 * i1)
      tmp1 = ops.load(buf141, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.square(tmp2)
      return tmp3
  ,
  ranges=[1, 512, 1, 1],
  reduction_ranges=[1, 7, 7],
  reduction_type=sum,
  origins={var_mean_17}
)), 'origins': {var_mean_17}}
End call_function in graph-----------

Result after run_node: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf142, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_17}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf141', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf140, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_17}
  ))
)))
Except block: var_mean_17
buf141
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_36
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf142, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_17}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf141', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf140, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_17}
  ))
))), 0),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf142, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_17}
  )
))

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf142, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_17}
  )
))
Except block: getitem_36
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_37
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf142, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_17}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf141', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf140, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_17}
  ))
))), 1),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  ComputedBuffer(name='buf141', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf140, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_17}
  ))
))

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf141', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf140, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_17}
  ))
))
buf141
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_92
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf142, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_17}
  )
)), 1e-05),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf142, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 512, 1, 1],
    origins={add_92, var_mean_17}
  )
))
Except block: add_92
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: rsqrt_17
Overloadpacket: aten.rsqrt
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.rsqrt.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf142, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 512, 1, 1],
    origins={add_92, var_mean_17}
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf142, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 512, 1, 1],
    origins={add_92, var_mean_17, rsqrt_17}
  )
))
Except block: rsqrt_17
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: sub_17
Overloadpacket: aten.sub
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.sub.Tensor,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf139,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf123', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf118, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf119, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_44, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_45, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 256, 14, 14],
      origins={mul_98, add_80, var_mean_14, add_79, add_76, relu_12...
    )), InputBuffer(name='primals_52', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (0, 0), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_17}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf141', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf140, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_17}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf139, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf141, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 512, 7, 7],
    origins={sub_17}
  )
))
Except block: sub_17
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_119
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf139, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf141, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 512, 7, 7],
    origins={sub_17}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf142, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 512, 1, 1],
    origins={add_92, var_mean_17, rsqrt_17}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf139, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf141, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf142, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 512, 7, 7],
    origins={add_92, var_mean_17, sub_17, rsqrt_17, mul_119}
  )
))
Except block: mul_119
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_51
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf141', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf140, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_17}
  ))
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf141', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf140, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_17}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[512], stride=[1]),
    origins=
  )
)
Except block: squeeze_51
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_52
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf142, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 512, 1, 1],
    origins={add_92, var_mean_17, rsqrt_17}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf143', layout=FlexibleLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf142, i0)
      tmp1 = ops.index_expr(49, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1e-05, torch.float32)
      tmp4 = tmp2 + tmp3
      tmp5 = ops.rsqrt(tmp4)
      return tmp5
  ,
  ranges=(512,),
  origins={add_92, var_mean_17, squeeze_52, rsqrt_17}
)), 'origins': {add_92, var_mean_17, squeeze_52, rsqrt_17}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf143', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf142, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(512,),
    origins={add_92, var_mean_17, squeeze_52, rsqrt_17}
  ))
))
buf143
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_120
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf141', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf140, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_17}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[512], stride=[1]),
    origins=
  )
), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf141, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_120}
  )
))
Except block: mul_120
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_121
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_114', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_114, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_121}
  )
))
Except block: mul_121
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_93
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf141, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_120}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_114, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_121}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf144', layout=FlexibleLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf141, i0)
      tmp1 = ops.constant(0.1, torch.float32)
      tmp2 = tmp0 * tmp1
      tmp3 = ops.load(primals_114, i0)
      tmp4 = ops.constant(0.9, torch.float32)
      tmp5 = tmp3 * tmp4
      tmp6 = tmp2 + tmp5
      return tmp6
  ,
  ranges=[512],
  origins={add_93, mul_121, mul_120}
)), 'origins': {add_93, mul_121, mul_120}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf144', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf141, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_114, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[512],
    origins={add_93, mul_121, mul_120}
  ))
))
buf144
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_53
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf142, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_17}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf142, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_17}
      )
    ),
    size=(512,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={var_mean_17, squeeze_53}
  )
)
Except block: squeeze_53
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_122
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf142, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_17}
      )
    ),
    size=(512,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={var_mean_17, squeeze_53}
  )
), 1.0208333333333333),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf142, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(512,),
    origins={mul_122}
  )
))
Except block: mul_122
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_123
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf142, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(512,),
    origins={mul_122}
  )
)), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf142, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(512,),
    origins={mul_123, mul_122}
  )
))
Except block: mul_123
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_124
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_115', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_115, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_124}
  )
))
Except block: mul_124
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_94
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf142, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(512,),
    origins={mul_123, mul_122}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_115, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_124}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf145', layout=FlexibleLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf142, i0)
      tmp1 = ops.index_expr(49, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1.0208333333333333, torch.float32)
      tmp4 = tmp2 * tmp3
      tmp5 = ops.constant(0.1, torch.float32)
      tmp6 = tmp4 * tmp5
      tmp7 = ops.load(primals_115, i0)
      tmp8 = ops.constant(0.9, torch.float32)
      tmp9 = tmp7 * tmp8
      tmp10 = tmp6 + tmp9
      return tmp10
  ,
  ranges=(512,),
  origins={add_94, mul_123, mul_124, mul_122}
)), 'origins': {add_94, mul_123, mul_124, mul_122}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf145', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf142, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_115, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(512,),
    origins={add_94, mul_123, mul_124, mul_122}
  ))
))
buf145
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_68
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_53', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_53', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_68
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_69
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_53', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_53', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_69
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_70
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_54', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_54', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_70
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_71
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_54', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_54', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_71
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_125
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf139, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf141, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf142, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 512, 7, 7],
    origins={add_92, var_mean_17, sub_17, rsqrt_17, mul_119}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_53', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf139, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf141, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf142, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_53, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 512, 7, 7],
    origins={add_92, var_mean_17, sub_17, rsqrt_17, mul_119, mul_...
  )
))
Except block: mul_125
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_95
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf139, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf141, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf142, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_53, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 512, 7, 7],
    origins={add_92, var_mean_17, sub_17, rsqrt_17, mul_119, mul_...
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_54', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf139, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf141, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf142, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_53, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_54, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 512, 7, 7],
    origins={add_92, var_mean_17, sub_17, rsqrt_17, mul_119, mul_...
  )
))
Except block: add_95
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_96
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf132, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf134, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf135, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_50, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_51, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 512, 7, 7],
    origins={mul_118, var_mean_16, sub_16, add_87, mul_112, add_9...
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf139, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf141, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf142, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_53, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_54, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 512, 7, 7],
    origins={add_92, var_mean_17, sub_17, rsqrt_17, mul_119, mul_...
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Realized StorageBox:
{'data': ComputedBuffer(name='buf146', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf132, i3 + 7 * i2 + 49 * i1)
      tmp1 = ops.load(buf134, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf135, i1)
      tmp4 = ops.index_expr(49, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_50, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_51, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.load(buf139, i3 + 7 * i2 + 49 * i1)
      tmp15 = ops.load(buf141, i1)
      tmp16 = tmp14 - tmp15
      tmp17 = ops.load(buf142, i1)
      tmp18 = ops.index_expr(49, torch.float32)
      tmp19 = tmp17 / tmp18
      tmp20 = ops.constant(1e-05, torch.float32)
      tmp21 = tmp19 + tmp20
      tmp22 = ops.rsqrt(tmp21)
      tmp23 = tmp16 * tmp22
      tmp24 = ops.load(primals_53, i1)
      tmp25 = tmp23 * tmp24
      tmp26 = ops.load(primals_54, i1)
      tmp27 = tmp25 + tmp26
      tmp28 = tmp13 + tmp27
      return tmp28
  ,
  ranges=[1, 512, 7, 7],
  origins={add_92, var_mean_17, sub_17, var_mean_16, mul_112, a...
)), 'origins': {add_92, var_mean_17, sub_17, var_mean_16, mul_112, add_90, mul_125, rsqrt_16, mul_118, sub_16, add_87, rsqrt_17, add_96, mul_119, add_95}, '__num_reads_cache': 10}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf146', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf132, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf134, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf135, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_50, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_51, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf139, i3 + 7 * i2 + 49 * i1)
        tmp15 = ops.load(buf141, i1)
        tmp16 = tmp14 - tmp15
        tmp17 = ops.load(buf142, i1)
        tmp18 = ops.index_expr(49, torch.float32)
        tmp19 = tmp17 / tmp18
        tmp20 = ops.constant(1e-05, torch.float32)
        tmp21 = tmp19 + tmp20
        tmp22 = ops.rsqrt(tmp21)
        tmp23 = tmp16 * tmp22
        tmp24 = ops.load(primals_53, i1)
        tmp25 = tmp23 * tmp24
        tmp26 = ops.load(primals_54, i1)
        tmp27 = tmp25 + tmp26
        tmp28 = tmp13 + tmp27
        return tmp28
    ,
    ranges=[1, 512, 7, 7],
    origins={add_92, var_mean_17, sub_17, var_mean_16, mul_112, a...
  ))
))
buf146
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: relu_14
Overloadpacket: aten.relu
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.relu.default,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf146', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf132, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf134, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf135, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_50, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_51, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf139, i3 + 7 * i2 + 49 * i1)
        tmp15 = ops.load(buf141, i1)
        tmp16 = tmp14 - tmp15
        tmp17 = ops.load(buf142, i1)
        tmp18 = ops.index_expr(49, torch.float32)
        tmp19 = tmp17 / tmp18
        tmp20 = ops.constant(1e-05, torch.float32)
        tmp21 = tmp19 + tmp20
        tmp22 = ops.rsqrt(tmp21)
        tmp23 = tmp16 * tmp22
        tmp24 = ops.load(primals_53, i1)
        tmp25 = tmp23 * tmp24
        tmp26 = ops.load(primals_54, i1)
        tmp27 = tmp25 + tmp26
        tmp28 = tmp13 + tmp27
        return tmp28
    ,
    ranges=[1, 512, 7, 7],
    origins={add_92, var_mean_17, sub_17, var_mean_16, mul_112, a...
  ))
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf147', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf146, i3 + 7 * i2 + 49 * i1)
      tmp1 = ops.relu(tmp0)
      return tmp1
  ,
  ranges=[1, 512, 7, 7],
  origins={relu_14}
)), 'origins': {relu_14}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf147', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf146, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.relu(tmp0)
        return tmp1
    ,
    ranges=[1, 512, 7, 7],
    origins={relu_14}
  ))
))
buf147
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: convolution_18
Overloadpacket: aten.convolution
Flop count: 231211008
Case 2: call function, n.target in layout_constraints

Call_function in graph------------------
Target: aten.convolution.default,
Args: [TensorBox(StorageBox(
  ComputedBuffer(name='buf147', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf146, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.relu(tmp0)
        return tmp1
    ,
    ranges=[1, 512, 7, 7],
    origins={relu_14}
  ))
)), TensorBox(StorageBox(
  InputBuffer(name='primals_55', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))
)), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1],
Kwargs: {}...
Before calling out


Not realizing StorageBox with name: buf147

Not realizing StorageBox with name: primals_55
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf148,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf147', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf146, i3 + 7 * i2 + 49 * i1)
          tmp1 = ops.relu(tmp0)
          return tmp1
      ,
      ranges=[1, 512, 7, 7],
      origins={relu_14}
    )), InputBuffer(name='primals_55', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_18}
  )
))
buf148
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_97
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_119', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
)), 1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_119, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_97}
  )
))
Except block: add_97
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: var_mean_18
Overloadpacket: aten.var_mean
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.var_mean.correction,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf148,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf147', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf146, i3 + 7 * i2 + 49 * i1)
          tmp1 = ops.relu(tmp0)
          return tmp1
      ,
      ranges=[1, 512, 7, 7],
      origins={relu_14}
    )), InputBuffer(name='primals_55', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_18}
  )
)), [0, 2, 3]),
Kwargs: {'correction': 0, 'keepdim': True}...
Before calling out


Realized StorageBox:
{'data': ComputedBuffer(name='buf149', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf148, r2 + 7 * r1 + 49 * i1)
      return tmp0
  ,
  ranges=[1, 512, 1, 1],
  reduction_ranges=[1, 7, 7],
  reduction_type=sum,
  origins={var_mean_18}
)), 'origins': {var_mean_18}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf150', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, _, _ = index
      tmp0 = ops.load(buf149, i1)
      tmp1 = ops.index_expr(49, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=[1, 512, 1, 1],
  origins={var_mean_18}
)), 'origins': {var_mean_18}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf151', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf148, r2 + 7 * r1 + 49 * i1)
      tmp1 = ops.load(buf150, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.square(tmp2)
      return tmp3
  ,
  ranges=[1, 512, 1, 1],
  reduction_ranges=[1, 7, 7],
  reduction_type=sum,
  origins={var_mean_18}
)), 'origins': {var_mean_18}}
End call_function in graph-----------

Result after run_node: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf151, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_18}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf150', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf149, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_18}
  ))
)))
Except block: var_mean_18
buf150
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_38
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf151, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_18}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf150', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf149, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_18}
  ))
))), 0),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf151, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_18}
  )
))

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf151, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_18}
  )
))
Except block: getitem_38
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_39
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf151, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_18}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf150', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf149, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_18}
  ))
))), 1),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  ComputedBuffer(name='buf150', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf149, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_18}
  ))
))

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf150', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf149, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_18}
  ))
))
buf150
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_98
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf151, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_18}
  )
)), 1e-05),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf151, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 512, 1, 1],
    origins={add_98, var_mean_18}
  )
))
Except block: add_98
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: rsqrt_18
Overloadpacket: aten.rsqrt
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.rsqrt.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf151, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 512, 1, 1],
    origins={add_98, var_mean_18}
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf151, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 512, 1, 1],
    origins={add_98, rsqrt_18, var_mean_18}
  )
))
Except block: rsqrt_18
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: sub_18
Overloadpacket: aten.sub
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.sub.Tensor,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf148,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf147', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf146, i3 + 7 * i2 + 49 * i1)
          tmp1 = ops.relu(tmp0)
          return tmp1
      ,
      ranges=[1, 512, 7, 7],
      origins={relu_14}
    )), InputBuffer(name='primals_55', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_18}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf150', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf149, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_18}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf148, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf150, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 512, 7, 7],
    origins={sub_18}
  )
))
Except block: sub_18
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_126
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf148, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf150, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 512, 7, 7],
    origins={sub_18}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf151, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 512, 1, 1],
    origins={add_98, rsqrt_18, var_mean_18}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf148, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf150, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf151, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 512, 7, 7],
    origins={add_98, sub_18, rsqrt_18, mul_126, var_mean_18}
  )
))
Except block: mul_126
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_54
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf150', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf149, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_18}
  ))
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf150', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf149, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_18}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[512], stride=[1]),
    origins=
  )
)
Except block: squeeze_54
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_55
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf151, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 512, 1, 1],
    origins={add_98, rsqrt_18, var_mean_18}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf152', layout=FlexibleLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf151, i0)
      tmp1 = ops.index_expr(49, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1e-05, torch.float32)
      tmp4 = tmp2 + tmp3
      tmp5 = ops.rsqrt(tmp4)
      return tmp5
  ,
  ranges=(512,),
  origins={squeeze_55, add_98, var_mean_18, rsqrt_18}
)), 'origins': {squeeze_55, add_98, var_mean_18, rsqrt_18}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf152', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf151, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(512,),
    origins={squeeze_55, add_98, var_mean_18, rsqrt_18}
  ))
))
buf152
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_127
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf150', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf149, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_18}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[512], stride=[1]),
    origins=
  )
), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf150, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_127}
  )
))
Except block: mul_127
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_128
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_117', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_117, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_128}
  )
))
Except block: mul_128
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_99
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf150, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_127}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_117, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_128}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf153', layout=FlexibleLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf150, i0)
      tmp1 = ops.constant(0.1, torch.float32)
      tmp2 = tmp0 * tmp1
      tmp3 = ops.load(primals_117, i0)
      tmp4 = ops.constant(0.9, torch.float32)
      tmp5 = tmp3 * tmp4
      tmp6 = tmp2 + tmp5
      return tmp6
  ,
  ranges=[512],
  origins={mul_128, add_99, mul_127}
)), 'origins': {mul_128, add_99, mul_127}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf153', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf150, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_117, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[512],
    origins={mul_128, add_99, mul_127}
  ))
))
buf153
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_56
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf151, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_18}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf151, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_18}
      )
    ),
    size=(512,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_56, var_mean_18}
  )
)
Except block: squeeze_56
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_129
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf151, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_18}
      )
    ),
    size=(512,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_56, var_mean_18}
  )
), 1.0208333333333333),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf151, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(512,),
    origins={mul_129}
  )
))
Except block: mul_129
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_130
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf151, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(512,),
    origins={mul_129}
  )
)), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf151, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(512,),
    origins={mul_130, mul_129}
  )
))
Except block: mul_130
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_131
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_118', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_118, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_131}
  )
))
Except block: mul_131
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_100
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf151, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(512,),
    origins={mul_130, mul_129}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_118, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_131}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf154', layout=FlexibleLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf151, i0)
      tmp1 = ops.index_expr(49, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1.0208333333333333, torch.float32)
      tmp4 = tmp2 * tmp3
      tmp5 = ops.constant(0.1, torch.float32)
      tmp6 = tmp4 * tmp5
      tmp7 = ops.load(primals_118, i0)
      tmp8 = ops.constant(0.9, torch.float32)
      tmp9 = tmp7 * tmp8
      tmp10 = tmp6 + tmp9
      return tmp10
  ,
  ranges=(512,),
  origins={mul_130, add_100, mul_131, mul_129}
)), 'origins': {mul_130, add_100, mul_131, mul_129}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf154', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf151, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_118, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(512,),
    origins={mul_130, add_100, mul_131, mul_129}
  ))
))
buf154
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_72
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_56', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_56', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_72
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_73
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_56', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_56', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_73
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_74
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_57', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_57', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_74
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_75
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_57', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_57', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_75
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_132
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf148, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf150, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf151, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 512, 7, 7],
    origins={add_98, sub_18, rsqrt_18, mul_126, var_mean_18}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_56', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf148, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf150, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf151, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_56, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 512, 7, 7],
    origins={add_98, mul_132, sub_18, rsqrt_18, var_mean_18, mul_...
  )
))
Except block: mul_132
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_101
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf148, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf150, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf151, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_56, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 512, 7, 7],
    origins={add_98, mul_132, sub_18, rsqrt_18, var_mean_18, mul_...
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_57', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf148, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf150, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf151, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_56, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_57, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 512, 7, 7],
    origins={add_98, sub_18, mul_132, add_101, rsqrt_18, var_mean...
  )
))
Except block: add_101
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: relu_15
Overloadpacket: aten.relu
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.relu.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf148, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf150, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf151, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_56, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_57, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 512, 7, 7],
    origins={add_98, sub_18, mul_132, add_101, rsqrt_18, var_mean...
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf155', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf148, i3 + 7 * i2 + 49 * i1)
      tmp1 = ops.load(buf150, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf151, i1)
      tmp4 = ops.index_expr(49, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_56, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_57, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.relu(tmp13)
      return tmp14
  ,
  ranges=[1, 512, 7, 7],
  origins={sub_18, add_101, rsqrt_18, relu_15, add_98, mul_132,...
)), 'origins': {sub_18, add_101, rsqrt_18, relu_15, add_98, mul_132, mul_126, var_mean_18}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf155', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf148, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf150, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf151, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_56, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_57, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 512, 7, 7],
    origins={sub_18, add_101, rsqrt_18, relu_15, add_98, mul_132,...
  ))
))
buf155
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: convolution_19
Overloadpacket: aten.convolution
Flop count: 231211008
Case 2: call function, n.target in layout_constraints

Call_function in graph------------------
Target: aten.convolution.default,
Args: [TensorBox(StorageBox(
  ComputedBuffer(name='buf155', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf148, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf150, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf151, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_56, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_57, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 512, 7, 7],
    origins={sub_18, add_101, rsqrt_18, relu_15, add_98, mul_132,...
  ))
)), TensorBox(StorageBox(
  InputBuffer(name='primals_58', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))
)), None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1],
Kwargs: {}...
Before calling out


Not realizing StorageBox with name: buf155

Not realizing StorageBox with name: primals_58
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf156,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf155', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf148, i3 + 7 * i2 + 49 * i1)
          tmp1 = ops.load(buf150, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf151, i1)
          tmp4 = ops.index_expr(49, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_56, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_57, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 512, 7, 7],
      origins={sub_18, add_101, rsqrt_18, relu_15, add_98, mul_132,...
    )), InputBuffer(name='primals_58', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_19}
  )
))
buf156
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_102
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_122', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]))
)), 1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_122, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_102}
  )
))
Except block: add_102
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: var_mean_19
Overloadpacket: aten.var_mean
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.var_mean.correction,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf156,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf155', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf148, i3 + 7 * i2 + 49 * i1)
          tmp1 = ops.load(buf150, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf151, i1)
          tmp4 = ops.index_expr(49, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_56, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_57, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 512, 7, 7],
      origins={sub_18, add_101, rsqrt_18, relu_15, add_98, mul_132,...
    )), InputBuffer(name='primals_58', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_19}
  )
)), [0, 2, 3]),
Kwargs: {'correction': 0, 'keepdim': True}...
Before calling out


Realized StorageBox:
{'data': ComputedBuffer(name='buf157', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf156, r2 + 7 * r1 + 49 * i1)
      return tmp0
  ,
  ranges=[1, 512, 1, 1],
  reduction_ranges=[1, 7, 7],
  reduction_type=sum,
  origins={var_mean_19}
)), 'origins': {var_mean_19}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf158', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, _, _ = index
      tmp0 = ops.load(buf157, i1)
      tmp1 = ops.index_expr(49, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=[1, 512, 1, 1],
  origins={var_mean_19}
)), 'origins': {var_mean_19}}

Realized StorageBox:
{'data': ComputedBuffer(name='buf159', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      _, r1, r2 = rindex
      tmp0 = ops.load(buf156, r2 + 7 * r1 + 49 * i1)
      tmp1 = ops.load(buf158, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.square(tmp2)
      return tmp3
  ,
  ranges=[1, 512, 1, 1],
  reduction_ranges=[1, 7, 7],
  reduction_type=sum,
  origins={var_mean_19}
)), 'origins': {var_mean_19}}
End call_function in graph-----------

Result after run_node: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf159, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_19}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf158', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf157, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_19}
  ))
)))
Except block: var_mean_19
buf158
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_40
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf159, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_19}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf158', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf157, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_19}
  ))
))), 0),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf159, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_19}
  )
))

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf159, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_19}
  )
))
Except block: getitem_40
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: getitem_41
No overload packets
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: <built-in function getitem>,
Args: ((TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf159, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_19}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf158', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf157, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_19}
  ))
))), 1),
Kwargs: {}...
getitem
TensorBox(StorageBox(
  ComputedBuffer(name='buf158', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf157, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_19}
  ))
))

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf158', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf157, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_19}
  ))
))
buf158
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_103
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf159, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_19}
  )
)), 1e-05),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf159, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_19, add_103}
  )
))
Except block: add_103
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: rsqrt_19
Overloadpacket: aten.rsqrt
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.rsqrt.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf159, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        return tmp4
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_19, add_103}
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf159, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 512, 1, 1],
    origins={add_103, var_mean_19, rsqrt_19}
  )
))
Except block: rsqrt_19
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: sub_19
Overloadpacket: aten.sub
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.sub.Tensor,
Args: (TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf156,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf155', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf148, i3 + 7 * i2 + 49 * i1)
          tmp1 = ops.load(buf150, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf151, i1)
          tmp4 = ops.index_expr(49, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_56, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_57, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 512, 7, 7],
      origins={sub_18, add_101, rsqrt_18, relu_15, add_98, mul_132,...
    )), InputBuffer(name='primals_58', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_19}
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf158', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf157, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_19}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf156, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf158, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 512, 7, 7],
    origins={sub_19}
  )
))
Except block: sub_19
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_133
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf156, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf158, i1)
        tmp2 = tmp0 - tmp1
        return tmp2
    ,
    ranges=[1, 512, 7, 7],
    origins={sub_19}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf159, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 512, 1, 1],
    origins={add_103, var_mean_19, rsqrt_19}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf156, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf158, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf159, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 512, 7, 7],
    origins={var_mean_19, add_103, sub_19, mul_133, rsqrt_19}
  )
))
Except block: mul_133
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_57
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf158', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf157, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_19}
  ))
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf158', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf157, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_19}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[512], stride=[1]),
    origins=
  )
)
Except block: squeeze_57
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_58
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf159, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=[1, 512, 1, 1],
    origins={add_103, var_mean_19, rsqrt_19}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf160', layout=FlexibleLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf159, i0)
      tmp1 = ops.index_expr(49, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1e-05, torch.float32)
      tmp4 = tmp2 + tmp3
      tmp5 = ops.rsqrt(tmp4)
      return tmp5
  ,
  ranges=(512,),
  origins={add_103, var_mean_19, squeeze_58, rsqrt_19}
)), 'origins': {add_103, var_mean_19, squeeze_58, rsqrt_19}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf160', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf159, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(512,),
    origins={add_103, var_mean_19, squeeze_58, rsqrt_19}
  ))
))
buf160
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_134
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf158', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf157, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_19}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[512], stride=[1]),
    origins=
  )
), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf158, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_134}
  )
))
Except block: mul_134
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_135
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_120', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_120, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_135}
  )
))
Except block: mul_135
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_104
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf158, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_134}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_120, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_135}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf161', layout=FlexibleLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf158, i0)
      tmp1 = ops.constant(0.1, torch.float32)
      tmp2 = tmp0 * tmp1
      tmp3 = ops.load(primals_120, i0)
      tmp4 = ops.constant(0.9, torch.float32)
      tmp5 = tmp3 * tmp4
      tmp6 = tmp2 + tmp5
      return tmp6
  ,
  ranges=[512],
  origins={mul_135, add_104, mul_134}
)), 'origins': {mul_135, add_104, mul_134}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf161', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf158, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_120, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[512],
    origins={mul_135, add_104, mul_134}
  ))
))
buf161
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: squeeze_59
Overloadpacket: aten.squeeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.squeeze.dims,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf159, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={var_mean_19}
  )
)), [0, 2, 3]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf159, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_19}
      )
    ),
    size=(512,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_59, var_mean_19}
  )
)
Except block: squeeze_59
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_136
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(
  View(
    StorageBox(
      Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf159, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_19}
      )
    ),
    size=(512,),
    reindex=lambda i0: [0, i0, 0, 0],
    origins={squeeze_59, var_mean_19}
  )
), 1.0208333333333333),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf159, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(512,),
    origins={mul_136}
  )
))
Except block: mul_136
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_137
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf159, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        return tmp4
    ,
    ranges=(512,),
    origins={mul_136}
  )
)), 0.1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf159, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(512,),
    origins={mul_137, mul_136}
  )
))
Except block: mul_137
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_138
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_121', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)), 0.9),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_121, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_138}
  )
))
Except block: mul_138
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_105
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf159, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        return tmp6
    ,
    ranges=(512,),
    origins={mul_137, mul_136}
  )
)), TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(primals_121, i0)
        tmp1 = ops.constant(0.9, torch.float32)
        tmp2 = tmp0 * tmp1
        return tmp2
    ,
    ranges=[512],
    origins={mul_138}
  )
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf162', layout=FlexibleLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      i0 = index
      tmp0 = ops.load(buf159, i0)
      tmp1 = ops.index_expr(49, torch.float32)
      tmp2 = tmp0 / tmp1
      tmp3 = ops.constant(1.0208333333333333, torch.float32)
      tmp4 = tmp2 * tmp3
      tmp5 = ops.constant(0.1, torch.float32)
      tmp6 = tmp4 * tmp5
      tmp7 = ops.load(primals_121, i0)
      tmp8 = ops.constant(0.9, torch.float32)
      tmp9 = tmp7 * tmp8
      tmp10 = tmp6 + tmp9
      return tmp10
  ,
  ranges=(512,),
  origins={mul_137, add_105, mul_136, mul_138}
)), 'origins': {mul_137, add_105, mul_136, mul_138}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf162', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf159, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_121, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(512,),
    origins={mul_137, add_105, mul_136, mul_138}
  ))
))
buf162
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_76
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_59', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_59', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_76
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_77
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_59', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_59', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_77
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_78
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_60', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_60', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 1]),
    origins=
  )
)
Except block: unsqueeze_78
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_79
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_60', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 1]),
    origins=
  )
), -1),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_60', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_79
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mul_139
Overloadpacket: aten.mul
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mul.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf156, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf158, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf159, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        return tmp9
    ,
    ranges=[1, 512, 7, 7],
    origins={var_mean_19, add_103, sub_19, mul_133, rsqrt_19}
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_59', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf156, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf158, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf159, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_59, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 512, 7, 7],
    origins={mul_139, var_mean_19, add_103, sub_19, mul_133, rsqr...
  )
))
Except block: mul_139
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_106
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf156, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf158, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf159, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_59, i1)
        tmp11 = tmp9 * tmp10
        return tmp11
    ,
    ranges=[1, 512, 7, 7],
    origins={mul_139, var_mean_19, add_103, sub_19, mul_133, rsqr...
  )
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_60', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1, 1], stride=[1, 1, 1]),
    origins=
  )
)),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf156, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf158, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf159, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_59, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_60, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 512, 7, 7],
    origins={var_mean_19, mul_139, add_103, sub_19, mul_133, rsqr...
  )
))
Except block: add_106
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: add_107
Overloadpacket: aten.add
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.add.Tensor,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf156, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf158, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf159, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_59, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_60, i1)
        tmp13 = tmp11 + tmp12
        return tmp13
    ,
    ranges=[1, 512, 7, 7],
    origins={var_mean_19, mul_139, add_103, sub_19, mul_133, rsqr...
  )
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf147', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf146, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.relu(tmp0)
        return tmp1
    ,
    ranges=[1, 512, 7, 7],
    origins={relu_14}
  ))
))),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf156, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf158, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf159, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_59, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_60, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf147, i3 + 7 * i2 + 49 * i1)
        tmp15 = tmp13 + tmp14
        return tmp15
    ,
    ranges=[1, 512, 7, 7],
    origins={var_mean_19, add_103, add_107, mul_139, sub_19, mul_...
  )
))
Except block: add_107
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: relu_16
Overloadpacket: aten.relu
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.relu.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf156, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf158, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf159, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_59, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_60, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf147, i3 + 7 * i2 + 49 * i1)
        tmp15 = tmp13 + tmp14
        return tmp15
    ,
    ranges=[1, 512, 7, 7],
    origins={var_mean_19, add_103, add_107, mul_139, sub_19, mul_...
  )
)),),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Realized StorageBox:
{'data': ComputedBuffer(name='buf163', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf156, i3 + 7 * i2 + 49 * i1)
      tmp1 = ops.load(buf158, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf159, i1)
      tmp4 = ops.index_expr(49, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_59, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_60, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.load(buf147, i3 + 7 * i2 + 49 * i1)
      tmp15 = tmp13 + tmp14
      tmp16 = ops.relu(tmp15)
      return tmp16
  ,
  ranges=[1, 512, 7, 7],
  origins={var_mean_19, add_103, relu_16, add_107, mul_139, sub...
)), 'origins': {var_mean_19, add_103, relu_16, add_107, mul_139, sub_19, mul_133, rsqrt_19, add_106}, '__num_reads_cache': 6}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf163', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf156, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf158, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf159, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_59, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_60, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf147, i3 + 7 * i2 + 49 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 512, 7, 7],
    origins={var_mean_19, add_103, relu_16, add_107, mul_139, sub...
  ))
))
buf163
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: mean
Overloadpacket: aten.mean
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.mean.dim,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf163', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf156, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf158, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf159, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_59, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_60, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf147, i3 + 7 * i2 + 49 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 512, 7, 7],
    origins={var_mean_19, add_103, relu_16, add_107, mul_139, sub...
  ))
)), [-1, -2], True),
Kwargs: {}...
Before calling out


Realized StorageBox:
{'data': ComputedBuffer(name='buf164', layout=FlexibleLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _ = index
      r0, r1 = rindex
      tmp0 = ops.load(buf163, r1 + 7 * r0 + 49 * i1)
      return tmp0
  ,
  ranges=[1, 512, 1, 1],
  reduction_ranges=[7, 7],
  reduction_type=sum,
  origins={mean}
)), 'origins': {mean}}
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf164, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={mean}
  )
))
Except block: mean
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: view
Overloadpacket: aten.view
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.view.default,
Args: (TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, _, _ = index
        tmp0 = ops.load(buf164, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=[1, 512, 1, 1],
    origins={mean}
  )
)), [1, 512]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf165', layout=FlexibleLayout('cuda', torch.float32, size=(1, 512), stride=[512, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1 = index
      tmp0 = ops.load(buf164, i1)
      tmp1 = ops.index_expr(49, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=(1, 512),
  origins={mean, view}
)), 'origins': {mean, view}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf165', layout=FixedLayout('cuda', torch.float32, size=(1, 512), stride=[512, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1 = index
        tmp0 = ops.load(buf164, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=(1, 512),
    origins={mean, view}
  ))
))
buf165
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: permute
Overloadpacket: aten.permute
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.permute.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_61', layout=FixedLayout('cuda', torch.float32, size=[1000, 512], stride=[512, 1]))
)), [1, 0]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_61', layout=FixedLayout('cuda', torch.float32, size=[1000, 512], stride=[512, 1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1000], stride=[1, 512]),
    origins=
  )
)
Except block: permute
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: addmm
Overloadpacket: aten.addmm
Flop count: 1024000
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.addmm.default,
Args: (TensorBox(StorageBox(
  InputBuffer(name='primals_62', layout=FixedLayout('cuda', torch.float32, size=[1000], stride=[1]))
)), TensorBox(StorageBox(
  ComputedBuffer(name='buf165', layout=FixedLayout('cuda', torch.float32, size=(1, 512), stride=[512, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1 = index
        tmp0 = ops.load(buf164, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=(1, 512),
    origins={mean, view}
  ))
)), TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_61', layout=FixedLayout('cuda', torch.float32, size=[1000, 512], stride=[512, 1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1000], stride=[1, 512]),
    origins=
  )
)),
Kwargs: {}...
Before calling out


IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf165', layout=FixedLayout('cuda', torch.float32, size=(1, 512), stride=[512, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1 = index
        tmp0 = ops.load(buf164, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=(1, 512),
    origins={mean, view}
  ))
)

Not realizing StorageBox with name: buf165
End call_function in graph-----------

Result after run_node: TensorBox(StorageBox(
  ExternKernelOut(
    name=buf166,
    layout=FixedLayout('cuda', torch.float32, size=[1, 1000], stride=[1000, 1]),
    inputs=[InputBuffer(name='primals_62', layout=FixedLayout('cuda', torch.float32, size=[1000], stride=[1])), ComputedBuffer(name='buf165', layout=FixedLayout('cuda', torch.float32, size=(1, 512), stride=[512, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1 = index
          tmp0 = ops.load(buf164, i1)
          tmp1 = ops.index_expr(49, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=(1, 512),
      origins={mean, view}
    )), ReinterpretView(
      StorageBox(
        InputBuffer(name='primals_61', layout=FixedLayout('cuda', torch.float32, size=[1000, 512], stride=[512, 1]))
      ),
      FixedLayout('cuda', torch.float32, size=[512, 1000], stride=[1, 512]),
      origins=
    )],
    constant_args=(),
    kwargs={'alpha': 1, 'beta': 1},
    output_view=None,
    origins={addmm}
  )
))
buf166
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: permute_1
Overloadpacket: aten.permute
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.permute.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_61', layout=FixedLayout('cuda', torch.float32, size=[1000, 512], stride=[512, 1]))
    ),
    FixedLayout('cuda', torch.float32, size=[512, 1000], stride=[1, 512]),
    origins=
  )
), [1, 0]),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_61', layout=FixedLayout('cuda', torch.float32, size=[1000, 512], stride=[512, 1]))
    ),
    FixedLayout('cuda', torch.float32, size=[1000, 512], stride=[512, 1]),
    origins=
  )
)
Except block: permute_1
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: le
Overloadpacket: aten.le
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.le.Scalar,
Args: (TensorBox(StorageBox(
  ComputedBuffer(name='buf163', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf156, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf158, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf159, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_59, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_60, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf147, i3 + 7 * i2 + 49 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 512, 7, 7],
    origins={var_mean_19, add_103, relu_16, add_107, mul_139, sub...
  ))
)), 0),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Ir.ExternKernel.copy_input pre-realize----------------------

Realized StorageBox:
{'data': ComputedBuffer(name='buf167', layout=FlexibleLayout('cuda', torch.bool, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
  'cuda',
  torch.bool,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf163, i3 + 7 * i2 + 49 * i1)
      tmp1 = ops.constant(0, torch.float32)
      tmp2 = tmp0 <= tmp1
      return tmp2
  ,
  ranges=[1, 512, 7, 7],
  origins={le}
)), 'origins': {le}}

Result after run_node: TensorBox(StorageBox(
  ComputedBuffer(name='buf167', layout=FixedLayout('cuda', torch.bool, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.bool,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf163, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.constant(0, torch.float32)
        tmp2 = tmp0 <= tmp1
        return tmp2
    ,
    ranges=[1, 512, 7, 7],
    origins={le}
  ))
))
buf167
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_80
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf158', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf157, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_19}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[512], stride=[1]),
    origins=
  )
), 0),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf158', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf157, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_19}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512], stride=[512, 1]),
    origins=
  )
)
Except block: unsqueeze_80
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_81
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf158', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf157, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_19}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512], stride=[512, 1]),
    origins=
  )
), 2),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf158', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf157, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_19}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_81
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_82
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf158', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf157, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_19}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 1]),
    origins=
  )
), 3),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf158', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf157, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_19}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_82
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_92
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf150', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf149, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_18}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[512], stride=[1]),
    origins=
  )
), 0),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf150', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf149, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_18}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512], stride=[512, 1]),
    origins=
  )
)
Except block: unsqueeze_92
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_93
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf150', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf149, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_18}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512], stride=[512, 1]),
    origins=
  )
), 2),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf150', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf149, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_18}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_93
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_94
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf150', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf149, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_18}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 1]),
    origins=
  )
), 3),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf150', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf149, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_18}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_94
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_104
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf141', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf140, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_17}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[512], stride=[1]),
    origins=
  )
), 0),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf141', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf140, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_17}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512], stride=[512, 1]),
    origins=
  )
)
Except block: unsqueeze_104
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_105
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf141', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf140, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_17}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512], stride=[512, 1]),
    origins=
  )
), 2),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf141', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf140, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_17}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_105
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_106
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf141', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf140, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_17}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 1]),
    origins=
  )
), 3),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf141', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf140, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_17}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_106
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_116
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf134', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf133, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_16}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[512], stride=[1]),
    origins=
  )
), 0),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf134', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf133, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_16}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512], stride=[512, 1]),
    origins=
  )
)
Except block: unsqueeze_116
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_117
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf134', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf133, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_16}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512], stride=[512, 1]),
    origins=
  )
), 2),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf134', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf133, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_16}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_117
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_118
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf134', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf133, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_16}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 1]),
    origins=
  )
), 3),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf134', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf133, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_16}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_118
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_128
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf126', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf125, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_15}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[512], stride=[1]),
    origins=
  )
), 0),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf126', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf125, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_15}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512], stride=[512, 1]),
    origins=
  )
)
Except block: unsqueeze_128
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_129
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf126', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf125, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_15}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512], stride=[512, 1]),
    origins=
  )
), 2),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf126', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf125, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_15}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_129
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_130
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf126', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf125, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_15}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 1]),
    origins=
  )
), 3),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf126', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf125, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_15}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_130
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_140
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf118', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf117, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_14}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[256], stride=[1]),
    origins=
  )
), 0),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf118', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf117, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_14}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256], stride=[256, 1]),
    origins=
  )
)
Except block: unsqueeze_140
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_141
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf118', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf117, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_14}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256], stride=[256, 1]),
    origins=
  )
), 2),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf118', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf117, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_14}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_141
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_142
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf118', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf117, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_14}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 1]),
    origins=
  )
), 3),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf118', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf117, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_14}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_142
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_152
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf110', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf109, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_13}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[256], stride=[1]),
    origins=
  )
), 0),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf110', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf109, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_13}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256], stride=[256, 1]),
    origins=
  )
)
Except block: unsqueeze_152
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_153
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf110', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf109, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_13}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256], stride=[256, 1]),
    origins=
  )
), 2),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf110', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf109, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_13}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_153
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_154
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf110', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf109, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_13}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 1]),
    origins=
  )
), 3),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf110', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf109, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_13}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_154
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_164
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf101', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf100, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_12}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[256], stride=[1]),
    origins=
  )
), 0),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf101', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf100, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_12}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256], stride=[256, 1]),
    origins=
  )
)
Except block: unsqueeze_164
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_165
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf101', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf100, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_12}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256], stride=[256, 1]),
    origins=
  )
), 2),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf101', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf100, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_12}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_165
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_166
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf101', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf100, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_12}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 1]),
    origins=
  )
), 3),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf101', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf100, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_12}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_166
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_176
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf94', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf93, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_11}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[256], stride=[1]),
    origins=
  )
), 0),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf94', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf93, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_11}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256], stride=[256, 1]),
    origins=
  )
)
Except block: unsqueeze_176
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_177
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf94', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf93, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_11}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256], stride=[256, 1]),
    origins=
  )
), 2),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf94', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf93, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_11}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_177
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_178
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf94', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf93, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_11}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 1]),
    origins=
  )
), 3),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf94', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf93, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_11}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_178
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_188
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf86', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf85, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_10}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[256], stride=[1]),
    origins=
  )
), 0),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf86', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf85, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_10}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256], stride=[256, 1]),
    origins=
  )
)
Except block: unsqueeze_188
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_189
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf86', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf85, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_10}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256], stride=[256, 1]),
    origins=
  )
), 2),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf86', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf85, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_10}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_189
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_190
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf86', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf85, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_10}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 1]),
    origins=
  )
), 3),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf86', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf85, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_10}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_190
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_200
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf78', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf77, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_9}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[128], stride=[1]),
    origins=
  )
), 0),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf78', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf77, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_9}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128], stride=[128, 1]),
    origins=
  )
)
Except block: unsqueeze_200
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_201
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf78', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf77, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_9}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128], stride=[128, 1]),
    origins=
  )
), 2),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf78', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf77, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_9}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_201
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_202
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf78', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf77, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_9}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 1]),
    origins=
  )
), 3),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf78', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf77, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_9}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_202
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_212
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf70', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf69, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_8}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[128], stride=[1]),
    origins=
  )
), 0),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf70', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf69, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_8}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128], stride=[128, 1]),
    origins=
  )
)
Except block: unsqueeze_212
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_213
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf70', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf69, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_8}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128], stride=[128, 1]),
    origins=
  )
), 2),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf70', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf69, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_8}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_213
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_214
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf70', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf69, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_8}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 1]),
    origins=
  )
), 3),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf70', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf69, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_8}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_214
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_224
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf61', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf60, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_7}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[128], stride=[1]),
    origins=
  )
), 0),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf61', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf60, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_7}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128], stride=[128, 1]),
    origins=
  )
)
Except block: unsqueeze_224
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_225
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf61', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf60, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_7}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128], stride=[128, 1]),
    origins=
  )
), 2),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf61', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf60, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_7}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_225
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_226
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf61', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf60, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_7}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 1]),
    origins=
  )
), 3),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf61', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf60, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_7}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_226
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_236
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf54', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf53, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_6}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[128], stride=[1]),
    origins=
  )
), 0),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf54', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf53, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_6}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128], stride=[128, 1]),
    origins=
  )
)
Except block: unsqueeze_236
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_237
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf54', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf53, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_6}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128], stride=[128, 1]),
    origins=
  )
), 2),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf54', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf53, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_6}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_237
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_238
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf54', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf53, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_6}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 1]),
    origins=
  )
), 3),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf54', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf53, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_6}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_238
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_248
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf46', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf45, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_5}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[128], stride=[1]),
    origins=
  )
), 0),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf46', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf45, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_5}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128], stride=[128, 1]),
    origins=
  )
)
Except block: unsqueeze_248
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_249
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf46', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf45, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_5}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128], stride=[128, 1]),
    origins=
  )
), 2),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf46', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf45, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_5}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_249
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_250
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf46', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf45, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_5}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 1]),
    origins=
  )
), 3),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf46', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf45, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_5}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_250
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_260
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf38', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf37, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_4}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[64], stride=[1]),
    origins=
  )
), 0),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf38', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf37, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_4}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64], stride=[64, 1]),
    origins=
  )
)
Except block: unsqueeze_260
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_261
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf38', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf37, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_4}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64], stride=[64, 1]),
    origins=
  )
), 2),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf38', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf37, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_4}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64, 1], stride=[64, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_261
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_262
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf38', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf37, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_4}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64, 1], stride=[64, 1, 1]),
    origins=
  )
), 3),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf38', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf37, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_4}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_262
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_272
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf30', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf29, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_3}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[64], stride=[1]),
    origins=
  )
), 0),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf30', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf29, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_3}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64], stride=[64, 1]),
    origins=
  )
)
Except block: unsqueeze_272
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_273
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf30', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf29, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_3}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64], stride=[64, 1]),
    origins=
  )
), 2),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf30', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf29, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_3}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64, 1], stride=[64, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_273
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_274
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf30', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf29, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_3}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64, 1], stride=[64, 1, 1]),
    origins=
  )
), 3),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf30', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf29, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_3}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_274
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_284
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf22', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf21, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_2}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[64], stride=[1]),
    origins=
  )
), 0),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf22', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf21, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_2}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64], stride=[64, 1]),
    origins=
  )
)
Except block: unsqueeze_284
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_285
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf22', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf21, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_2}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64], stride=[64, 1]),
    origins=
  )
), 2),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf22', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf21, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_2}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64, 1], stride=[64, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_285
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_286
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf22', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf21, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_2}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64, 1], stride=[64, 1, 1]),
    origins=
  )
), 3),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf22', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf21, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_2}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_286
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_296
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf13, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_1}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[64], stride=[1]),
    origins=
  )
), 0),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf13, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_1}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64], stride=[64, 1]),
    origins=
  )
)
Except block: unsqueeze_296
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_297
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf13, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_1}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64], stride=[64, 1]),
    origins=
  )
), 2),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf13, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_1}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64, 1], stride=[64, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_297
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_298
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf13, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_1}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64, 1], stride=[64, 1, 1]),
    origins=
  )
), 3),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf13, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_1}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_298
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_308
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf2, i1)
            tmp1 = ops.index_expr(12544, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[64], stride=[1]),
    origins=
  )
), 0),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf2, i1)
            tmp1 = ops.index_expr(12544, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64], stride=[64, 1]),
    origins=
  )
)
Except block: unsqueeze_308
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_309
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf2, i1)
            tmp1 = ops.index_expr(12544, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64], stride=[64, 1]),
    origins=
  )
), 2),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf2, i1)
            tmp1 = ops.index_expr(12544, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64, 1], stride=[64, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_309
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: unsqueeze_310
Overloadpacket: aten.unsqueeze
Flop count: 0
Case 4: super().run_node(n)

Call_function in graph------------------
Target: aten.unsqueeze.default,
Args: (TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf2, i1)
            tmp1 = ops.index_expr(12544, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64, 1], stride=[64, 1, 1]),
    origins=
  )
), 3),
Kwargs: {}...
Before calling out

End call_function in graph-----------

Result after run_node: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf2, i1)
            tmp1 = ops.index_expr(12544, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]),
    origins=
  )
)
Except block: unsqueeze_310
Finished graph.run_node:------------------------------

Graph.run_node:------------------------------
n: output
Flop count: 0
Case 4: super().run_node(n)

Graph.lowering Output Pre-Realize-------------------------

Node 0: TensorBox(StorageBox(
  ComputedBuffer(name='buf7', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf3, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_63, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[64],
    origins={add_2, mul_2, mul_1}
  ))
))
Node 1: TensorBox(StorageBox(
  ComputedBuffer(name='buf8', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf5, i0)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0000797257434426, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_64, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(64,),
    origins={mul_4, add_3, mul_5, mul_3}
  ))
))
Node 2: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_65, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add}
  )
))
Node 3: TensorBox(StorageBox(
  ComputedBuffer(name='buf17', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf14, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_66, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[64],
    origins={mul_8, mul_9, add_7}
  ))
))
Node 4: TensorBox(StorageBox(
  ComputedBuffer(name='buf18', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf15, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_67, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(64,),
    origins={mul_10, mul_11, mul_12, add_8}
  ))
))
Node 5: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_68, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_5}
  )
))
Node 6: TensorBox(StorageBox(
  ComputedBuffer(name='buf25', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf22, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_69, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[64],
    origins={mul_15, add_12, mul_16}
  ))
))
Node 7: TensorBox(StorageBox(
  ComputedBuffer(name='buf26', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf23, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_70, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(64,),
    origins={mul_19, mul_17, add_13, mul_18}
  ))
))
Node 8: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_71, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_10}
  )
))
Node 9: TensorBox(StorageBox(
  ComputedBuffer(name='buf33', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf30, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_72, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[64],
    origins={mul_23, add_18, mul_22}
  ))
))
Node 10: TensorBox(StorageBox(
  ComputedBuffer(name='buf34', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf31, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_73, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(64,),
    origins={mul_26, mul_25, mul_24, add_19}
  ))
))
Node 11: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_74, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_16}
  )
))
Node 12: TensorBox(StorageBox(
  ComputedBuffer(name='buf41', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf38, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_75, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[64],
    origins={mul_30, mul_29, add_23}
  ))
))
Node 13: TensorBox(StorageBox(
  ComputedBuffer(name='buf42', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf39, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_76, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(64,),
    origins={mul_32, mul_33, mul_31, add_24}
  ))
))
Node 14: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_77, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_21}
  )
))
Node 15: TensorBox(StorageBox(
  ComputedBuffer(name='buf49', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf46, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_78, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[128],
    origins={mul_36, add_29, mul_37}
  ))
))
Node 16: TensorBox(StorageBox(
  ComputedBuffer(name='buf50', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf47, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_79, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(128,),
    origins={mul_40, add_30, mul_38, mul_39}
  ))
))
Node 17: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_80, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_27}
  )
))
Node 18: TensorBox(StorageBox(
  ComputedBuffer(name='buf57', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf54, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_81, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[128],
    origins={add_34, mul_43, mul_44}
  ))
))
Node 19: TensorBox(StorageBox(
  ComputedBuffer(name='buf58', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf55, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_82, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(128,),
    origins={mul_45, add_35, mul_47, mul_46}
  ))
))
Node 20: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_83, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_32}
  )
))
Node 21: TensorBox(StorageBox(
  ComputedBuffer(name='buf64', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf61, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_84, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[128],
    origins={mul_50, add_39, mul_51}
  ))
))
Node 22: TensorBox(StorageBox(
  ComputedBuffer(name='buf65', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf62, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_85, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(128,),
    origins={mul_52, mul_53, mul_54, add_40}
  ))
))
Node 23: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_86, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_37}
  )
))
Node 24: TensorBox(StorageBox(
  ComputedBuffer(name='buf73', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf70, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_87, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[128],
    origins={add_45, mul_57, mul_58}
  ))
))
Node 25: TensorBox(StorageBox(
  ComputedBuffer(name='buf74', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf71, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_88, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(128,),
    origins={mul_60, mul_59, mul_61, add_46}
  ))
))
Node 26: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_89, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_43}
  )
))
Node 27: TensorBox(StorageBox(
  ComputedBuffer(name='buf81', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf78, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_90, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[128],
    origins={mul_64, add_50, mul_65}
  ))
))
Node 28: TensorBox(StorageBox(
  ComputedBuffer(name='buf82', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf79, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_91, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(128,),
    origins={mul_66, mul_67, add_51, mul_68}
  ))
))
Node 29: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_92, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_48}
  )
))
Node 30: TensorBox(StorageBox(
  ComputedBuffer(name='buf89', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf86, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_93, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[256],
    origins={add_56, mul_72, mul_71}
  ))
))
Node 31: TensorBox(StorageBox(
  ComputedBuffer(name='buf90', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf87, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_94, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(256,),
    origins={add_57, mul_74, mul_73, mul_75}
  ))
))
Node 32: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_95, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_54}
  )
))
Node 33: TensorBox(StorageBox(
  ComputedBuffer(name='buf97', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf94, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_96, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[256],
    origins={add_61, mul_79, mul_78}
  ))
))
Node 34: TensorBox(StorageBox(
  ComputedBuffer(name='buf98', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf95, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_97, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(256,),
    origins={mul_81, add_62, mul_80, mul_82}
  ))
))
Node 35: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_98, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_59}
  )
))
Node 36: TensorBox(StorageBox(
  ComputedBuffer(name='buf104', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf101, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_99, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[256],
    origins={mul_85, add_66, mul_86}
  ))
))
Node 37: TensorBox(StorageBox(
  ComputedBuffer(name='buf105', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf102, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_100, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(256,),
    origins={mul_87, add_67, mul_88, mul_89}
  ))
))
Node 38: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_101, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_64}
  )
))
Node 39: TensorBox(StorageBox(
  ComputedBuffer(name='buf113', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf110, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_102, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[256],
    origins={mul_92, mul_93, add_72}
  ))
))
Node 40: TensorBox(StorageBox(
  ComputedBuffer(name='buf114', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf111, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_103, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(256,),
    origins={mul_96, mul_94, add_73, mul_95}
  ))
))
Node 41: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_104, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_70}
  )
))
Node 42: TensorBox(StorageBox(
  ComputedBuffer(name='buf121', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf118, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_105, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[256],
    origins={mul_99, mul_100, add_77}
  ))
))
Node 43: TensorBox(StorageBox(
  ComputedBuffer(name='buf122', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf119, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_106, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(256,),
    origins={mul_103, add_78, mul_102, mul_101}
  ))
))
Node 44: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_107, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_75}
  )
))
Node 45: TensorBox(StorageBox(
  ComputedBuffer(name='buf129', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf126, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_108, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[512],
    origins={mul_107, add_83, mul_106}
  ))
))
Node 46: TensorBox(StorageBox(
  ComputedBuffer(name='buf130', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf127, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_109, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(512,),
    origins={add_84, mul_110, mul_108, mul_109}
  ))
))
Node 47: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_110, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_81}
  )
))
Node 48: TensorBox(StorageBox(
  ComputedBuffer(name='buf137', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf134, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_111, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[512],
    origins={add_88, mul_114, mul_113}
  ))
))
Node 49: TensorBox(StorageBox(
  ComputedBuffer(name='buf138', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf135, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_112, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(512,),
    origins={mul_115, add_89, mul_117, mul_116}
  ))
))
Node 50: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_113, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_86}
  )
))
Node 51: TensorBox(StorageBox(
  ComputedBuffer(name='buf144', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf141, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_114, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[512],
    origins={add_93, mul_121, mul_120}
  ))
))
Node 52: TensorBox(StorageBox(
  ComputedBuffer(name='buf145', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf142, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_115, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(512,),
    origins={add_94, mul_123, mul_124, mul_122}
  ))
))
Node 53: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_116, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_91}
  )
))
Node 54: TensorBox(StorageBox(
  ComputedBuffer(name='buf153', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf150, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_117, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[512],
    origins={mul_128, add_99, mul_127}
  ))
))
Node 55: TensorBox(StorageBox(
  ComputedBuffer(name='buf154', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf151, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_118, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(512,),
    origins={mul_130, add_100, mul_131, mul_129}
  ))
))
Node 56: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_119, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_97}
  )
))
Node 57: TensorBox(StorageBox(
  ComputedBuffer(name='buf161', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf158, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_120, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[512],
    origins={mul_135, add_104, mul_134}
  ))
))
Node 58: TensorBox(StorageBox(
  ComputedBuffer(name='buf162', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf159, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_121, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(512,),
    origins={mul_137, add_105, mul_136, mul_138}
  ))
))
Node 59: TensorBox(StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_122, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_102}
  )
))
Node 60: TensorBox(StorageBox(
  ExternKernelOut(
    name=buf166,
    layout=FixedLayout('cuda', torch.float32, size=[1, 1000], stride=[1000, 1]),
    inputs=[InputBuffer(name='primals_62', layout=FixedLayout('cuda', torch.float32, size=[1000], stride=[1])), ComputedBuffer(name='buf165', layout=FixedLayout('cuda', torch.float32, size=(1, 512), stride=[512, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1 = index
          tmp0 = ops.load(buf164, i1)
          tmp1 = ops.index_expr(49, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=(1, 512),
      origins={mean, view}
    )), ReinterpretView(
      StorageBox(
        InputBuffer(name='primals_61', layout=FixedLayout('cuda', torch.float32, size=[1000, 512], stride=[512, 1]))
      ),
      FixedLayout('cuda', torch.float32, size=[512, 1000], stride=[1, 512]),
      origins=
    )],
    constant_args=(),
    kwargs={'alpha': 1, 'beta': 1},
    output_view=None,
    origins={addmm}
  )
))
Node 61: TensorBox(StorageBox(
  InputBuffer(name='primals_1', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 7, 7], stride=[147, 49, 7, 1]))
))
Node 62: TensorBox(StorageBox(
  InputBuffer(name='primals_2', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
Node 63: TensorBox(StorageBox(
  InputBuffer(name='primals_4', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))
))
Node 64: TensorBox(StorageBox(
  InputBuffer(name='primals_5', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
Node 65: TensorBox(StorageBox(
  InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))
))
Node 66: TensorBox(StorageBox(
  InputBuffer(name='primals_8', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
Node 67: TensorBox(StorageBox(
  InputBuffer(name='primals_10', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))
))
Node 68: TensorBox(StorageBox(
  InputBuffer(name='primals_11', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
Node 69: TensorBox(StorageBox(
  InputBuffer(name='primals_13', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))
))
Node 70: TensorBox(StorageBox(
  InputBuffer(name='primals_14', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
))
Node 71: TensorBox(StorageBox(
  InputBuffer(name='primals_16', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 3, 3], stride=[576, 9, 3, 1]))
))
Node 72: TensorBox(StorageBox(
  InputBuffer(name='primals_17', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
Node 73: TensorBox(StorageBox(
  InputBuffer(name='primals_19', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))
))
Node 74: TensorBox(StorageBox(
  InputBuffer(name='primals_20', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
Node 75: TensorBox(StorageBox(
  InputBuffer(name='primals_22', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 1, 1], stride=[64, 1, 1, 1]))
))
Node 76: TensorBox(StorageBox(
  InputBuffer(name='primals_23', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
Node 77: TensorBox(StorageBox(
  InputBuffer(name='primals_25', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))
))
Node 78: TensorBox(StorageBox(
  InputBuffer(name='primals_26', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
Node 79: TensorBox(StorageBox(
  InputBuffer(name='primals_28', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))
))
Node 80: TensorBox(StorageBox(
  InputBuffer(name='primals_29', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
))
Node 81: TensorBox(StorageBox(
  InputBuffer(name='primals_31', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1]))
))
Node 82: TensorBox(StorageBox(
  InputBuffer(name='primals_32', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
Node 83: TensorBox(StorageBox(
  InputBuffer(name='primals_34', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))
))
Node 84: TensorBox(StorageBox(
  InputBuffer(name='primals_35', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
Node 85: TensorBox(StorageBox(
  InputBuffer(name='primals_37', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1]))
))
Node 86: TensorBox(StorageBox(
  InputBuffer(name='primals_38', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
Node 87: TensorBox(StorageBox(
  InputBuffer(name='primals_40', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))
))
Node 88: TensorBox(StorageBox(
  InputBuffer(name='primals_41', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
Node 89: TensorBox(StorageBox(
  InputBuffer(name='primals_43', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))
))
Node 90: TensorBox(StorageBox(
  InputBuffer(name='primals_44', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
))
Node 91: TensorBox(StorageBox(
  InputBuffer(name='primals_46', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 3, 3], stride=[2304, 9, 3, 1]))
))
Node 92: TensorBox(StorageBox(
  InputBuffer(name='primals_47', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
Node 93: TensorBox(StorageBox(
  InputBuffer(name='primals_49', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))
))
Node 94: TensorBox(StorageBox(
  InputBuffer(name='primals_50', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
Node 95: TensorBox(StorageBox(
  InputBuffer(name='primals_52', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1]))
))
Node 96: TensorBox(StorageBox(
  InputBuffer(name='primals_53', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
Node 97: TensorBox(StorageBox(
  InputBuffer(name='primals_55', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))
))
Node 98: TensorBox(StorageBox(
  InputBuffer(name='primals_56', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
Node 99: TensorBox(StorageBox(
  InputBuffer(name='primals_58', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))
))
Node 100: TensorBox(StorageBox(
  InputBuffer(name='primals_59', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
))
Node 101: TensorBox(StorageBox(
  InputBuffer(name='primals_123', layout=FixedLayout('cuda', torch.float32, size=[1, 3, 224, 224], stride=[150528, 50176, 224, 1]))
))
Node 102: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf0,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 112, 112], stride=[802816, 12544, 112, 1]),
    inputs=[InputBuffer(name='primals_123', layout=FixedLayout('cuda', torch.float32, size=[1, 3, 224, 224], stride=[150528, 50176, 224, 1])), InputBuffer(name='primals_1', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 7, 7], stride=[147, 49, 7, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (3, 3), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution}
  )
))
Node 103: TensorBox(StorageBox(
  ComputedBuffer(name='buf6', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf5, i0)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(64,),
    origins={var_mean, squeeze_1, rsqrt, add_1}
  ))
))
Node 104: TensorBox(StorageBox(
  ComputedBuffer(name='buf9', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 112, 112], stride=[802816, 12544, 112, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf0, i3 + 112 * i2 + 12544 * i1)
        tmp1 = ops.load(buf3, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf5, i1)
        tmp4 = ops.index_expr(12544, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_2, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_3, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 64, 112, 112],
    origins={var_mean, add_1, mul_6, rsqrt, add_4, mul, sub, relu}
  ))
))
Node 105: TensorBox(StorageBox(
  ComputedBuffer(name='buf10', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp1 = ops.index_expr(0, torch.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp4 = ops.index_expr(112, torch.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp2 & tmp5
        tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp8 = ops.index_expr(0, torch.int64)
        tmp9 = tmp7 >= tmp8
        tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp11 = ops.index_expr(112, torch.int64)
        tmp12 = tmp10 < tmp11
        tmp13 = tmp9 & tmp12
        tmp14 = tmp6 & tmp13
        tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp16 = ops.masked(tmp14, tmp15, -inf)
        tmp17 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp18 = ops.index_expr(0, torch.int64)
        tmp19 = tmp17 >= tmp18
        tmp20 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp21 = ops.index_expr(112, torch.int64)
        tmp22 = tmp20 < tmp21
        tmp23 = tmp19 & tmp22
        tmp24 = ops.index_expr(2 * i3, torch.int64)
        tmp25 = ops.index_expr(0, torch.int64)
        tmp26 = tmp24 >= tmp25
        tmp27 = ops.index_expr(2 * i3, torch.int64)
        tmp28 = ops.index_expr(112, torch.int64)
        tmp29 = tmp27 < tmp28
        tmp30 = tmp26 & tmp29
        tmp31 = tmp23 & tmp30
        tmp32 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp33 = ops.masked(tmp31, tmp32, -inf)
        tmp34 = ops.maximum(tmp33, tmp16)
        tmp35 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp36 = ops.index_expr(0, torch.int64)
        tmp37 = tmp35 >= tmp36
        tmp38 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp39 = ops.index_expr(112, torch.int64)
        tmp40 = tmp38 < tmp39
        tmp41 = tmp37 & tmp40
        tmp42 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp43 = ops.index_expr(0, torch.int64)
        tmp44 = tmp42 >= tmp43
        tmp45 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp46 = ops.index_expr(112, torch.int64)
        tmp47 = tmp45 < tmp46
        tmp48 = tmp44 & tmp47
        tmp49 = tmp41 & tmp48
        tmp50 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp51 = ops.masked(tmp49, tmp50, -inf)
        tmp52 = ops.maximum(tmp51, tmp34)
        tmp53 = ops.index_expr(2 * i2, torch.int64)
        tmp54 = ops.index_expr(0, torch.int64)
        tmp55 = tmp53 >= tmp54
        tmp56 = ops.index_expr(2 * i2, torch.int64)
        tmp57 = ops.index_expr(112, torch.int64)
        tmp58 = tmp56 < tmp57
        tmp59 = tmp55 & tmp58
        tmp60 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp61 = ops.index_expr(0, torch.int64)
        tmp62 = tmp60 >= tmp61
        tmp63 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp64 = ops.index_expr(112, torch.int64)
        tmp65 = tmp63 < tmp64
        tmp66 = tmp62 & tmp65
        tmp67 = tmp59 & tmp66
        tmp68 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp69 = ops.masked(tmp67, tmp68, -inf)
        tmp70 = ops.maximum(tmp69, tmp52)
        tmp71 = ops.index_expr(2 * i2, torch.int64)
        tmp72 = ops.index_expr(0, torch.int64)
        tmp73 = tmp71 >= tmp72
        tmp74 = ops.index_expr(2 * i2, torch.int64)
        tmp75 = ops.index_expr(112, torch.int64)
        tmp76 = tmp74 < tmp75
        tmp77 = tmp73 & tmp76
        tmp78 = ops.index_expr(2 * i3, torch.int64)
        tmp79 = ops.index_expr(0, torch.int64)
        tmp80 = tmp78 >= tmp79
        tmp81 = ops.index_expr(2 * i3, torch.int64)
        tmp82 = ops.index_expr(112, torch.int64)
        tmp83 = tmp81 < tmp82
        tmp84 = tmp80 & tmp83
        tmp85 = tmp77 & tmp84
        tmp86 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
        tmp87 = ops.masked(tmp85, tmp86, -inf)
        tmp88 = ops.maximum(tmp87, tmp70)
        tmp89 = ops.index_expr(2 * i2, torch.int64)
        tmp90 = ops.index_expr(0, torch.int64)
        tmp91 = tmp89 >= tmp90
        tmp92 = ops.index_expr(2 * i2, torch.int64)
        tmp93 = ops.index_expr(112, torch.int64)
        tmp94 = tmp92 < tmp93
        tmp95 = tmp91 & tmp94
        tmp96 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp97 = ops.index_expr(0, torch.int64)
        tmp98 = tmp96 >= tmp97
        tmp99 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp100 = ops.index_expr(112, torch.int64)
        tmp101 = tmp99 < tmp100
        tmp102 = tmp98 & tmp101
        tmp103 = tmp95 & tmp102
        tmp104 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp105 = ops.masked(tmp103, tmp104, -inf)
        tmp106 = ops.maximum(tmp105, tmp88)
        tmp107 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp108 = ops.index_expr(0, torch.int64)
        tmp109 = tmp107 >= tmp108
        tmp110 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp111 = ops.index_expr(112, torch.int64)
        tmp112 = tmp110 < tmp111
        tmp113 = tmp109 & tmp112
        tmp114 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp115 = ops.index_expr(0, torch.int64)
        tmp116 = tmp114 >= tmp115
        tmp117 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp118 = ops.index_expr(112, torch.int64)
        tmp119 = tmp117 < tmp118
        tmp120 = tmp116 & tmp119
        tmp121 = tmp113 & tmp120
        tmp122 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp123 = ops.masked(tmp121, tmp122, -inf)
        tmp124 = ops.maximum(tmp123, tmp106)
        tmp125 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp126 = ops.index_expr(0, torch.int64)
        tmp127 = tmp125 >= tmp126
        tmp128 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp129 = ops.index_expr(112, torch.int64)
        tmp130 = tmp128 < tmp129
        tmp131 = tmp127 & tmp130
        tmp132 = ops.index_expr(2 * i3, torch.int64)
        tmp133 = ops.index_expr(0, torch.int64)
        tmp134 = tmp132 >= tmp133
        tmp135 = ops.index_expr(2 * i3, torch.int64)
        tmp136 = ops.index_expr(112, torch.int64)
        tmp137 = tmp135 < tmp136
        tmp138 = tmp134 & tmp137
        tmp139 = tmp131 & tmp138
        tmp140 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp141 = ops.masked(tmp139, tmp140, -inf)
        tmp142 = ops.maximum(tmp141, tmp124)
        tmp143 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp144 = ops.index_expr(0, torch.int64)
        tmp145 = tmp143 >= tmp144
        tmp146 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp147 = ops.index_expr(112, torch.int64)
        tmp148 = tmp146 < tmp147
        tmp149 = tmp145 & tmp148
        tmp150 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp151 = ops.index_expr(0, torch.int64)
        tmp152 = tmp150 >= tmp151
        tmp153 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp154 = ops.index_expr(112, torch.int64)
        tmp155 = tmp153 < tmp154
        tmp156 = tmp152 & tmp155
        tmp157 = tmp149 & tmp156
        tmp158 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp159 = ops.masked(tmp157, tmp158, -inf)
        tmp160 = ops.maximum(tmp159, tmp142)
        return tmp160
    ,
    ranges=[1, 64, 56, 56],
    origins={getitem_2}
  ))
))
Node 106: TensorBox(StorageBox(
  ComputedBuffer(name='buf11', layout=FixedLayout('cuda', torch.int64, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp1 = ops.index_expr(0, torch.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp4 = ops.index_expr(112, torch.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp2 & tmp5
        tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp8 = ops.index_expr(0, torch.int64)
        tmp9 = tmp7 >= tmp8
        tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp11 = ops.index_expr(112, torch.int64)
        tmp12 = tmp10 < tmp11
        tmp13 = tmp9 & tmp12
        tmp14 = tmp6 & tmp13
        tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp16 = ops.masked(tmp14, tmp15, -inf)
        tmp17 = ops.index_expr(-113 + 2 * i3 + 224 * i2, torch.int64)
        tmp18 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp19 = ops.index_expr(0, torch.int64)
        tmp20 = tmp18 >= tmp19
        tmp21 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp22 = ops.index_expr(112, torch.int64)
        tmp23 = tmp21 < tmp22
        tmp24 = tmp20 & tmp23
        tmp25 = ops.index_expr(2 * i3, torch.int64)
        tmp26 = ops.index_expr(0, torch.int64)
        tmp27 = tmp25 >= tmp26
        tmp28 = ops.index_expr(2 * i3, torch.int64)
        tmp29 = ops.index_expr(112, torch.int64)
        tmp30 = tmp28 < tmp29
        tmp31 = tmp27 & tmp30
        tmp32 = tmp24 & tmp31
        tmp33 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp34 = ops.masked(tmp32, tmp33, -inf)
        tmp35 = ops.index_expr(-112 + 2 * i3 + 224 * i2, torch.int64)
        tmp36 = tmp34 > tmp16
        tmp37 = ops.where(tmp36, tmp35, tmp17)
        tmp38 = ops.maximum(tmp34, tmp16)
        tmp39 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp40 = ops.index_expr(0, torch.int64)
        tmp41 = tmp39 >= tmp40
        tmp42 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp43 = ops.index_expr(112, torch.int64)
        tmp44 = tmp42 < tmp43
        tmp45 = tmp41 & tmp44
        tmp46 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp47 = ops.index_expr(0, torch.int64)
        tmp48 = tmp46 >= tmp47
        tmp49 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp50 = ops.index_expr(112, torch.int64)
        tmp51 = tmp49 < tmp50
        tmp52 = tmp48 & tmp51
        tmp53 = tmp45 & tmp52
        tmp54 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp55 = ops.masked(tmp53, tmp54, -inf)
        tmp56 = ops.index_expr(-111 + 2 * i3 + 224 * i2, torch.int64)
        tmp57 = tmp55 > tmp38
        tmp58 = ops.where(tmp57, tmp56, tmp37)
        tmp59 = ops.maximum(tmp55, tmp38)
        tmp60 = ops.index_expr(2 * i2, torch.int64)
        tmp61 = ops.index_expr(0, torch.int64)
        tmp62 = tmp60 >= tmp61
        tmp63 = ops.index_expr(2 * i2, torch.int64)
        tmp64 = ops.index_expr(112, torch.int64)
        tmp65 = tmp63 < tmp64
        tmp66 = tmp62 & tmp65
        tmp67 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp68 = ops.index_expr(0, torch.int64)
        tmp69 = tmp67 >= tmp68
        tmp70 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp71 = ops.index_expr(112, torch.int64)
        tmp72 = tmp70 < tmp71
        tmp73 = tmp69 & tmp72
        tmp74 = tmp66 & tmp73
        tmp75 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp76 = ops.masked(tmp74, tmp75, -inf)
        tmp77 = ops.index_expr(-1 + 2 * i3 + 224 * i2, torch.int64)
        tmp78 = tmp76 > tmp59
        tmp79 = ops.where(tmp78, tmp77, tmp58)
        tmp80 = ops.maximum(tmp76, tmp59)
        tmp81 = ops.index_expr(2 * i2, torch.int64)
        tmp82 = ops.index_expr(0, torch.int64)
        tmp83 = tmp81 >= tmp82
        tmp84 = ops.index_expr(2 * i2, torch.int64)
        tmp85 = ops.index_expr(112, torch.int64)
        tmp86 = tmp84 < tmp85
        tmp87 = tmp83 & tmp86
        tmp88 = ops.index_expr(2 * i3, torch.int64)
        tmp89 = ops.index_expr(0, torch.int64)
        tmp90 = tmp88 >= tmp89
        tmp91 = ops.index_expr(2 * i3, torch.int64)
        tmp92 = ops.index_expr(112, torch.int64)
        tmp93 = tmp91 < tmp92
        tmp94 = tmp90 & tmp93
        tmp95 = tmp87 & tmp94
        tmp96 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
        tmp97 = ops.masked(tmp95, tmp96, -inf)
        tmp98 = ops.index_expr(2 * i3 + 224 * i2, torch.int64)
        tmp99 = tmp97 > tmp80
        tmp100 = ops.where(tmp99, tmp98, tmp79)
        tmp101 = ops.maximum(tmp97, tmp80)
        tmp102 = ops.index_expr(2 * i2, torch.int64)
        tmp103 = ops.index_expr(0, torch.int64)
        tmp104 = tmp102 >= tmp103
        tmp105 = ops.index_expr(2 * i2, torch.int64)
        tmp106 = ops.index_expr(112, torch.int64)
        tmp107 = tmp105 < tmp106
        tmp108 = tmp104 & tmp107
        tmp109 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp110 = ops.index_expr(0, torch.int64)
        tmp111 = tmp109 >= tmp110
        tmp112 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp113 = ops.index_expr(112, torch.int64)
        tmp114 = tmp112 < tmp113
        tmp115 = tmp111 & tmp114
        tmp116 = tmp108 & tmp115
        tmp117 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp118 = ops.masked(tmp116, tmp117, -inf)
        tmp119 = ops.index_expr(1 + 2 * i3 + 224 * i2, torch.int64)
        tmp120 = tmp118 > tmp101
        tmp121 = ops.where(tmp120, tmp119, tmp100)
        tmp122 = ops.maximum(tmp118, tmp101)
        tmp123 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp124 = ops.index_expr(0, torch.int64)
        tmp125 = tmp123 >= tmp124
        tmp126 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp127 = ops.index_expr(112, torch.int64)
        tmp128 = tmp126 < tmp127
        tmp129 = tmp125 & tmp128
        tmp130 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp131 = ops.index_expr(0, torch.int64)
        tmp132 = tmp130 >= tmp131
        tmp133 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp134 = ops.index_expr(112, torch.int64)
        tmp135 = tmp133 < tmp134
        tmp136 = tmp132 & tmp135
        tmp137 = tmp129 & tmp136
        tmp138 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp139 = ops.masked(tmp137, tmp138, -inf)
        tmp140 = ops.index_expr(111 + 2 * i3 + 224 * i2, torch.int64)
        tmp141 = tmp139 > tmp122
        tmp142 = ops.where(tmp141, tmp140, tmp121)
        tmp143 = ops.maximum(tmp139, tmp122)
        tmp144 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp145 = ops.index_expr(0, torch.int64)
        tmp146 = tmp144 >= tmp145
        tmp147 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp148 = ops.index_expr(112, torch.int64)
        tmp149 = tmp147 < tmp148
        tmp150 = tmp146 & tmp149
        tmp151 = ops.index_expr(2 * i3, torch.int64)
        tmp152 = ops.index_expr(0, torch.int64)
        tmp153 = tmp151 >= tmp152
        tmp154 = ops.index_expr(2 * i3, torch.int64)
        tmp155 = ops.index_expr(112, torch.int64)
        tmp156 = tmp154 < tmp155
        tmp157 = tmp153 & tmp156
        tmp158 = tmp150 & tmp157
        tmp159 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp160 = ops.masked(tmp158, tmp159, -inf)
        tmp161 = ops.index_expr(112 + 2 * i3 + 224 * i2, torch.int64)
        tmp162 = tmp160 > tmp143
        tmp163 = ops.where(tmp162, tmp161, tmp142)
        tmp164 = ops.maximum(tmp160, tmp143)
        tmp165 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp166 = ops.index_expr(0, torch.int64)
        tmp167 = tmp165 >= tmp166
        tmp168 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp169 = ops.index_expr(112, torch.int64)
        tmp170 = tmp168 < tmp169
        tmp171 = tmp167 & tmp170
        tmp172 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp173 = ops.index_expr(0, torch.int64)
        tmp174 = tmp172 >= tmp173
        tmp175 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp176 = ops.index_expr(112, torch.int64)
        tmp177 = tmp175 < tmp176
        tmp178 = tmp174 & tmp177
        tmp179 = tmp171 & tmp178
        tmp180 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp181 = ops.masked(tmp179, tmp180, -inf)
        tmp182 = ops.index_expr(113 + 2 * i3 + 224 * i2, torch.int64)
        tmp183 = tmp181 > tmp164
        tmp184 = ops.where(tmp183, tmp182, tmp163)
        tmp185 = ops.maximum(tmp181, tmp164)
        return tmp184
    ,
    ranges=[1, 64, 56, 56],
    origins={getitem_3}
  ))
))
Node 107: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf12,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf10', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp1 = ops.index_expr(0, torch.int64)
          tmp2 = tmp0 >= tmp1
          tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp4 = ops.index_expr(112, torch.int64)
          tmp5 = tmp3 < tmp4
          tmp6 = tmp2 & tmp5
          tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp8 = ops.index_expr(0, torch.int64)
          tmp9 = tmp7 >= tmp8
          tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp11 = ops.index_expr(112, torch.int64)
          tmp12 = tmp10 < tmp11
          tmp13 = tmp9 & tmp12
          tmp14 = tmp6 & tmp13
          tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp16 = ops.masked(tmp14, tmp15, -inf)
          tmp17 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp18 = ops.index_expr(0, torch.int64)
          tmp19 = tmp17 >= tmp18
          tmp20 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp21 = ops.index_expr(112, torch.int64)
          tmp22 = tmp20 < tmp21
          tmp23 = tmp19 & tmp22
          tmp24 = ops.index_expr(2 * i3, torch.int64)
          tmp25 = ops.index_expr(0, torch.int64)
          tmp26 = tmp24 >= tmp25
          tmp27 = ops.index_expr(2 * i3, torch.int64)
          tmp28 = ops.index_expr(112, torch.int64)
          tmp29 = tmp27 < tmp28
          tmp30 = tmp26 & tmp29
          tmp31 = tmp23 & tmp30
          tmp32 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp33 = ops.masked(tmp31, tmp32, -inf)
          tmp34 = ops.maximum(tmp33, tmp16)
          tmp35 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp36 = ops.index_expr(0, torch.int64)
          tmp37 = tmp35 >= tmp36
          tmp38 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp39 = ops.index_expr(112, torch.int64)
          tmp40 = tmp38 < tmp39
          tmp41 = tmp37 & tmp40
          tmp42 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp43 = ops.index_expr(0, torch.int64)
          tmp44 = tmp42 >= tmp43
          tmp45 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp46 = ops.index_expr(112, torch.int64)
          tmp47 = tmp45 < tmp46
          tmp48 = tmp44 & tmp47
          tmp49 = tmp41 & tmp48
          tmp50 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp51 = ops.masked(tmp49, tmp50, -inf)
          tmp52 = ops.maximum(tmp51, tmp34)
          tmp53 = ops.index_expr(2 * i2, torch.int64)
          tmp54 = ops.index_expr(0, torch.int64)
          tmp55 = tmp53 >= tmp54
          tmp56 = ops.index_expr(2 * i2, torch.int64)
          tmp57 = ops.index_expr(112, torch.int64)
          tmp58 = tmp56 < tmp57
          tmp59 = tmp55 & tmp58
          tmp60 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp61 = ops.index_expr(0, torch.int64)
          tmp62 = tmp60 >= tmp61
          tmp63 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp64 = ops.index_expr(112, torch.int64)
          tmp65 = tmp63 < tmp64
          tmp66 = tmp62 & tmp65
          tmp67 = tmp59 & tmp66
          tmp68 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp69 = ops.masked(tmp67, tmp68, -inf)
          tmp70 = ops.maximum(tmp69, tmp52)
          tmp71 = ops.index_expr(2 * i2, torch.int64)
          tmp72 = ops.index_expr(0, torch.int64)
          tmp73 = tmp71 >= tmp72
          tmp74 = ops.index_expr(2 * i2, torch.int64)
          tmp75 = ops.index_expr(112, torch.int64)
          tmp76 = tmp74 < tmp75
          tmp77 = tmp73 & tmp76
          tmp78 = ops.index_expr(2 * i3, torch.int64)
          tmp79 = ops.index_expr(0, torch.int64)
          tmp80 = tmp78 >= tmp79
          tmp81 = ops.index_expr(2 * i3, torch.int64)
          tmp82 = ops.index_expr(112, torch.int64)
          tmp83 = tmp81 < tmp82
          tmp84 = tmp80 & tmp83
          tmp85 = tmp77 & tmp84
          tmp86 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
          tmp87 = ops.masked(tmp85, tmp86, -inf)
          tmp88 = ops.maximum(tmp87, tmp70)
          tmp89 = ops.index_expr(2 * i2, torch.int64)
          tmp90 = ops.index_expr(0, torch.int64)
          tmp91 = tmp89 >= tmp90
          tmp92 = ops.index_expr(2 * i2, torch.int64)
          tmp93 = ops.index_expr(112, torch.int64)
          tmp94 = tmp92 < tmp93
          tmp95 = tmp91 & tmp94
          tmp96 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp97 = ops.index_expr(0, torch.int64)
          tmp98 = tmp96 >= tmp97
          tmp99 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp100 = ops.index_expr(112, torch.int64)
          tmp101 = tmp99 < tmp100
          tmp102 = tmp98 & tmp101
          tmp103 = tmp95 & tmp102
          tmp104 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp105 = ops.masked(tmp103, tmp104, -inf)
          tmp106 = ops.maximum(tmp105, tmp88)
          tmp107 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp108 = ops.index_expr(0, torch.int64)
          tmp109 = tmp107 >= tmp108
          tmp110 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp111 = ops.index_expr(112, torch.int64)
          tmp112 = tmp110 < tmp111
          tmp113 = tmp109 & tmp112
          tmp114 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp115 = ops.index_expr(0, torch.int64)
          tmp116 = tmp114 >= tmp115
          tmp117 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp118 = ops.index_expr(112, torch.int64)
          tmp119 = tmp117 < tmp118
          tmp120 = tmp116 & tmp119
          tmp121 = tmp113 & tmp120
          tmp122 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp123 = ops.masked(tmp121, tmp122, -inf)
          tmp124 = ops.maximum(tmp123, tmp106)
          tmp125 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp126 = ops.index_expr(0, torch.int64)
          tmp127 = tmp125 >= tmp126
          tmp128 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp129 = ops.index_expr(112, torch.int64)
          tmp130 = tmp128 < tmp129
          tmp131 = tmp127 & tmp130
          tmp132 = ops.index_expr(2 * i3, torch.int64)
          tmp133 = ops.index_expr(0, torch.int64)
          tmp134 = tmp132 >= tmp133
          tmp135 = ops.index_expr(2 * i3, torch.int64)
          tmp136 = ops.index_expr(112, torch.int64)
          tmp137 = tmp135 < tmp136
          tmp138 = tmp134 & tmp137
          tmp139 = tmp131 & tmp138
          tmp140 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp141 = ops.masked(tmp139, tmp140, -inf)
          tmp142 = ops.maximum(tmp141, tmp124)
          tmp143 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp144 = ops.index_expr(0, torch.int64)
          tmp145 = tmp143 >= tmp144
          tmp146 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp147 = ops.index_expr(112, torch.int64)
          tmp148 = tmp146 < tmp147
          tmp149 = tmp145 & tmp148
          tmp150 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp151 = ops.index_expr(0, torch.int64)
          tmp152 = tmp150 >= tmp151
          tmp153 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp154 = ops.index_expr(112, torch.int64)
          tmp155 = tmp153 < tmp154
          tmp156 = tmp152 & tmp155
          tmp157 = tmp149 & tmp156
          tmp158 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp159 = ops.masked(tmp157, tmp158, -inf)
          tmp160 = ops.maximum(tmp159, tmp142)
          return tmp160
      ,
      ranges=[1, 64, 56, 56],
      origins={getitem_2}
    )), InputBuffer(name='primals_4', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_1}
  )
))
Node 108: TensorBox(StorageBox(
  ComputedBuffer(name='buf16', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf15, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(64,),
    origins={rsqrt_1, add_6, squeeze_4, var_mean_1}
  ))
))
Node 109: TensorBox(StorageBox(
  ComputedBuffer(name='buf19', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf12, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf14, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf15, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_5, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_6, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 64, 56, 56],
    origins={relu_1, rsqrt_1, sub_1, add_6, mul_7, var_mean_1, mu...
  ))
))
Node 110: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf20,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf19', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf12, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf14, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf15, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_5, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_6, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 64, 56, 56],
      origins={relu_1, rsqrt_1, sub_1, add_6, mul_7, var_mean_1, mu...
    )), InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_2}
  )
))
Node 111: TensorBox(StorageBox(
  ComputedBuffer(name='buf24', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf23, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(64,),
    origins={rsqrt_2, var_mean_2, squeeze_7, add_11}
  ))
))
Node 112: TensorBox(StorageBox(
  ComputedBuffer(name='buf27', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf22, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf23, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_8, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_9, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf10, i3 + 56 * i2 + 3136 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 64, 56, 56],
    origins={add_11, add_15, mul_14, rsqrt_2, var_mean_2, mul_20,...
  ))
))
Node 113: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf28,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf27', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf22, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf23, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_8, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_9, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf10, i3 + 56 * i2 + 3136 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 64, 56, 56],
      origins={add_11, add_15, mul_14, rsqrt_2, var_mean_2, mul_20,...
    )), InputBuffer(name='primals_10', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_3}
  )
))
Node 114: TensorBox(StorageBox(
  ComputedBuffer(name='buf32', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf31, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(64,),
    origins={rsqrt_3, add_17, var_mean_3, squeeze_10}
  ))
))
Node 115: TensorBox(StorageBox(
  ComputedBuffer(name='buf35', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf28, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf30, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf31, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_11, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_12, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 64, 56, 56],
    origins={rsqrt_3, add_17, sub_3, add_20, mul_27, mul_21, var_...
  ))
))
Node 116: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf36,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf35', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf28, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf30, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf31, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_11, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_12, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 64, 56, 56],
      origins={rsqrt_3, add_17, sub_3, add_20, mul_27, mul_21, var_...
    )), InputBuffer(name='primals_13', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_4}
  )
))
Node 117: TensorBox(StorageBox(
  ComputedBuffer(name='buf40', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf39, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(64,),
    origins={rsqrt_4, var_mean_4, add_22, squeeze_13}
  ))
))
Node 118: TensorBox(StorageBox(
  ComputedBuffer(name='buf43', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf38, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf39, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_14, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_15, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 64, 56, 56],
    origins={relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, ...
  ))
))
Node 119: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf44,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf43', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf38, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf39, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_14, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_15, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 64, 56, 56],
      origins={relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, ...
    )), InputBuffer(name='primals_16', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_5}
  )
))
Node 120: TensorBox(StorageBox(
  ComputedBuffer(name='buf48', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf47, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(128,),
    origins={squeeze_16, var_mean_5, add_28, rsqrt_5}
  ))
))
Node 121: TensorBox(StorageBox(
  ComputedBuffer(name='buf51', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf44, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf46, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf47, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_17, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_18, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 128, 28, 28],
    origins={add_31, add_28, rsqrt_5, mul_35, sub_5, relu_5, mul_...
  ))
))
Node 122: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf52,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf51', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf44, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf46, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf47, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_17, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_18, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 128, 28, 28],
      origins={add_31, add_28, rsqrt_5, mul_35, sub_5, relu_5, mul_...
    )), InputBuffer(name='primals_19', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_6}
  )
))
Node 123: TensorBox(StorageBox(
  ComputedBuffer(name='buf56', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf55, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(128,),
    origins={add_33, squeeze_19, rsqrt_6, var_mean_6}
  ))
))
Node 124: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf59,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf43', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf38, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf39, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_14, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_15, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 64, 56, 56],
      origins={relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, ...
    )), InputBuffer(name='primals_22', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 1, 1], stride=[64, 1, 1, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (0, 0), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_7}
  )
))
Node 125: TensorBox(StorageBox(
  ComputedBuffer(name='buf63', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf62, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(128,),
    origins={var_mean_7, rsqrt_7, add_38, squeeze_22}
  ))
))
Node 126: TensorBox(StorageBox(
  ComputedBuffer(name='buf67', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf66, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.relu(tmp0)
        return tmp1
    ,
    ranges=[1, 128, 28, 28],
    origins={relu_6}
  ))
))
Node 127: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf68,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf67', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf66, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.relu(tmp0)
          return tmp1
      ,
      ranges=[1, 128, 28, 28],
      origins={relu_6}
    )), InputBuffer(name='primals_25', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_8}
  )
))
Node 128: TensorBox(StorageBox(
  ComputedBuffer(name='buf72', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf71, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(128,),
    origins={add_44, squeeze_25, rsqrt_8, var_mean_8}
  ))
))
Node 129: TensorBox(StorageBox(
  ComputedBuffer(name='buf75', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf68, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf70, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf71, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_26, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_27, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 128, 28, 28],
    origins={add_44, sub_8, relu_7, rsqrt_8, add_47, mul_62, var_...
  ))
))
Node 130: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf76,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf75', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf68, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf70, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf71, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_26, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_27, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 128, 28, 28],
      origins={add_44, sub_8, relu_7, rsqrt_8, add_47, mul_62, var_...
    )), InputBuffer(name='primals_28', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_9}
  )
))
Node 131: TensorBox(StorageBox(
  ComputedBuffer(name='buf80', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf79, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(128,),
    origins={squeeze_28, var_mean_9, rsqrt_9, add_49}
  ))
))
Node 132: TensorBox(StorageBox(
  ComputedBuffer(name='buf83', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf78, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf79, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_29, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_30, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 128, 28, 28],
    origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
  ))
))
Node 133: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf84,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf83', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf78, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf79, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_29, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_30, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 128, 28, 28],
      origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
    )), InputBuffer(name='primals_31', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_10}
  )
))
Node 134: TensorBox(StorageBox(
  ComputedBuffer(name='buf88', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf87, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(256,),
    origins={rsqrt_10, squeeze_31, var_mean_10, add_55}
  ))
))
Node 135: TensorBox(StorageBox(
  ComputedBuffer(name='buf91', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf84, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf86, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf87, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_32, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_33, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 256, 14, 14],
    origins={var_mean_10, add_58, add_55, sub_10, mul_76, rsqrt_1...
  ))
))
Node 136: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf92,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf91', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf84, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf86, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf87, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_32, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_33, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 256, 14, 14],
      origins={var_mean_10, add_58, add_55, sub_10, mul_76, rsqrt_1...
    )), InputBuffer(name='primals_34', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_11}
  )
))
Node 137: TensorBox(StorageBox(
  ComputedBuffer(name='buf96', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf95, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(256,),
    origins={squeeze_34, add_60, rsqrt_11, var_mean_11}
  ))
))
Node 138: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf99,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf83', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf78, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf79, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_29, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_30, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 128, 28, 28],
      origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
    )), InputBuffer(name='primals_37', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (0, 0), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_12}
  )
))
Node 139: TensorBox(StorageBox(
  ComputedBuffer(name='buf103', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf102, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(256,),
    origins={var_mean_12, rsqrt_12, add_65, squeeze_37}
  ))
))
Node 140: TensorBox(StorageBox(
  ComputedBuffer(name='buf107', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf106, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.relu(tmp0)
        return tmp1
    ,
    ranges=[1, 256, 14, 14],
    origins={relu_10}
  ))
))
Node 141: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf108,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf107', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf106, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.relu(tmp0)
          return tmp1
      ,
      ranges=[1, 256, 14, 14],
      origins={relu_10}
    )), InputBuffer(name='primals_40', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_13}
  )
))
Node 142: TensorBox(StorageBox(
  ComputedBuffer(name='buf112', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf111, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(256,),
    origins={squeeze_40, rsqrt_13, add_71, var_mean_13}
  ))
))
Node 143: TensorBox(StorageBox(
  ComputedBuffer(name='buf115', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf108, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf110, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf111, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_41, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_42, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_91, relu_11, mul_97, rsqrt_13, add_74, sub_13, a...
  ))
))
Node 144: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf116,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf115', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf108, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf110, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf111, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_41, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_42, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 256, 14, 14],
      origins={mul_91, relu_11, mul_97, rsqrt_13, add_74, sub_13, a...
    )), InputBuffer(name='primals_43', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_14}
  )
))
Node 145: TensorBox(StorageBox(
  ComputedBuffer(name='buf120', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf119, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(256,),
    origins={squeeze_43, var_mean_14, add_76, rsqrt_14}
  ))
))
Node 146: TensorBox(StorageBox(
  ComputedBuffer(name='buf123', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf118, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf119, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_44, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_45, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_98, add_80, var_mean_14, add_79, add_76, relu_12...
  ))
))
Node 147: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf124,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf123', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf118, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf119, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_44, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_45, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 256, 14, 14],
      origins={mul_98, add_80, var_mean_14, add_79, add_76, relu_12...
    )), InputBuffer(name='primals_46', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_15}
  )
))
Node 148: TensorBox(StorageBox(
  ComputedBuffer(name='buf128', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf127, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(512,),
    origins={add_82, squeeze_46, rsqrt_15, var_mean_15}
  ))
))
Node 149: TensorBox(StorageBox(
  ComputedBuffer(name='buf131', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf124, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf126, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf127, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_47, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_48, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 512, 7, 7],
    origins={relu_13, add_85, mul_111, add_82, rsqrt_15, sub_15, ...
  ))
))
Node 150: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf132,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf131', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf124, i3 + 7 * i2 + 49 * i1)
          tmp1 = ops.load(buf126, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf127, i1)
          tmp4 = ops.index_expr(49, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_47, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_48, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 512, 7, 7],
      origins={relu_13, add_85, mul_111, add_82, rsqrt_15, sub_15, ...
    )), InputBuffer(name='primals_49', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_16}
  )
))
Node 151: TensorBox(StorageBox(
  ComputedBuffer(name='buf136', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf135, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(512,),
    origins={rsqrt_16, var_mean_16, add_87, squeeze_49}
  ))
))
Node 152: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf139,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf123', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf118, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf119, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_44, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_45, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 256, 14, 14],
      origins={mul_98, add_80, var_mean_14, add_79, add_76, relu_12...
    )), InputBuffer(name='primals_52', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (0, 0), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_17}
  )
))
Node 153: TensorBox(StorageBox(
  ComputedBuffer(name='buf143', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf142, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(512,),
    origins={add_92, var_mean_17, squeeze_52, rsqrt_17}
  ))
))
Node 154: TensorBox(StorageBox(
  ComputedBuffer(name='buf147', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf146, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.relu(tmp0)
        return tmp1
    ,
    ranges=[1, 512, 7, 7],
    origins={relu_14}
  ))
))
Node 155: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf148,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf147', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf146, i3 + 7 * i2 + 49 * i1)
          tmp1 = ops.relu(tmp0)
          return tmp1
      ,
      ranges=[1, 512, 7, 7],
      origins={relu_14}
    )), InputBuffer(name='primals_55', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_18}
  )
))
Node 156: TensorBox(StorageBox(
  ComputedBuffer(name='buf152', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf151, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(512,),
    origins={squeeze_55, add_98, var_mean_18, rsqrt_18}
  ))
))
Node 157: TensorBox(StorageBox(
  ComputedBuffer(name='buf155', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf148, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf150, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf151, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_56, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_57, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 512, 7, 7],
    origins={sub_18, add_101, rsqrt_18, relu_15, add_98, mul_132,...
  ))
))
Node 158: TensorBox(StorageBox(
  ExternKernelAlloc(
    name=buf156,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf155', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf148, i3 + 7 * i2 + 49 * i1)
          tmp1 = ops.load(buf150, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf151, i1)
          tmp4 = ops.index_expr(49, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_56, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_57, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 512, 7, 7],
      origins={sub_18, add_101, rsqrt_18, relu_15, add_98, mul_132,...
    )), InputBuffer(name='primals_58', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_19}
  )
))
Node 159: TensorBox(StorageBox(
  ComputedBuffer(name='buf160', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf159, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(512,),
    origins={add_103, var_mean_19, squeeze_58, rsqrt_19}
  ))
))
Node 160: TensorBox(StorageBox(
  ComputedBuffer(name='buf165', layout=FixedLayout('cuda', torch.float32, size=(1, 512), stride=[512, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1 = index
        tmp0 = ops.load(buf164, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=(1, 512),
    origins={mean, view}
  ))
))
Node 161: TensorBox(
  ReinterpretView(
    StorageBox(
      InputBuffer(name='primals_61', layout=FixedLayout('cuda', torch.float32, size=[1000, 512], stride=[512, 1]))
    ),
    FixedLayout('cuda', torch.float32, size=[1000, 512], stride=[512, 1]),
    origins=
  )
)
Node 162: TensorBox(StorageBox(
  ComputedBuffer(name='buf167', layout=FixedLayout('cuda', torch.bool, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.bool,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf163, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.constant(0, torch.float32)
        tmp2 = tmp0 <= tmp1
        return tmp2
    ,
    ranges=[1, 512, 7, 7],
    origins={le}
  ))
))
Node 163: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf158', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf157, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_19}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]),
    origins=
  )
)
Node 164: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf150', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf149, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_18}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]),
    origins=
  )
)
Node 165: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf141', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf140, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_17}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]),
    origins=
  )
)
Node 166: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf134', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf133, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_16}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]),
    origins=
  )
)
Node 167: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf126', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf125, i1)
            tmp1 = ops.index_expr(49, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 512, 1, 1],
        origins={var_mean_15}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]),
    origins=
  )
)
Node 168: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf118', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf117, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_14}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]),
    origins=
  )
)
Node 169: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf110', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf109, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_13}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]),
    origins=
  )
)
Node 170: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf101', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf100, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_12}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]),
    origins=
  )
)
Node 171: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf94', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf93, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_11}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]),
    origins=
  )
)
Node 172: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf86', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf85, i1)
            tmp1 = ops.index_expr(196, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 256, 1, 1],
        origins={var_mean_10}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]),
    origins=
  )
)
Node 173: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf78', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf77, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_9}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]),
    origins=
  )
)
Node 174: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf70', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf69, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_8}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]),
    origins=
  )
)
Node 175: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf61', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf60, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_7}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]),
    origins=
  )
)
Node 176: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf54', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf53, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_6}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]),
    origins=
  )
)
Node 177: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf46', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf45, i1)
            tmp1 = ops.index_expr(784, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 128, 1, 1],
        origins={var_mean_5}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]),
    origins=
  )
)
Node 178: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf38', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf37, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_4}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]),
    origins=
  )
)
Node 179: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf30', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf29, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_3}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]),
    origins=
  )
)
Node 180: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf22', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf21, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_2}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]),
    origins=
  )
)
Node 181: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf13, i1)
            tmp1 = ops.index_expr(3136, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean_1}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]),
    origins=
  )
)
Node 182: TensorBox(
  ReinterpretView(
    StorageBox(
      ComputedBuffer(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
        'cuda',
        torch.float32,
        def inner_fn(index):
            _, i1, _, _ = index
            tmp0 = ops.load(buf2, i1)
            tmp1 = ops.index_expr(12544, torch.float32)
            tmp2 = tmp0 / tmp1
            return tmp2
        ,
        ranges=[1, 64, 1, 1],
        origins={var_mean}
      ))
    ),
    FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]),
    origins=
  )
)

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf7', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf3, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_63, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[64],
    origins={add_2, mul_2, mul_1}
  ))
)

Not realizing StorageBox with name: buf7

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf8', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf5, i0)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0000797257434426, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_64, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(64,),
    origins={mul_4, add_3, mul_5, mul_3}
  ))
)

Not realizing StorageBox with name: buf8

IR realize_input StorageBox x: StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_65, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add}
  )
)

Realized StorageBox:
{'data': ComputedBuffer(name='buf168', layout=FlexibleLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_65, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add}
)), 'origins': {add}, '__num_reads_cache': 1}

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf17', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf14, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_66, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[64],
    origins={mul_8, mul_9, add_7}
  ))
)

Not realizing StorageBox with name: buf17

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf18', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf15, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_67, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(64,),
    origins={mul_10, mul_11, mul_12, add_8}
  ))
)

Not realizing StorageBox with name: buf18

IR realize_input StorageBox x: StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_68, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_5}
  )
)

Realized StorageBox:
{'data': ComputedBuffer(name='buf169', layout=FlexibleLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_68, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_5}
)), 'origins': {add_5}, '__num_reads_cache': 1}

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf25', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf22, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_69, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[64],
    origins={mul_15, add_12, mul_16}
  ))
)

Not realizing StorageBox with name: buf25

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf26', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf23, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_70, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(64,),
    origins={mul_19, mul_17, add_13, mul_18}
  ))
)

Not realizing StorageBox with name: buf26

IR realize_input StorageBox x: StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_71, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_10}
  )
)

Realized StorageBox:
{'data': ComputedBuffer(name='buf170', layout=FlexibleLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_71, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_10}
)), 'origins': {add_10}, '__num_reads_cache': 1}

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf33', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf30, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_72, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[64],
    origins={mul_23, add_18, mul_22}
  ))
)

Not realizing StorageBox with name: buf33

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf34', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf31, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_73, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(64,),
    origins={mul_26, mul_25, mul_24, add_19}
  ))
)

Not realizing StorageBox with name: buf34

IR realize_input StorageBox x: StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_74, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_16}
  )
)

Realized StorageBox:
{'data': ComputedBuffer(name='buf171', layout=FlexibleLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_74, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_16}
)), 'origins': {add_16}, '__num_reads_cache': 1}

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf41', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf38, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_75, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[64],
    origins={mul_30, mul_29, add_23}
  ))
)

Not realizing StorageBox with name: buf41

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf42', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf39, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_76, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(64,),
    origins={mul_32, mul_33, mul_31, add_24}
  ))
)

Not realizing StorageBox with name: buf42

IR realize_input StorageBox x: StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_77, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_21}
  )
)

Realized StorageBox:
{'data': ComputedBuffer(name='buf172', layout=FlexibleLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_77, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_21}
)), 'origins': {add_21}, '__num_reads_cache': 1}

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf49', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf46, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_78, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[128],
    origins={mul_36, add_29, mul_37}
  ))
)

Not realizing StorageBox with name: buf49

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf50', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf47, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_79, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(128,),
    origins={mul_40, add_30, mul_38, mul_39}
  ))
)

Not realizing StorageBox with name: buf50

IR realize_input StorageBox x: StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_80, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_27}
  )
)

Realized StorageBox:
{'data': ComputedBuffer(name='buf173', layout=FlexibleLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_80, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_27}
)), 'origins': {add_27}, '__num_reads_cache': 1}

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf57', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf54, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_81, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[128],
    origins={add_34, mul_43, mul_44}
  ))
)

Not realizing StorageBox with name: buf57

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf58', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf55, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_82, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(128,),
    origins={mul_45, add_35, mul_47, mul_46}
  ))
)

Not realizing StorageBox with name: buf58

IR realize_input StorageBox x: StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_83, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_32}
  )
)

Realized StorageBox:
{'data': ComputedBuffer(name='buf174', layout=FlexibleLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_83, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_32}
)), 'origins': {add_32}, '__num_reads_cache': 1}

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf64', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf61, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_84, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[128],
    origins={mul_50, add_39, mul_51}
  ))
)

Not realizing StorageBox with name: buf64

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf65', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf62, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_85, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(128,),
    origins={mul_52, mul_53, mul_54, add_40}
  ))
)

Not realizing StorageBox with name: buf65

IR realize_input StorageBox x: StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_86, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_37}
  )
)

Realized StorageBox:
{'data': ComputedBuffer(name='buf175', layout=FlexibleLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_86, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_37}
)), 'origins': {add_37}, '__num_reads_cache': 1}

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf73', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf70, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_87, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[128],
    origins={add_45, mul_57, mul_58}
  ))
)

Not realizing StorageBox with name: buf73

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf74', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf71, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_88, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(128,),
    origins={mul_60, mul_59, mul_61, add_46}
  ))
)

Not realizing StorageBox with name: buf74

IR realize_input StorageBox x: StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_89, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_43}
  )
)

Realized StorageBox:
{'data': ComputedBuffer(name='buf176', layout=FlexibleLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_89, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_43}
)), 'origins': {add_43}, '__num_reads_cache': 1}

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf81', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf78, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_90, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[128],
    origins={mul_64, add_50, mul_65}
  ))
)

Not realizing StorageBox with name: buf81

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf82', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf79, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_91, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(128,),
    origins={mul_66, mul_67, add_51, mul_68}
  ))
)

Not realizing StorageBox with name: buf82

IR realize_input StorageBox x: StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_92, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_48}
  )
)

Realized StorageBox:
{'data': ComputedBuffer(name='buf177', layout=FlexibleLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_92, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_48}
)), 'origins': {add_48}, '__num_reads_cache': 1}

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf89', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf86, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_93, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[256],
    origins={add_56, mul_72, mul_71}
  ))
)

Not realizing StorageBox with name: buf89

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf90', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf87, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_94, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(256,),
    origins={add_57, mul_74, mul_73, mul_75}
  ))
)

Not realizing StorageBox with name: buf90

IR realize_input StorageBox x: StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_95, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_54}
  )
)

Realized StorageBox:
{'data': ComputedBuffer(name='buf178', layout=FlexibleLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_95, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_54}
)), 'origins': {add_54}, '__num_reads_cache': 1}

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf97', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf94, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_96, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[256],
    origins={add_61, mul_79, mul_78}
  ))
)

Not realizing StorageBox with name: buf97

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf98', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf95, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_97, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(256,),
    origins={mul_81, add_62, mul_80, mul_82}
  ))
)

Not realizing StorageBox with name: buf98

IR realize_input StorageBox x: StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_98, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_59}
  )
)

Realized StorageBox:
{'data': ComputedBuffer(name='buf179', layout=FlexibleLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_98, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_59}
)), 'origins': {add_59}, '__num_reads_cache': 1}

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf104', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf101, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_99, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[256],
    origins={mul_85, add_66, mul_86}
  ))
)

Not realizing StorageBox with name: buf104

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf105', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf102, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_100, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(256,),
    origins={mul_87, add_67, mul_88, mul_89}
  ))
)

Not realizing StorageBox with name: buf105

IR realize_input StorageBox x: StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_101, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_64}
  )
)

Realized StorageBox:
{'data': ComputedBuffer(name='buf180', layout=FlexibleLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_101, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_64}
)), 'origins': {add_64}, '__num_reads_cache': 1}

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf113', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf110, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_102, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[256],
    origins={mul_92, mul_93, add_72}
  ))
)

Not realizing StorageBox with name: buf113

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf114', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf111, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_103, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(256,),
    origins={mul_96, mul_94, add_73, mul_95}
  ))
)

Not realizing StorageBox with name: buf114

IR realize_input StorageBox x: StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_104, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_70}
  )
)

Realized StorageBox:
{'data': ComputedBuffer(name='buf181', layout=FlexibleLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_104, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_70}
)), 'origins': {add_70}, '__num_reads_cache': 1}

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf121', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf118, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_105, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[256],
    origins={mul_99, mul_100, add_77}
  ))
)

Not realizing StorageBox with name: buf121

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf122', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf119, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_106, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(256,),
    origins={mul_103, add_78, mul_102, mul_101}
  ))
)

Not realizing StorageBox with name: buf122

IR realize_input StorageBox x: StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_107, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_75}
  )
)

Realized StorageBox:
{'data': ComputedBuffer(name='buf182', layout=FlexibleLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_107, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_75}
)), 'origins': {add_75}, '__num_reads_cache': 1}

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf129', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf126, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_108, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[512],
    origins={mul_107, add_83, mul_106}
  ))
)

Not realizing StorageBox with name: buf129

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf130', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf127, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_109, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(512,),
    origins={add_84, mul_110, mul_108, mul_109}
  ))
)

Not realizing StorageBox with name: buf130

IR realize_input StorageBox x: StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_110, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_81}
  )
)

Realized StorageBox:
{'data': ComputedBuffer(name='buf183', layout=FlexibleLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_110, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_81}
)), 'origins': {add_81}, '__num_reads_cache': 1}

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf137', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf134, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_111, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[512],
    origins={add_88, mul_114, mul_113}
  ))
)

Not realizing StorageBox with name: buf137

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf138', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf135, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_112, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(512,),
    origins={mul_115, add_89, mul_117, mul_116}
  ))
)

Not realizing StorageBox with name: buf138

IR realize_input StorageBox x: StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_113, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_86}
  )
)

Realized StorageBox:
{'data': ComputedBuffer(name='buf184', layout=FlexibleLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_113, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_86}
)), 'origins': {add_86}, '__num_reads_cache': 1}

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf144', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf141, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_114, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[512],
    origins={add_93, mul_121, mul_120}
  ))
)

Not realizing StorageBox with name: buf144

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf145', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf142, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_115, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(512,),
    origins={add_94, mul_123, mul_124, mul_122}
  ))
)

Not realizing StorageBox with name: buf145

IR realize_input StorageBox x: StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_116, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_91}
  )
)

Realized StorageBox:
{'data': ComputedBuffer(name='buf185', layout=FlexibleLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_116, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_91}
)), 'origins': {add_91}, '__num_reads_cache': 1}

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf153', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf150, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_117, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[512],
    origins={mul_128, add_99, mul_127}
  ))
)

Not realizing StorageBox with name: buf153

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf154', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf151, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_118, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(512,),
    origins={mul_130, add_100, mul_131, mul_129}
  ))
)

Not realizing StorageBox with name: buf154

IR realize_input StorageBox x: StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_119, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_97}
  )
)

Realized StorageBox:
{'data': ComputedBuffer(name='buf186', layout=FlexibleLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_119, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_97}
)), 'origins': {add_97}, '__num_reads_cache': 1}

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf161', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf158, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_120, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[512],
    origins={mul_135, add_104, mul_134}
  ))
)

Not realizing StorageBox with name: buf161

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf162', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf159, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_121, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(512,),
    origins={mul_137, add_105, mul_136, mul_138}
  ))
)

Not realizing StorageBox with name: buf162

IR realize_input StorageBox x: StorageBox(
  Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_122, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_102}
  )
)

Realized StorageBox:
{'data': ComputedBuffer(name='buf187', layout=FlexibleLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_122, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_102}
)), 'origins': {add_102}, '__num_reads_cache': 1}

IR realize_input StorageBox x: StorageBox(
  ExternKernelOut(
    name=buf166,
    layout=FixedLayout('cuda', torch.float32, size=[1, 1000], stride=[1000, 1]),
    inputs=[InputBuffer(name='primals_62', layout=FixedLayout('cuda', torch.float32, size=[1000], stride=[1])), ComputedBuffer(name='buf165', layout=FixedLayout('cuda', torch.float32, size=(1, 512), stride=[512, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1 = index
          tmp0 = ops.load(buf164, i1)
          tmp1 = ops.index_expr(49, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=(1, 512),
      origins={mean, view}
    )), ReinterpretView(
      StorageBox(
        InputBuffer(name='primals_61', layout=FixedLayout('cuda', torch.float32, size=[1000, 512], stride=[512, 1]))
      ),
      FixedLayout('cuda', torch.float32, size=[512, 1000], stride=[1, 512]),
      origins=
    )],
    constant_args=(),
    kwargs={'alpha': 1, 'beta': 1},
    output_view=None,
    origins={addmm}
  )
)

Not realizing StorageBox with name: buf166

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_1', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 7, 7], stride=[147, 49, 7, 1]))
)

Not realizing StorageBox with name: primals_1

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_2', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)

Not realizing StorageBox with name: primals_2

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_4', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))
)

Not realizing StorageBox with name: primals_4

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_5', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)

Not realizing StorageBox with name: primals_5

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))
)

Not realizing StorageBox with name: primals_7

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_8', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)

Not realizing StorageBox with name: primals_8

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_10', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))
)

Not realizing StorageBox with name: primals_10

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_11', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)

Not realizing StorageBox with name: primals_11

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_13', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))
)

Not realizing StorageBox with name: primals_13

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_14', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)

Not realizing StorageBox with name: primals_14

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_16', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 3, 3], stride=[576, 9, 3, 1]))
)

Not realizing StorageBox with name: primals_16

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_17', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)

Not realizing StorageBox with name: primals_17

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_19', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))
)

Not realizing StorageBox with name: primals_19

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_20', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)

Not realizing StorageBox with name: primals_20

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_22', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 1, 1], stride=[64, 1, 1, 1]))
)

Not realizing StorageBox with name: primals_22

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_23', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)

Not realizing StorageBox with name: primals_23

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_25', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))
)

Not realizing StorageBox with name: primals_25

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_26', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)

Not realizing StorageBox with name: primals_26

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_28', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))
)

Not realizing StorageBox with name: primals_28

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_29', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)

Not realizing StorageBox with name: primals_29

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_31', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1]))
)

Not realizing StorageBox with name: primals_31

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_32', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)

Not realizing StorageBox with name: primals_32

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_34', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))
)

Not realizing StorageBox with name: primals_34

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_35', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)

Not realizing StorageBox with name: primals_35

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_37', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1]))
)

Not realizing StorageBox with name: primals_37

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_38', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)

Not realizing StorageBox with name: primals_38

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_40', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))
)

Not realizing StorageBox with name: primals_40

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_41', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)

Not realizing StorageBox with name: primals_41

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_43', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))
)

Not realizing StorageBox with name: primals_43

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_44', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)

Not realizing StorageBox with name: primals_44

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_46', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 3, 3], stride=[2304, 9, 3, 1]))
)

Not realizing StorageBox with name: primals_46

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_47', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)

Not realizing StorageBox with name: primals_47

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_49', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))
)

Not realizing StorageBox with name: primals_49

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_50', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)

Not realizing StorageBox with name: primals_50

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_52', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1]))
)

Not realizing StorageBox with name: primals_52

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_53', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)

Not realizing StorageBox with name: primals_53

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_55', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))
)

Not realizing StorageBox with name: primals_55

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_56', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)

Not realizing StorageBox with name: primals_56

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_58', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))
)

Not realizing StorageBox with name: primals_58

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_59', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)

Not realizing StorageBox with name: primals_59

IR realize_input StorageBox x: StorageBox(
  InputBuffer(name='primals_123', layout=FixedLayout('cuda', torch.float32, size=[1, 3, 224, 224], stride=[150528, 50176, 224, 1]))
)

Not realizing StorageBox with name: primals_123

IR realize_input StorageBox x: StorageBox(
  ExternKernelAlloc(
    name=buf0,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 112, 112], stride=[802816, 12544, 112, 1]),
    inputs=[InputBuffer(name='primals_123', layout=FixedLayout('cuda', torch.float32, size=[1, 3, 224, 224], stride=[150528, 50176, 224, 1])), InputBuffer(name='primals_1', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 7, 7], stride=[147, 49, 7, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (3, 3), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution}
  )
)

Not realizing StorageBox with name: buf0

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf6', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf5, i0)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(64,),
    origins={var_mean, squeeze_1, rsqrt, add_1}
  ))
)

Not realizing StorageBox with name: buf6

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf9', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 112, 112], stride=[802816, 12544, 112, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf0, i3 + 112 * i2 + 12544 * i1)
        tmp1 = ops.load(buf3, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf5, i1)
        tmp4 = ops.index_expr(12544, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_2, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_3, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 64, 112, 112],
    origins={var_mean, add_1, mul_6, rsqrt, add_4, mul, sub, relu}
  ))
)

Not realizing StorageBox with name: buf9

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf10', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp1 = ops.index_expr(0, torch.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp4 = ops.index_expr(112, torch.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp2 & tmp5
        tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp8 = ops.index_expr(0, torch.int64)
        tmp9 = tmp7 >= tmp8
        tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp11 = ops.index_expr(112, torch.int64)
        tmp12 = tmp10 < tmp11
        tmp13 = tmp9 & tmp12
        tmp14 = tmp6 & tmp13
        tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp16 = ops.masked(tmp14, tmp15, -inf)
        tmp17 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp18 = ops.index_expr(0, torch.int64)
        tmp19 = tmp17 >= tmp18
        tmp20 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp21 = ops.index_expr(112, torch.int64)
        tmp22 = tmp20 < tmp21
        tmp23 = tmp19 & tmp22
        tmp24 = ops.index_expr(2 * i3, torch.int64)
        tmp25 = ops.index_expr(0, torch.int64)
        tmp26 = tmp24 >= tmp25
        tmp27 = ops.index_expr(2 * i3, torch.int64)
        tmp28 = ops.index_expr(112, torch.int64)
        tmp29 = tmp27 < tmp28
        tmp30 = tmp26 & tmp29
        tmp31 = tmp23 & tmp30
        tmp32 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp33 = ops.masked(tmp31, tmp32, -inf)
        tmp34 = ops.maximum(tmp33, tmp16)
        tmp35 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp36 = ops.index_expr(0, torch.int64)
        tmp37 = tmp35 >= tmp36
        tmp38 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp39 = ops.index_expr(112, torch.int64)
        tmp40 = tmp38 < tmp39
        tmp41 = tmp37 & tmp40
        tmp42 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp43 = ops.index_expr(0, torch.int64)
        tmp44 = tmp42 >= tmp43
        tmp45 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp46 = ops.index_expr(112, torch.int64)
        tmp47 = tmp45 < tmp46
        tmp48 = tmp44 & tmp47
        tmp49 = tmp41 & tmp48
        tmp50 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp51 = ops.masked(tmp49, tmp50, -inf)
        tmp52 = ops.maximum(tmp51, tmp34)
        tmp53 = ops.index_expr(2 * i2, torch.int64)
        tmp54 = ops.index_expr(0, torch.int64)
        tmp55 = tmp53 >= tmp54
        tmp56 = ops.index_expr(2 * i2, torch.int64)
        tmp57 = ops.index_expr(112, torch.int64)
        tmp58 = tmp56 < tmp57
        tmp59 = tmp55 & tmp58
        tmp60 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp61 = ops.index_expr(0, torch.int64)
        tmp62 = tmp60 >= tmp61
        tmp63 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp64 = ops.index_expr(112, torch.int64)
        tmp65 = tmp63 < tmp64
        tmp66 = tmp62 & tmp65
        tmp67 = tmp59 & tmp66
        tmp68 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp69 = ops.masked(tmp67, tmp68, -inf)
        tmp70 = ops.maximum(tmp69, tmp52)
        tmp71 = ops.index_expr(2 * i2, torch.int64)
        tmp72 = ops.index_expr(0, torch.int64)
        tmp73 = tmp71 >= tmp72
        tmp74 = ops.index_expr(2 * i2, torch.int64)
        tmp75 = ops.index_expr(112, torch.int64)
        tmp76 = tmp74 < tmp75
        tmp77 = tmp73 & tmp76
        tmp78 = ops.index_expr(2 * i3, torch.int64)
        tmp79 = ops.index_expr(0, torch.int64)
        tmp80 = tmp78 >= tmp79
        tmp81 = ops.index_expr(2 * i3, torch.int64)
        tmp82 = ops.index_expr(112, torch.int64)
        tmp83 = tmp81 < tmp82
        tmp84 = tmp80 & tmp83
        tmp85 = tmp77 & tmp84
        tmp86 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
        tmp87 = ops.masked(tmp85, tmp86, -inf)
        tmp88 = ops.maximum(tmp87, tmp70)
        tmp89 = ops.index_expr(2 * i2, torch.int64)
        tmp90 = ops.index_expr(0, torch.int64)
        tmp91 = tmp89 >= tmp90
        tmp92 = ops.index_expr(2 * i2, torch.int64)
        tmp93 = ops.index_expr(112, torch.int64)
        tmp94 = tmp92 < tmp93
        tmp95 = tmp91 & tmp94
        tmp96 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp97 = ops.index_expr(0, torch.int64)
        tmp98 = tmp96 >= tmp97
        tmp99 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp100 = ops.index_expr(112, torch.int64)
        tmp101 = tmp99 < tmp100
        tmp102 = tmp98 & tmp101
        tmp103 = tmp95 & tmp102
        tmp104 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp105 = ops.masked(tmp103, tmp104, -inf)
        tmp106 = ops.maximum(tmp105, tmp88)
        tmp107 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp108 = ops.index_expr(0, torch.int64)
        tmp109 = tmp107 >= tmp108
        tmp110 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp111 = ops.index_expr(112, torch.int64)
        tmp112 = tmp110 < tmp111
        tmp113 = tmp109 & tmp112
        tmp114 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp115 = ops.index_expr(0, torch.int64)
        tmp116 = tmp114 >= tmp115
        tmp117 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp118 = ops.index_expr(112, torch.int64)
        tmp119 = tmp117 < tmp118
        tmp120 = tmp116 & tmp119
        tmp121 = tmp113 & tmp120
        tmp122 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp123 = ops.masked(tmp121, tmp122, -inf)
        tmp124 = ops.maximum(tmp123, tmp106)
        tmp125 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp126 = ops.index_expr(0, torch.int64)
        tmp127 = tmp125 >= tmp126
        tmp128 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp129 = ops.index_expr(112, torch.int64)
        tmp130 = tmp128 < tmp129
        tmp131 = tmp127 & tmp130
        tmp132 = ops.index_expr(2 * i3, torch.int64)
        tmp133 = ops.index_expr(0, torch.int64)
        tmp134 = tmp132 >= tmp133
        tmp135 = ops.index_expr(2 * i3, torch.int64)
        tmp136 = ops.index_expr(112, torch.int64)
        tmp137 = tmp135 < tmp136
        tmp138 = tmp134 & tmp137
        tmp139 = tmp131 & tmp138
        tmp140 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp141 = ops.masked(tmp139, tmp140, -inf)
        tmp142 = ops.maximum(tmp141, tmp124)
        tmp143 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp144 = ops.index_expr(0, torch.int64)
        tmp145 = tmp143 >= tmp144
        tmp146 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp147 = ops.index_expr(112, torch.int64)
        tmp148 = tmp146 < tmp147
        tmp149 = tmp145 & tmp148
        tmp150 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp151 = ops.index_expr(0, torch.int64)
        tmp152 = tmp150 >= tmp151
        tmp153 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp154 = ops.index_expr(112, torch.int64)
        tmp155 = tmp153 < tmp154
        tmp156 = tmp152 & tmp155
        tmp157 = tmp149 & tmp156
        tmp158 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp159 = ops.masked(tmp157, tmp158, -inf)
        tmp160 = ops.maximum(tmp159, tmp142)
        return tmp160
    ,
    ranges=[1, 64, 56, 56],
    origins={getitem_2}
  ))
)

Not realizing StorageBox with name: buf10

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf11', layout=FixedLayout('cuda', torch.int64, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp1 = ops.index_expr(0, torch.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp4 = ops.index_expr(112, torch.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp2 & tmp5
        tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp8 = ops.index_expr(0, torch.int64)
        tmp9 = tmp7 >= tmp8
        tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp11 = ops.index_expr(112, torch.int64)
        tmp12 = tmp10 < tmp11
        tmp13 = tmp9 & tmp12
        tmp14 = tmp6 & tmp13
        tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp16 = ops.masked(tmp14, tmp15, -inf)
        tmp17 = ops.index_expr(-113 + 2 * i3 + 224 * i2, torch.int64)
        tmp18 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp19 = ops.index_expr(0, torch.int64)
        tmp20 = tmp18 >= tmp19
        tmp21 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp22 = ops.index_expr(112, torch.int64)
        tmp23 = tmp21 < tmp22
        tmp24 = tmp20 & tmp23
        tmp25 = ops.index_expr(2 * i3, torch.int64)
        tmp26 = ops.index_expr(0, torch.int64)
        tmp27 = tmp25 >= tmp26
        tmp28 = ops.index_expr(2 * i3, torch.int64)
        tmp29 = ops.index_expr(112, torch.int64)
        tmp30 = tmp28 < tmp29
        tmp31 = tmp27 & tmp30
        tmp32 = tmp24 & tmp31
        tmp33 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp34 = ops.masked(tmp32, tmp33, -inf)
        tmp35 = ops.index_expr(-112 + 2 * i3 + 224 * i2, torch.int64)
        tmp36 = tmp34 > tmp16
        tmp37 = ops.where(tmp36, tmp35, tmp17)
        tmp38 = ops.maximum(tmp34, tmp16)
        tmp39 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp40 = ops.index_expr(0, torch.int64)
        tmp41 = tmp39 >= tmp40
        tmp42 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp43 = ops.index_expr(112, torch.int64)
        tmp44 = tmp42 < tmp43
        tmp45 = tmp41 & tmp44
        tmp46 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp47 = ops.index_expr(0, torch.int64)
        tmp48 = tmp46 >= tmp47
        tmp49 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp50 = ops.index_expr(112, torch.int64)
        tmp51 = tmp49 < tmp50
        tmp52 = tmp48 & tmp51
        tmp53 = tmp45 & tmp52
        tmp54 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp55 = ops.masked(tmp53, tmp54, -inf)
        tmp56 = ops.index_expr(-111 + 2 * i3 + 224 * i2, torch.int64)
        tmp57 = tmp55 > tmp38
        tmp58 = ops.where(tmp57, tmp56, tmp37)
        tmp59 = ops.maximum(tmp55, tmp38)
        tmp60 = ops.index_expr(2 * i2, torch.int64)
        tmp61 = ops.index_expr(0, torch.int64)
        tmp62 = tmp60 >= tmp61
        tmp63 = ops.index_expr(2 * i2, torch.int64)
        tmp64 = ops.index_expr(112, torch.int64)
        tmp65 = tmp63 < tmp64
        tmp66 = tmp62 & tmp65
        tmp67 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp68 = ops.index_expr(0, torch.int64)
        tmp69 = tmp67 >= tmp68
        tmp70 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp71 = ops.index_expr(112, torch.int64)
        tmp72 = tmp70 < tmp71
        tmp73 = tmp69 & tmp72
        tmp74 = tmp66 & tmp73
        tmp75 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp76 = ops.masked(tmp74, tmp75, -inf)
        tmp77 = ops.index_expr(-1 + 2 * i3 + 224 * i2, torch.int64)
        tmp78 = tmp76 > tmp59
        tmp79 = ops.where(tmp78, tmp77, tmp58)
        tmp80 = ops.maximum(tmp76, tmp59)
        tmp81 = ops.index_expr(2 * i2, torch.int64)
        tmp82 = ops.index_expr(0, torch.int64)
        tmp83 = tmp81 >= tmp82
        tmp84 = ops.index_expr(2 * i2, torch.int64)
        tmp85 = ops.index_expr(112, torch.int64)
        tmp86 = tmp84 < tmp85
        tmp87 = tmp83 & tmp86
        tmp88 = ops.index_expr(2 * i3, torch.int64)
        tmp89 = ops.index_expr(0, torch.int64)
        tmp90 = tmp88 >= tmp89
        tmp91 = ops.index_expr(2 * i3, torch.int64)
        tmp92 = ops.index_expr(112, torch.int64)
        tmp93 = tmp91 < tmp92
        tmp94 = tmp90 & tmp93
        tmp95 = tmp87 & tmp94
        tmp96 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
        tmp97 = ops.masked(tmp95, tmp96, -inf)
        tmp98 = ops.index_expr(2 * i3 + 224 * i2, torch.int64)
        tmp99 = tmp97 > tmp80
        tmp100 = ops.where(tmp99, tmp98, tmp79)
        tmp101 = ops.maximum(tmp97, tmp80)
        tmp102 = ops.index_expr(2 * i2, torch.int64)
        tmp103 = ops.index_expr(0, torch.int64)
        tmp104 = tmp102 >= tmp103
        tmp105 = ops.index_expr(2 * i2, torch.int64)
        tmp106 = ops.index_expr(112, torch.int64)
        tmp107 = tmp105 < tmp106
        tmp108 = tmp104 & tmp107
        tmp109 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp110 = ops.index_expr(0, torch.int64)
        tmp111 = tmp109 >= tmp110
        tmp112 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp113 = ops.index_expr(112, torch.int64)
        tmp114 = tmp112 < tmp113
        tmp115 = tmp111 & tmp114
        tmp116 = tmp108 & tmp115
        tmp117 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp118 = ops.masked(tmp116, tmp117, -inf)
        tmp119 = ops.index_expr(1 + 2 * i3 + 224 * i2, torch.int64)
        tmp120 = tmp118 > tmp101
        tmp121 = ops.where(tmp120, tmp119, tmp100)
        tmp122 = ops.maximum(tmp118, tmp101)
        tmp123 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp124 = ops.index_expr(0, torch.int64)
        tmp125 = tmp123 >= tmp124
        tmp126 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp127 = ops.index_expr(112, torch.int64)
        tmp128 = tmp126 < tmp127
        tmp129 = tmp125 & tmp128
        tmp130 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp131 = ops.index_expr(0, torch.int64)
        tmp132 = tmp130 >= tmp131
        tmp133 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp134 = ops.index_expr(112, torch.int64)
        tmp135 = tmp133 < tmp134
        tmp136 = tmp132 & tmp135
        tmp137 = tmp129 & tmp136
        tmp138 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp139 = ops.masked(tmp137, tmp138, -inf)
        tmp140 = ops.index_expr(111 + 2 * i3 + 224 * i2, torch.int64)
        tmp141 = tmp139 > tmp122
        tmp142 = ops.where(tmp141, tmp140, tmp121)
        tmp143 = ops.maximum(tmp139, tmp122)
        tmp144 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp145 = ops.index_expr(0, torch.int64)
        tmp146 = tmp144 >= tmp145
        tmp147 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp148 = ops.index_expr(112, torch.int64)
        tmp149 = tmp147 < tmp148
        tmp150 = tmp146 & tmp149
        tmp151 = ops.index_expr(2 * i3, torch.int64)
        tmp152 = ops.index_expr(0, torch.int64)
        tmp153 = tmp151 >= tmp152
        tmp154 = ops.index_expr(2 * i3, torch.int64)
        tmp155 = ops.index_expr(112, torch.int64)
        tmp156 = tmp154 < tmp155
        tmp157 = tmp153 & tmp156
        tmp158 = tmp150 & tmp157
        tmp159 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp160 = ops.masked(tmp158, tmp159, -inf)
        tmp161 = ops.index_expr(112 + 2 * i3 + 224 * i2, torch.int64)
        tmp162 = tmp160 > tmp143
        tmp163 = ops.where(tmp162, tmp161, tmp142)
        tmp164 = ops.maximum(tmp160, tmp143)
        tmp165 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp166 = ops.index_expr(0, torch.int64)
        tmp167 = tmp165 >= tmp166
        tmp168 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp169 = ops.index_expr(112, torch.int64)
        tmp170 = tmp168 < tmp169
        tmp171 = tmp167 & tmp170
        tmp172 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp173 = ops.index_expr(0, torch.int64)
        tmp174 = tmp172 >= tmp173
        tmp175 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp176 = ops.index_expr(112, torch.int64)
        tmp177 = tmp175 < tmp176
        tmp178 = tmp174 & tmp177
        tmp179 = tmp171 & tmp178
        tmp180 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp181 = ops.masked(tmp179, tmp180, -inf)
        tmp182 = ops.index_expr(113 + 2 * i3 + 224 * i2, torch.int64)
        tmp183 = tmp181 > tmp164
        tmp184 = ops.where(tmp183, tmp182, tmp163)
        tmp185 = ops.maximum(tmp181, tmp164)
        return tmp184
    ,
    ranges=[1, 64, 56, 56],
    origins={getitem_3}
  ))
)

Not realizing StorageBox with name: buf11

IR realize_input StorageBox x: StorageBox(
  ExternKernelAlloc(
    name=buf12,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf10', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp1 = ops.index_expr(0, torch.int64)
          tmp2 = tmp0 >= tmp1
          tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp4 = ops.index_expr(112, torch.int64)
          tmp5 = tmp3 < tmp4
          tmp6 = tmp2 & tmp5
          tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp8 = ops.index_expr(0, torch.int64)
          tmp9 = tmp7 >= tmp8
          tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp11 = ops.index_expr(112, torch.int64)
          tmp12 = tmp10 < tmp11
          tmp13 = tmp9 & tmp12
          tmp14 = tmp6 & tmp13
          tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp16 = ops.masked(tmp14, tmp15, -inf)
          tmp17 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp18 = ops.index_expr(0, torch.int64)
          tmp19 = tmp17 >= tmp18
          tmp20 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp21 = ops.index_expr(112, torch.int64)
          tmp22 = tmp20 < tmp21
          tmp23 = tmp19 & tmp22
          tmp24 = ops.index_expr(2 * i3, torch.int64)
          tmp25 = ops.index_expr(0, torch.int64)
          tmp26 = tmp24 >= tmp25
          tmp27 = ops.index_expr(2 * i3, torch.int64)
          tmp28 = ops.index_expr(112, torch.int64)
          tmp29 = tmp27 < tmp28
          tmp30 = tmp26 & tmp29
          tmp31 = tmp23 & tmp30
          tmp32 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp33 = ops.masked(tmp31, tmp32, -inf)
          tmp34 = ops.maximum(tmp33, tmp16)
          tmp35 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp36 = ops.index_expr(0, torch.int64)
          tmp37 = tmp35 >= tmp36
          tmp38 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp39 = ops.index_expr(112, torch.int64)
          tmp40 = tmp38 < tmp39
          tmp41 = tmp37 & tmp40
          tmp42 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp43 = ops.index_expr(0, torch.int64)
          tmp44 = tmp42 >= tmp43
          tmp45 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp46 = ops.index_expr(112, torch.int64)
          tmp47 = tmp45 < tmp46
          tmp48 = tmp44 & tmp47
          tmp49 = tmp41 & tmp48
          tmp50 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp51 = ops.masked(tmp49, tmp50, -inf)
          tmp52 = ops.maximum(tmp51, tmp34)
          tmp53 = ops.index_expr(2 * i2, torch.int64)
          tmp54 = ops.index_expr(0, torch.int64)
          tmp55 = tmp53 >= tmp54
          tmp56 = ops.index_expr(2 * i2, torch.int64)
          tmp57 = ops.index_expr(112, torch.int64)
          tmp58 = tmp56 < tmp57
          tmp59 = tmp55 & tmp58
          tmp60 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp61 = ops.index_expr(0, torch.int64)
          tmp62 = tmp60 >= tmp61
          tmp63 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp64 = ops.index_expr(112, torch.int64)
          tmp65 = tmp63 < tmp64
          tmp66 = tmp62 & tmp65
          tmp67 = tmp59 & tmp66
          tmp68 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp69 = ops.masked(tmp67, tmp68, -inf)
          tmp70 = ops.maximum(tmp69, tmp52)
          tmp71 = ops.index_expr(2 * i2, torch.int64)
          tmp72 = ops.index_expr(0, torch.int64)
          tmp73 = tmp71 >= tmp72
          tmp74 = ops.index_expr(2 * i2, torch.int64)
          tmp75 = ops.index_expr(112, torch.int64)
          tmp76 = tmp74 < tmp75
          tmp77 = tmp73 & tmp76
          tmp78 = ops.index_expr(2 * i3, torch.int64)
          tmp79 = ops.index_expr(0, torch.int64)
          tmp80 = tmp78 >= tmp79
          tmp81 = ops.index_expr(2 * i3, torch.int64)
          tmp82 = ops.index_expr(112, torch.int64)
          tmp83 = tmp81 < tmp82
          tmp84 = tmp80 & tmp83
          tmp85 = tmp77 & tmp84
          tmp86 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
          tmp87 = ops.masked(tmp85, tmp86, -inf)
          tmp88 = ops.maximum(tmp87, tmp70)
          tmp89 = ops.index_expr(2 * i2, torch.int64)
          tmp90 = ops.index_expr(0, torch.int64)
          tmp91 = tmp89 >= tmp90
          tmp92 = ops.index_expr(2 * i2, torch.int64)
          tmp93 = ops.index_expr(112, torch.int64)
          tmp94 = tmp92 < tmp93
          tmp95 = tmp91 & tmp94
          tmp96 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp97 = ops.index_expr(0, torch.int64)
          tmp98 = tmp96 >= tmp97
          tmp99 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp100 = ops.index_expr(112, torch.int64)
          tmp101 = tmp99 < tmp100
          tmp102 = tmp98 & tmp101
          tmp103 = tmp95 & tmp102
          tmp104 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp105 = ops.masked(tmp103, tmp104, -inf)
          tmp106 = ops.maximum(tmp105, tmp88)
          tmp107 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp108 = ops.index_expr(0, torch.int64)
          tmp109 = tmp107 >= tmp108
          tmp110 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp111 = ops.index_expr(112, torch.int64)
          tmp112 = tmp110 < tmp111
          tmp113 = tmp109 & tmp112
          tmp114 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp115 = ops.index_expr(0, torch.int64)
          tmp116 = tmp114 >= tmp115
          tmp117 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp118 = ops.index_expr(112, torch.int64)
          tmp119 = tmp117 < tmp118
          tmp120 = tmp116 & tmp119
          tmp121 = tmp113 & tmp120
          tmp122 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp123 = ops.masked(tmp121, tmp122, -inf)
          tmp124 = ops.maximum(tmp123, tmp106)
          tmp125 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp126 = ops.index_expr(0, torch.int64)
          tmp127 = tmp125 >= tmp126
          tmp128 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp129 = ops.index_expr(112, torch.int64)
          tmp130 = tmp128 < tmp129
          tmp131 = tmp127 & tmp130
          tmp132 = ops.index_expr(2 * i3, torch.int64)
          tmp133 = ops.index_expr(0, torch.int64)
          tmp134 = tmp132 >= tmp133
          tmp135 = ops.index_expr(2 * i3, torch.int64)
          tmp136 = ops.index_expr(112, torch.int64)
          tmp137 = tmp135 < tmp136
          tmp138 = tmp134 & tmp137
          tmp139 = tmp131 & tmp138
          tmp140 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp141 = ops.masked(tmp139, tmp140, -inf)
          tmp142 = ops.maximum(tmp141, tmp124)
          tmp143 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp144 = ops.index_expr(0, torch.int64)
          tmp145 = tmp143 >= tmp144
          tmp146 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp147 = ops.index_expr(112, torch.int64)
          tmp148 = tmp146 < tmp147
          tmp149 = tmp145 & tmp148
          tmp150 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp151 = ops.index_expr(0, torch.int64)
          tmp152 = tmp150 >= tmp151
          tmp153 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp154 = ops.index_expr(112, torch.int64)
          tmp155 = tmp153 < tmp154
          tmp156 = tmp152 & tmp155
          tmp157 = tmp149 & tmp156
          tmp158 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp159 = ops.masked(tmp157, tmp158, -inf)
          tmp160 = ops.maximum(tmp159, tmp142)
          return tmp160
      ,
      ranges=[1, 64, 56, 56],
      origins={getitem_2}
    )), InputBuffer(name='primals_4', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_1}
  )
)

Not realizing StorageBox with name: buf12

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf16', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf15, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(64,),
    origins={rsqrt_1, add_6, squeeze_4, var_mean_1}
  ))
)

Not realizing StorageBox with name: buf16

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf19', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf12, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf14, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf15, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_5, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_6, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 64, 56, 56],
    origins={relu_1, rsqrt_1, sub_1, add_6, mul_7, var_mean_1, mu...
  ))
)

Not realizing StorageBox with name: buf19

IR realize_input StorageBox x: StorageBox(
  ExternKernelAlloc(
    name=buf20,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf19', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf12, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf14, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf15, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_5, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_6, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 64, 56, 56],
      origins={relu_1, rsqrt_1, sub_1, add_6, mul_7, var_mean_1, mu...
    )), InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_2}
  )
)

Not realizing StorageBox with name: buf20

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf24', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf23, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(64,),
    origins={rsqrt_2, var_mean_2, squeeze_7, add_11}
  ))
)

Not realizing StorageBox with name: buf24

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf27', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf22, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf23, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_8, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_9, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf10, i3 + 56 * i2 + 3136 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 64, 56, 56],
    origins={add_11, add_15, mul_14, rsqrt_2, var_mean_2, mul_20,...
  ))
)

Not realizing StorageBox with name: buf27

IR realize_input StorageBox x: StorageBox(
  ExternKernelAlloc(
    name=buf28,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf27', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf22, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf23, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_8, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_9, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf10, i3 + 56 * i2 + 3136 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 64, 56, 56],
      origins={add_11, add_15, mul_14, rsqrt_2, var_mean_2, mul_20,...
    )), InputBuffer(name='primals_10', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_3}
  )
)

Not realizing StorageBox with name: buf28

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf32', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf31, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(64,),
    origins={rsqrt_3, add_17, var_mean_3, squeeze_10}
  ))
)

Not realizing StorageBox with name: buf32

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf35', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf28, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf30, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf31, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_11, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_12, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 64, 56, 56],
    origins={rsqrt_3, add_17, sub_3, add_20, mul_27, mul_21, var_...
  ))
)

Not realizing StorageBox with name: buf35

IR realize_input StorageBox x: StorageBox(
  ExternKernelAlloc(
    name=buf36,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf35', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf28, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf30, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf31, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_11, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_12, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 64, 56, 56],
      origins={rsqrt_3, add_17, sub_3, add_20, mul_27, mul_21, var_...
    )), InputBuffer(name='primals_13', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_4}
  )
)

Not realizing StorageBox with name: buf36

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf40', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf39, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(64,),
    origins={rsqrt_4, var_mean_4, add_22, squeeze_13}
  ))
)

Not realizing StorageBox with name: buf40

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf43', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf38, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf39, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_14, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_15, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 64, 56, 56],
    origins={relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, ...
  ))
)

Not realizing StorageBox with name: buf43

IR realize_input StorageBox x: StorageBox(
  ExternKernelAlloc(
    name=buf44,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf43', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf38, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf39, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_14, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_15, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 64, 56, 56],
      origins={relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, ...
    )), InputBuffer(name='primals_16', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_5}
  )
)

Not realizing StorageBox with name: buf44

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf48', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf47, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(128,),
    origins={squeeze_16, var_mean_5, add_28, rsqrt_5}
  ))
)

Not realizing StorageBox with name: buf48

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf51', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf44, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf46, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf47, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_17, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_18, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 128, 28, 28],
    origins={add_31, add_28, rsqrt_5, mul_35, sub_5, relu_5, mul_...
  ))
)

Not realizing StorageBox with name: buf51

IR realize_input StorageBox x: StorageBox(
  ExternKernelAlloc(
    name=buf52,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf51', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf44, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf46, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf47, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_17, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_18, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 128, 28, 28],
      origins={add_31, add_28, rsqrt_5, mul_35, sub_5, relu_5, mul_...
    )), InputBuffer(name='primals_19', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_6}
  )
)

Not realizing StorageBox with name: buf52

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf56', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf55, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(128,),
    origins={add_33, squeeze_19, rsqrt_6, var_mean_6}
  ))
)

Not realizing StorageBox with name: buf56

IR realize_input StorageBox x: StorageBox(
  ExternKernelAlloc(
    name=buf59,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf43', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf38, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf39, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_14, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_15, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 64, 56, 56],
      origins={relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, ...
    )), InputBuffer(name='primals_22', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 1, 1], stride=[64, 1, 1, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (0, 0), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_7}
  )
)

Not realizing StorageBox with name: buf59

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf63', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf62, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(128,),
    origins={var_mean_7, rsqrt_7, add_38, squeeze_22}
  ))
)

Not realizing StorageBox with name: buf63

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf67', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf66, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.relu(tmp0)
        return tmp1
    ,
    ranges=[1, 128, 28, 28],
    origins={relu_6}
  ))
)

Not realizing StorageBox with name: buf67

IR realize_input StorageBox x: StorageBox(
  ExternKernelAlloc(
    name=buf68,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf67', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf66, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.relu(tmp0)
          return tmp1
      ,
      ranges=[1, 128, 28, 28],
      origins={relu_6}
    )), InputBuffer(name='primals_25', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_8}
  )
)

Not realizing StorageBox with name: buf68

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf72', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf71, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(128,),
    origins={add_44, squeeze_25, rsqrt_8, var_mean_8}
  ))
)

Not realizing StorageBox with name: buf72

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf75', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf68, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf70, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf71, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_26, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_27, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 128, 28, 28],
    origins={add_44, sub_8, relu_7, rsqrt_8, add_47, mul_62, var_...
  ))
)

Not realizing StorageBox with name: buf75

IR realize_input StorageBox x: StorageBox(
  ExternKernelAlloc(
    name=buf76,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf75', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf68, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf70, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf71, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_26, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_27, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 128, 28, 28],
      origins={add_44, sub_8, relu_7, rsqrt_8, add_47, mul_62, var_...
    )), InputBuffer(name='primals_28', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_9}
  )
)

Not realizing StorageBox with name: buf76

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf80', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf79, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(128,),
    origins={squeeze_28, var_mean_9, rsqrt_9, add_49}
  ))
)

Not realizing StorageBox with name: buf80

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf83', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf78, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf79, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_29, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_30, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 128, 28, 28],
    origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
  ))
)

Not realizing StorageBox with name: buf83

IR realize_input StorageBox x: StorageBox(
  ExternKernelAlloc(
    name=buf84,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf83', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf78, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf79, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_29, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_30, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 128, 28, 28],
      origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
    )), InputBuffer(name='primals_31', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_10}
  )
)

Not realizing StorageBox with name: buf84

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf88', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf87, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(256,),
    origins={rsqrt_10, squeeze_31, var_mean_10, add_55}
  ))
)

Not realizing StorageBox with name: buf88

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf91', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf84, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf86, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf87, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_32, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_33, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 256, 14, 14],
    origins={var_mean_10, add_58, add_55, sub_10, mul_76, rsqrt_1...
  ))
)

Not realizing StorageBox with name: buf91

IR realize_input StorageBox x: StorageBox(
  ExternKernelAlloc(
    name=buf92,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf91', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf84, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf86, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf87, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_32, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_33, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 256, 14, 14],
      origins={var_mean_10, add_58, add_55, sub_10, mul_76, rsqrt_1...
    )), InputBuffer(name='primals_34', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_11}
  )
)

Not realizing StorageBox with name: buf92

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf96', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf95, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(256,),
    origins={squeeze_34, add_60, rsqrt_11, var_mean_11}
  ))
)

Not realizing StorageBox with name: buf96

IR realize_input StorageBox x: StorageBox(
  ExternKernelAlloc(
    name=buf99,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf83', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf78, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf79, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_29, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_30, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 128, 28, 28],
      origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
    )), InputBuffer(name='primals_37', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (0, 0), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_12}
  )
)

Not realizing StorageBox with name: buf99

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf103', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf102, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(256,),
    origins={var_mean_12, rsqrt_12, add_65, squeeze_37}
  ))
)

Not realizing StorageBox with name: buf103

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf107', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf106, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.relu(tmp0)
        return tmp1
    ,
    ranges=[1, 256, 14, 14],
    origins={relu_10}
  ))
)

Not realizing StorageBox with name: buf107

IR realize_input StorageBox x: StorageBox(
  ExternKernelAlloc(
    name=buf108,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf107', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf106, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.relu(tmp0)
          return tmp1
      ,
      ranges=[1, 256, 14, 14],
      origins={relu_10}
    )), InputBuffer(name='primals_40', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_13}
  )
)

Not realizing StorageBox with name: buf108

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf112', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf111, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(256,),
    origins={squeeze_40, rsqrt_13, add_71, var_mean_13}
  ))
)

Not realizing StorageBox with name: buf112

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf115', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf108, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf110, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf111, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_41, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_42, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_91, relu_11, mul_97, rsqrt_13, add_74, sub_13, a...
  ))
)

Not realizing StorageBox with name: buf115

IR realize_input StorageBox x: StorageBox(
  ExternKernelAlloc(
    name=buf116,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf115', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf108, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf110, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf111, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_41, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_42, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 256, 14, 14],
      origins={mul_91, relu_11, mul_97, rsqrt_13, add_74, sub_13, a...
    )), InputBuffer(name='primals_43', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_14}
  )
)

Not realizing StorageBox with name: buf116

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf120', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf119, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(256,),
    origins={squeeze_43, var_mean_14, add_76, rsqrt_14}
  ))
)

Not realizing StorageBox with name: buf120

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf123', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf118, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf119, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_44, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_45, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_98, add_80, var_mean_14, add_79, add_76, relu_12...
  ))
)

Not realizing StorageBox with name: buf123

IR realize_input StorageBox x: StorageBox(
  ExternKernelAlloc(
    name=buf124,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf123', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf118, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf119, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_44, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_45, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 256, 14, 14],
      origins={mul_98, add_80, var_mean_14, add_79, add_76, relu_12...
    )), InputBuffer(name='primals_46', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_15}
  )
)

Not realizing StorageBox with name: buf124

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf128', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf127, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(512,),
    origins={add_82, squeeze_46, rsqrt_15, var_mean_15}
  ))
)

Not realizing StorageBox with name: buf128

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf131', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf124, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf126, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf127, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_47, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_48, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 512, 7, 7],
    origins={relu_13, add_85, mul_111, add_82, rsqrt_15, sub_15, ...
  ))
)

Not realizing StorageBox with name: buf131

IR realize_input StorageBox x: StorageBox(
  ExternKernelAlloc(
    name=buf132,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf131', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf124, i3 + 7 * i2 + 49 * i1)
          tmp1 = ops.load(buf126, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf127, i1)
          tmp4 = ops.index_expr(49, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_47, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_48, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 512, 7, 7],
      origins={relu_13, add_85, mul_111, add_82, rsqrt_15, sub_15, ...
    )), InputBuffer(name='primals_49', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_16}
  )
)

Not realizing StorageBox with name: buf132

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf136', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf135, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(512,),
    origins={rsqrt_16, var_mean_16, add_87, squeeze_49}
  ))
)

Not realizing StorageBox with name: buf136

IR realize_input StorageBox x: StorageBox(
  ExternKernelAlloc(
    name=buf139,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf123', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf118, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf119, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_44, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_45, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 256, 14, 14],
      origins={mul_98, add_80, var_mean_14, add_79, add_76, relu_12...
    )), InputBuffer(name='primals_52', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (0, 0), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_17}
  )
)

Not realizing StorageBox with name: buf139

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf143', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf142, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(512,),
    origins={add_92, var_mean_17, squeeze_52, rsqrt_17}
  ))
)

Not realizing StorageBox with name: buf143

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf147', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf146, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.relu(tmp0)
        return tmp1
    ,
    ranges=[1, 512, 7, 7],
    origins={relu_14}
  ))
)

Not realizing StorageBox with name: buf147

IR realize_input StorageBox x: StorageBox(
  ExternKernelAlloc(
    name=buf148,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf147', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf146, i3 + 7 * i2 + 49 * i1)
          tmp1 = ops.relu(tmp0)
          return tmp1
      ,
      ranges=[1, 512, 7, 7],
      origins={relu_14}
    )), InputBuffer(name='primals_55', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_18}
  )
)

Not realizing StorageBox with name: buf148

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf152', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf151, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(512,),
    origins={squeeze_55, add_98, var_mean_18, rsqrt_18}
  ))
)

Not realizing StorageBox with name: buf152

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf155', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf148, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf150, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf151, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_56, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_57, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 512, 7, 7],
    origins={sub_18, add_101, rsqrt_18, relu_15, add_98, mul_132,...
  ))
)

Not realizing StorageBox with name: buf155

IR realize_input StorageBox x: StorageBox(
  ExternKernelAlloc(
    name=buf156,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf155', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf148, i3 + 7 * i2 + 49 * i1)
          tmp1 = ops.load(buf150, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf151, i1)
          tmp4 = ops.index_expr(49, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_56, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_57, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 512, 7, 7],
      origins={sub_18, add_101, rsqrt_18, relu_15, add_98, mul_132,...
    )), InputBuffer(name='primals_58', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_19}
  )
)

Not realizing StorageBox with name: buf156

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf160', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf159, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(512,),
    origins={add_103, var_mean_19, squeeze_58, rsqrt_19}
  ))
)

Not realizing StorageBox with name: buf160

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf165', layout=FixedLayout('cuda', torch.float32, size=(1, 512), stride=[512, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1 = index
        tmp0 = ops.load(buf164, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=(1, 512),
    origins={mean, view}
  ))
)

Not realizing StorageBox with name: buf165

IR realize_input StorageBox x: StorageBox(
  ComputedBuffer(name='buf167', layout=FixedLayout('cuda', torch.bool, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.bool,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf163, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.constant(0, torch.float32)
        tmp2 = tmp0 <= tmp1
        return tmp2
    ,
    ranges=[1, 512, 7, 7],
    origins={le}
  ))
)

Not realizing StorageBox with name: buf167

Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_1

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_2

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_3

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_4

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_5

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_6

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_7

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_8

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_9

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_10

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_11

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_12

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_13

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_14

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_15

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_16

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_17

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_18

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_19

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_20

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_21

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_22

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_23

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_24

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_25

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_26

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_27

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_28

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_29

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_30

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_31

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_32

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_33

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_34

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_35

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_36

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_37

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_38

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_39

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_40

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_41

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_42

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_43

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_44

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_45

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_46

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_47

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_48

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_49

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_50

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_51

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_52

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_53

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_54

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_55

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_56

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_57

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_58

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_59

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_60

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_61

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_62

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_63

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_64

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_65

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_66

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_67

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_68

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_69

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_70

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_71

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_72

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_73

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_74

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_75

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_76

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_77

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_78

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_79

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_80

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_81

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_82

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_83

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_84

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_85

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_86

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_87

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_88

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_89

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_90

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_91

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_92

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_93

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_94

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_95

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_96

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_97

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_98

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_99

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_100

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_101

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_102

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_103

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_104

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_105

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_106

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_107

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_108

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_109

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_110

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_111

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_112

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_113

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_114

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_115

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_116

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_117

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_118

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_119

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_120

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_121

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_122

Graph.lowering Input Post-Realize-------------------------


Graph.lowering Input Pre-Realize-------------------------


Not realizing StorageBox with name: primals_123

Graph.lowering Input Post-Realize-------------------------



Realized Graph.lowering Output-------------------------

Node 0: StorageBox(
  ComputedBuffer(name='buf7', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf3, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_63, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[64],
    origins={add_2, mul_2, mul_1}
  ))
)
Node 1: StorageBox(
  ComputedBuffer(name='buf8', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf5, i0)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0000797257434426, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_64, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(64,),
    origins={mul_4, add_3, mul_5, mul_3}
  ))
)
Node 2: StorageBox(
  ComputedBuffer(name='buf168', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_65, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add}
  ))
)
Node 3: StorageBox(
  ComputedBuffer(name='buf17', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf14, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_66, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[64],
    origins={mul_8, mul_9, add_7}
  ))
)
Node 4: StorageBox(
  ComputedBuffer(name='buf18', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf15, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_67, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(64,),
    origins={mul_10, mul_11, mul_12, add_8}
  ))
)
Node 5: StorageBox(
  ComputedBuffer(name='buf169', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_68, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_5}
  ))
)
Node 6: StorageBox(
  ComputedBuffer(name='buf25', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf22, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_69, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[64],
    origins={mul_15, add_12, mul_16}
  ))
)
Node 7: StorageBox(
  ComputedBuffer(name='buf26', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf23, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_70, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(64,),
    origins={mul_19, mul_17, add_13, mul_18}
  ))
)
Node 8: StorageBox(
  ComputedBuffer(name='buf170', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_71, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_10}
  ))
)
Node 9: StorageBox(
  ComputedBuffer(name='buf33', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf30, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_72, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[64],
    origins={mul_23, add_18, mul_22}
  ))
)
Node 10: StorageBox(
  ComputedBuffer(name='buf34', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf31, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_73, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(64,),
    origins={mul_26, mul_25, mul_24, add_19}
  ))
)
Node 11: StorageBox(
  ComputedBuffer(name='buf171', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_74, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_16}
  ))
)
Node 12: StorageBox(
  ComputedBuffer(name='buf41', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf38, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_75, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[64],
    origins={mul_30, mul_29, add_23}
  ))
)
Node 13: StorageBox(
  ComputedBuffer(name='buf42', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf39, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0003189792663476, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_76, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(64,),
    origins={mul_32, mul_33, mul_31, add_24}
  ))
)
Node 14: StorageBox(
  ComputedBuffer(name='buf172', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_77, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_21}
  ))
)
Node 15: StorageBox(
  ComputedBuffer(name='buf49', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf46, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_78, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[128],
    origins={mul_36, add_29, mul_37}
  ))
)
Node 16: StorageBox(
  ComputedBuffer(name='buf50', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf47, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_79, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(128,),
    origins={mul_40, add_30, mul_38, mul_39}
  ))
)
Node 17: StorageBox(
  ComputedBuffer(name='buf173', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_80, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_27}
  ))
)
Node 18: StorageBox(
  ComputedBuffer(name='buf57', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf54, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_81, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[128],
    origins={add_34, mul_43, mul_44}
  ))
)
Node 19: StorageBox(
  ComputedBuffer(name='buf58', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf55, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_82, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(128,),
    origins={mul_45, add_35, mul_47, mul_46}
  ))
)
Node 20: StorageBox(
  ComputedBuffer(name='buf174', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_83, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_32}
  ))
)
Node 21: StorageBox(
  ComputedBuffer(name='buf64', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf61, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_84, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[128],
    origins={mul_50, add_39, mul_51}
  ))
)
Node 22: StorageBox(
  ComputedBuffer(name='buf65', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf62, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_85, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(128,),
    origins={mul_52, mul_53, mul_54, add_40}
  ))
)
Node 23: StorageBox(
  ComputedBuffer(name='buf175', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_86, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_37}
  ))
)
Node 24: StorageBox(
  ComputedBuffer(name='buf73', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf70, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_87, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[128],
    origins={add_45, mul_57, mul_58}
  ))
)
Node 25: StorageBox(
  ComputedBuffer(name='buf74', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf71, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_88, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(128,),
    origins={mul_60, mul_59, mul_61, add_46}
  ))
)
Node 26: StorageBox(
  ComputedBuffer(name='buf176', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_89, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_43}
  ))
)
Node 27: StorageBox(
  ComputedBuffer(name='buf81', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf78, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_90, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[128],
    origins={mul_64, add_50, mul_65}
  ))
)
Node 28: StorageBox(
  ComputedBuffer(name='buf82', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf79, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0012771392081736, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_91, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(128,),
    origins={mul_66, mul_67, add_51, mul_68}
  ))
)
Node 29: StorageBox(
  ComputedBuffer(name='buf177', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_92, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_48}
  ))
)
Node 30: StorageBox(
  ComputedBuffer(name='buf89', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf86, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_93, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[256],
    origins={add_56, mul_72, mul_71}
  ))
)
Node 31: StorageBox(
  ComputedBuffer(name='buf90', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf87, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_94, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(256,),
    origins={add_57, mul_74, mul_73, mul_75}
  ))
)
Node 32: StorageBox(
  ComputedBuffer(name='buf178', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_95, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_54}
  ))
)
Node 33: StorageBox(
  ComputedBuffer(name='buf97', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf94, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_96, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[256],
    origins={add_61, mul_79, mul_78}
  ))
)
Node 34: StorageBox(
  ComputedBuffer(name='buf98', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf95, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_97, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(256,),
    origins={mul_81, add_62, mul_80, mul_82}
  ))
)
Node 35: StorageBox(
  ComputedBuffer(name='buf179', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_98, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_59}
  ))
)
Node 36: StorageBox(
  ComputedBuffer(name='buf104', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf101, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_99, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[256],
    origins={mul_85, add_66, mul_86}
  ))
)
Node 37: StorageBox(
  ComputedBuffer(name='buf105', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf102, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_100, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(256,),
    origins={mul_87, add_67, mul_88, mul_89}
  ))
)
Node 38: StorageBox(
  ComputedBuffer(name='buf180', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_101, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_64}
  ))
)
Node 39: StorageBox(
  ComputedBuffer(name='buf113', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf110, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_102, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[256],
    origins={mul_92, mul_93, add_72}
  ))
)
Node 40: StorageBox(
  ComputedBuffer(name='buf114', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf111, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_103, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(256,),
    origins={mul_96, mul_94, add_73, mul_95}
  ))
)
Node 41: StorageBox(
  ComputedBuffer(name='buf181', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_104, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_70}
  ))
)
Node 42: StorageBox(
  ComputedBuffer(name='buf121', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf118, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_105, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[256],
    origins={mul_99, mul_100, add_77}
  ))
)
Node 43: StorageBox(
  ComputedBuffer(name='buf122', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf119, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.005128205128205, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_106, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(256,),
    origins={mul_103, add_78, mul_102, mul_101}
  ))
)
Node 44: StorageBox(
  ComputedBuffer(name='buf182', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_107, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_75}
  ))
)
Node 45: StorageBox(
  ComputedBuffer(name='buf129', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf126, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_108, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[512],
    origins={mul_107, add_83, mul_106}
  ))
)
Node 46: StorageBox(
  ComputedBuffer(name='buf130', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf127, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_109, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(512,),
    origins={add_84, mul_110, mul_108, mul_109}
  ))
)
Node 47: StorageBox(
  ComputedBuffer(name='buf183', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_110, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_81}
  ))
)
Node 48: StorageBox(
  ComputedBuffer(name='buf137', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf134, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_111, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[512],
    origins={add_88, mul_114, mul_113}
  ))
)
Node 49: StorageBox(
  ComputedBuffer(name='buf138', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf135, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_112, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(512,),
    origins={mul_115, add_89, mul_117, mul_116}
  ))
)
Node 50: StorageBox(
  ComputedBuffer(name='buf184', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_113, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_86}
  ))
)
Node 51: StorageBox(
  ComputedBuffer(name='buf144', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf141, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_114, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[512],
    origins={add_93, mul_121, mul_120}
  ))
)
Node 52: StorageBox(
  ComputedBuffer(name='buf145', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf142, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_115, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(512,),
    origins={add_94, mul_123, mul_124, mul_122}
  ))
)
Node 53: StorageBox(
  ComputedBuffer(name='buf185', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_116, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_91}
  ))
)
Node 54: StorageBox(
  ComputedBuffer(name='buf153', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf150, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_117, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[512],
    origins={mul_128, add_99, mul_127}
  ))
)
Node 55: StorageBox(
  ComputedBuffer(name='buf154', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf151, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_118, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(512,),
    origins={mul_130, add_100, mul_131, mul_129}
  ))
)
Node 56: StorageBox(
  ComputedBuffer(name='buf186', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_119, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_97}
  ))
)
Node 57: StorageBox(
  ComputedBuffer(name='buf161', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf158, i0)
        tmp1 = ops.constant(0.1, torch.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = ops.load(primals_120, i0)
        tmp4 = ops.constant(0.9, torch.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tmp2 + tmp5
        return tmp6
    ,
    ranges=[512],
    origins={mul_135, add_104, mul_134}
  ))
)
Node 58: StorageBox(
  ComputedBuffer(name='buf162', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf159, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1.0208333333333333, torch.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = ops.constant(0.1, torch.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = ops.load(primals_121, i0)
        tmp8 = ops.constant(0.9, torch.float32)
        tmp9 = tmp7 * tmp8
        tmp10 = tmp6 + tmp9
        return tmp10
    ,
    ranges=(512,),
    origins={mul_137, add_105, mul_136, mul_138}
  ))
)
Node 59: StorageBox(
  ComputedBuffer(name='buf187', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        tmp0 = ops.load(primals_122, 0)
        tmp1 = ops.constant(1, torch.int64)
        tmp2 = tmp0 + tmp1
        return tmp2
    ,
    ranges=[],
    origins={add_102}
  ))
)
Node 60: StorageBox(
  ExternKernelOut(
    name=buf166,
    layout=FixedLayout('cuda', torch.float32, size=[1, 1000], stride=[1000, 1]),
    inputs=[InputBuffer(name='primals_62', layout=FixedLayout('cuda', torch.float32, size=[1000], stride=[1])), ComputedBuffer(name='buf165', layout=FixedLayout('cuda', torch.float32, size=(1, 512), stride=[512, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1 = index
          tmp0 = ops.load(buf164, i1)
          tmp1 = ops.index_expr(49, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=(1, 512),
      origins={mean, view}
    )), ReinterpretView(
      StorageBox(
        InputBuffer(name='primals_61', layout=FixedLayout('cuda', torch.float32, size=[1000, 512], stride=[512, 1]))
      ),
      FixedLayout('cuda', torch.float32, size=[512, 1000], stride=[1, 512]),
      origins=
    )],
    constant_args=(),
    kwargs={'alpha': 1, 'beta': 1},
    output_view=None,
    origins={addmm}
  )
)
Node 61: StorageBox(
  InputBuffer(name='primals_1', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 7, 7], stride=[147, 49, 7, 1]))
)
Node 62: StorageBox(
  InputBuffer(name='primals_2', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)
Node 63: StorageBox(
  InputBuffer(name='primals_4', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))
)
Node 64: StorageBox(
  InputBuffer(name='primals_5', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)
Node 65: StorageBox(
  InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))
)
Node 66: StorageBox(
  InputBuffer(name='primals_8', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)
Node 67: StorageBox(
  InputBuffer(name='primals_10', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))
)
Node 68: StorageBox(
  InputBuffer(name='primals_11', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)
Node 69: StorageBox(
  InputBuffer(name='primals_13', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))
)
Node 70: StorageBox(
  InputBuffer(name='primals_14', layout=FixedLayout('cuda', torch.float32, size=[64], stride=[1]))
)
Node 71: StorageBox(
  InputBuffer(name='primals_16', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 3, 3], stride=[576, 9, 3, 1]))
)
Node 72: StorageBox(
  InputBuffer(name='primals_17', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)
Node 73: StorageBox(
  InputBuffer(name='primals_19', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))
)
Node 74: StorageBox(
  InputBuffer(name='primals_20', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)
Node 75: StorageBox(
  InputBuffer(name='primals_22', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 1, 1], stride=[64, 1, 1, 1]))
)
Node 76: StorageBox(
  InputBuffer(name='primals_23', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)
Node 77: StorageBox(
  InputBuffer(name='primals_25', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))
)
Node 78: StorageBox(
  InputBuffer(name='primals_26', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)
Node 79: StorageBox(
  InputBuffer(name='primals_28', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))
)
Node 80: StorageBox(
  InputBuffer(name='primals_29', layout=FixedLayout('cuda', torch.float32, size=[128], stride=[1]))
)
Node 81: StorageBox(
  InputBuffer(name='primals_31', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1]))
)
Node 82: StorageBox(
  InputBuffer(name='primals_32', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)
Node 83: StorageBox(
  InputBuffer(name='primals_34', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))
)
Node 84: StorageBox(
  InputBuffer(name='primals_35', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)
Node 85: StorageBox(
  InputBuffer(name='primals_37', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1]))
)
Node 86: StorageBox(
  InputBuffer(name='primals_38', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)
Node 87: StorageBox(
  InputBuffer(name='primals_40', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))
)
Node 88: StorageBox(
  InputBuffer(name='primals_41', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)
Node 89: StorageBox(
  InputBuffer(name='primals_43', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))
)
Node 90: StorageBox(
  InputBuffer(name='primals_44', layout=FixedLayout('cuda', torch.float32, size=[256], stride=[1]))
)
Node 91: StorageBox(
  InputBuffer(name='primals_46', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 3, 3], stride=[2304, 9, 3, 1]))
)
Node 92: StorageBox(
  InputBuffer(name='primals_47', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)
Node 93: StorageBox(
  InputBuffer(name='primals_49', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))
)
Node 94: StorageBox(
  InputBuffer(name='primals_50', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)
Node 95: StorageBox(
  InputBuffer(name='primals_52', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1]))
)
Node 96: StorageBox(
  InputBuffer(name='primals_53', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)
Node 97: StorageBox(
  InputBuffer(name='primals_55', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))
)
Node 98: StorageBox(
  InputBuffer(name='primals_56', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)
Node 99: StorageBox(
  InputBuffer(name='primals_58', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))
)
Node 100: StorageBox(
  InputBuffer(name='primals_59', layout=FixedLayout('cuda', torch.float32, size=[512], stride=[1]))
)
Node 101: StorageBox(
  InputBuffer(name='primals_123', layout=FixedLayout('cuda', torch.float32, size=[1, 3, 224, 224], stride=[150528, 50176, 224, 1]))
)
Node 102: StorageBox(
  ExternKernelAlloc(
    name=buf0,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 112, 112], stride=[802816, 12544, 112, 1]),
    inputs=[InputBuffer(name='primals_123', layout=FixedLayout('cuda', torch.float32, size=[1, 3, 224, 224], stride=[150528, 50176, 224, 1])), InputBuffer(name='primals_1', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 7, 7], stride=[147, 49, 7, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (3, 3), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution}
  )
)
Node 103: StorageBox(
  ComputedBuffer(name='buf6', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf5, i0)
        tmp1 = ops.index_expr(12544, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(64,),
    origins={var_mean, squeeze_1, rsqrt, add_1}
  ))
)
Node 104: StorageBox(
  ComputedBuffer(name='buf9', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 112, 112], stride=[802816, 12544, 112, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf0, i3 + 112 * i2 + 12544 * i1)
        tmp1 = ops.load(buf3, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf5, i1)
        tmp4 = ops.index_expr(12544, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_2, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_3, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 64, 112, 112],
    origins={var_mean, add_1, mul_6, rsqrt, add_4, mul, sub, relu}
  ))
)
Node 105: StorageBox(
  ComputedBuffer(name='buf10', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp1 = ops.index_expr(0, torch.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp4 = ops.index_expr(112, torch.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp2 & tmp5
        tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp8 = ops.index_expr(0, torch.int64)
        tmp9 = tmp7 >= tmp8
        tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp11 = ops.index_expr(112, torch.int64)
        tmp12 = tmp10 < tmp11
        tmp13 = tmp9 & tmp12
        tmp14 = tmp6 & tmp13
        tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp16 = ops.masked(tmp14, tmp15, -inf)
        tmp17 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp18 = ops.index_expr(0, torch.int64)
        tmp19 = tmp17 >= tmp18
        tmp20 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp21 = ops.index_expr(112, torch.int64)
        tmp22 = tmp20 < tmp21
        tmp23 = tmp19 & tmp22
        tmp24 = ops.index_expr(2 * i3, torch.int64)
        tmp25 = ops.index_expr(0, torch.int64)
        tmp26 = tmp24 >= tmp25
        tmp27 = ops.index_expr(2 * i3, torch.int64)
        tmp28 = ops.index_expr(112, torch.int64)
        tmp29 = tmp27 < tmp28
        tmp30 = tmp26 & tmp29
        tmp31 = tmp23 & tmp30
        tmp32 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp33 = ops.masked(tmp31, tmp32, -inf)
        tmp34 = ops.maximum(tmp33, tmp16)
        tmp35 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp36 = ops.index_expr(0, torch.int64)
        tmp37 = tmp35 >= tmp36
        tmp38 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp39 = ops.index_expr(112, torch.int64)
        tmp40 = tmp38 < tmp39
        tmp41 = tmp37 & tmp40
        tmp42 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp43 = ops.index_expr(0, torch.int64)
        tmp44 = tmp42 >= tmp43
        tmp45 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp46 = ops.index_expr(112, torch.int64)
        tmp47 = tmp45 < tmp46
        tmp48 = tmp44 & tmp47
        tmp49 = tmp41 & tmp48
        tmp50 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp51 = ops.masked(tmp49, tmp50, -inf)
        tmp52 = ops.maximum(tmp51, tmp34)
        tmp53 = ops.index_expr(2 * i2, torch.int64)
        tmp54 = ops.index_expr(0, torch.int64)
        tmp55 = tmp53 >= tmp54
        tmp56 = ops.index_expr(2 * i2, torch.int64)
        tmp57 = ops.index_expr(112, torch.int64)
        tmp58 = tmp56 < tmp57
        tmp59 = tmp55 & tmp58
        tmp60 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp61 = ops.index_expr(0, torch.int64)
        tmp62 = tmp60 >= tmp61
        tmp63 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp64 = ops.index_expr(112, torch.int64)
        tmp65 = tmp63 < tmp64
        tmp66 = tmp62 & tmp65
        tmp67 = tmp59 & tmp66
        tmp68 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp69 = ops.masked(tmp67, tmp68, -inf)
        tmp70 = ops.maximum(tmp69, tmp52)
        tmp71 = ops.index_expr(2 * i2, torch.int64)
        tmp72 = ops.index_expr(0, torch.int64)
        tmp73 = tmp71 >= tmp72
        tmp74 = ops.index_expr(2 * i2, torch.int64)
        tmp75 = ops.index_expr(112, torch.int64)
        tmp76 = tmp74 < tmp75
        tmp77 = tmp73 & tmp76
        tmp78 = ops.index_expr(2 * i3, torch.int64)
        tmp79 = ops.index_expr(0, torch.int64)
        tmp80 = tmp78 >= tmp79
        tmp81 = ops.index_expr(2 * i3, torch.int64)
        tmp82 = ops.index_expr(112, torch.int64)
        tmp83 = tmp81 < tmp82
        tmp84 = tmp80 & tmp83
        tmp85 = tmp77 & tmp84
        tmp86 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
        tmp87 = ops.masked(tmp85, tmp86, -inf)
        tmp88 = ops.maximum(tmp87, tmp70)
        tmp89 = ops.index_expr(2 * i2, torch.int64)
        tmp90 = ops.index_expr(0, torch.int64)
        tmp91 = tmp89 >= tmp90
        tmp92 = ops.index_expr(2 * i2, torch.int64)
        tmp93 = ops.index_expr(112, torch.int64)
        tmp94 = tmp92 < tmp93
        tmp95 = tmp91 & tmp94
        tmp96 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp97 = ops.index_expr(0, torch.int64)
        tmp98 = tmp96 >= tmp97
        tmp99 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp100 = ops.index_expr(112, torch.int64)
        tmp101 = tmp99 < tmp100
        tmp102 = tmp98 & tmp101
        tmp103 = tmp95 & tmp102
        tmp104 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp105 = ops.masked(tmp103, tmp104, -inf)
        tmp106 = ops.maximum(tmp105, tmp88)
        tmp107 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp108 = ops.index_expr(0, torch.int64)
        tmp109 = tmp107 >= tmp108
        tmp110 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp111 = ops.index_expr(112, torch.int64)
        tmp112 = tmp110 < tmp111
        tmp113 = tmp109 & tmp112
        tmp114 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp115 = ops.index_expr(0, torch.int64)
        tmp116 = tmp114 >= tmp115
        tmp117 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp118 = ops.index_expr(112, torch.int64)
        tmp119 = tmp117 < tmp118
        tmp120 = tmp116 & tmp119
        tmp121 = tmp113 & tmp120
        tmp122 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp123 = ops.masked(tmp121, tmp122, -inf)
        tmp124 = ops.maximum(tmp123, tmp106)
        tmp125 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp126 = ops.index_expr(0, torch.int64)
        tmp127 = tmp125 >= tmp126
        tmp128 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp129 = ops.index_expr(112, torch.int64)
        tmp130 = tmp128 < tmp129
        tmp131 = tmp127 & tmp130
        tmp132 = ops.index_expr(2 * i3, torch.int64)
        tmp133 = ops.index_expr(0, torch.int64)
        tmp134 = tmp132 >= tmp133
        tmp135 = ops.index_expr(2 * i3, torch.int64)
        tmp136 = ops.index_expr(112, torch.int64)
        tmp137 = tmp135 < tmp136
        tmp138 = tmp134 & tmp137
        tmp139 = tmp131 & tmp138
        tmp140 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp141 = ops.masked(tmp139, tmp140, -inf)
        tmp142 = ops.maximum(tmp141, tmp124)
        tmp143 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp144 = ops.index_expr(0, torch.int64)
        tmp145 = tmp143 >= tmp144
        tmp146 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp147 = ops.index_expr(112, torch.int64)
        tmp148 = tmp146 < tmp147
        tmp149 = tmp145 & tmp148
        tmp150 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp151 = ops.index_expr(0, torch.int64)
        tmp152 = tmp150 >= tmp151
        tmp153 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp154 = ops.index_expr(112, torch.int64)
        tmp155 = tmp153 < tmp154
        tmp156 = tmp152 & tmp155
        tmp157 = tmp149 & tmp156
        tmp158 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp159 = ops.masked(tmp157, tmp158, -inf)
        tmp160 = ops.maximum(tmp159, tmp142)
        return tmp160
    ,
    ranges=[1, 64, 56, 56],
    origins={getitem_2}
  ))
)
Node 106: StorageBox(
  ComputedBuffer(name='buf11', layout=FixedLayout('cuda', torch.int64, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.int64,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp1 = ops.index_expr(0, torch.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp4 = ops.index_expr(112, torch.int64)
        tmp5 = tmp3 < tmp4
        tmp6 = tmp2 & tmp5
        tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp8 = ops.index_expr(0, torch.int64)
        tmp9 = tmp7 >= tmp8
        tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp11 = ops.index_expr(112, torch.int64)
        tmp12 = tmp10 < tmp11
        tmp13 = tmp9 & tmp12
        tmp14 = tmp6 & tmp13
        tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp16 = ops.masked(tmp14, tmp15, -inf)
        tmp17 = ops.index_expr(-113 + 2 * i3 + 224 * i2, torch.int64)
        tmp18 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp19 = ops.index_expr(0, torch.int64)
        tmp20 = tmp18 >= tmp19
        tmp21 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp22 = ops.index_expr(112, torch.int64)
        tmp23 = tmp21 < tmp22
        tmp24 = tmp20 & tmp23
        tmp25 = ops.index_expr(2 * i3, torch.int64)
        tmp26 = ops.index_expr(0, torch.int64)
        tmp27 = tmp25 >= tmp26
        tmp28 = ops.index_expr(2 * i3, torch.int64)
        tmp29 = ops.index_expr(112, torch.int64)
        tmp30 = tmp28 < tmp29
        tmp31 = tmp27 & tmp30
        tmp32 = tmp24 & tmp31
        tmp33 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp34 = ops.masked(tmp32, tmp33, -inf)
        tmp35 = ops.index_expr(-112 + 2 * i3 + 224 * i2, torch.int64)
        tmp36 = tmp34 > tmp16
        tmp37 = ops.where(tmp36, tmp35, tmp17)
        tmp38 = ops.maximum(tmp34, tmp16)
        tmp39 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp40 = ops.index_expr(0, torch.int64)
        tmp41 = tmp39 >= tmp40
        tmp42 = ops.index_expr(-1 + 2 * i2, torch.int64)
        tmp43 = ops.index_expr(112, torch.int64)
        tmp44 = tmp42 < tmp43
        tmp45 = tmp41 & tmp44
        tmp46 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp47 = ops.index_expr(0, torch.int64)
        tmp48 = tmp46 >= tmp47
        tmp49 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp50 = ops.index_expr(112, torch.int64)
        tmp51 = tmp49 < tmp50
        tmp52 = tmp48 & tmp51
        tmp53 = tmp45 & tmp52
        tmp54 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp55 = ops.masked(tmp53, tmp54, -inf)
        tmp56 = ops.index_expr(-111 + 2 * i3 + 224 * i2, torch.int64)
        tmp57 = tmp55 > tmp38
        tmp58 = ops.where(tmp57, tmp56, tmp37)
        tmp59 = ops.maximum(tmp55, tmp38)
        tmp60 = ops.index_expr(2 * i2, torch.int64)
        tmp61 = ops.index_expr(0, torch.int64)
        tmp62 = tmp60 >= tmp61
        tmp63 = ops.index_expr(2 * i2, torch.int64)
        tmp64 = ops.index_expr(112, torch.int64)
        tmp65 = tmp63 < tmp64
        tmp66 = tmp62 & tmp65
        tmp67 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp68 = ops.index_expr(0, torch.int64)
        tmp69 = tmp67 >= tmp68
        tmp70 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp71 = ops.index_expr(112, torch.int64)
        tmp72 = tmp70 < tmp71
        tmp73 = tmp69 & tmp72
        tmp74 = tmp66 & tmp73
        tmp75 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp76 = ops.masked(tmp74, tmp75, -inf)
        tmp77 = ops.index_expr(-1 + 2 * i3 + 224 * i2, torch.int64)
        tmp78 = tmp76 > tmp59
        tmp79 = ops.where(tmp78, tmp77, tmp58)
        tmp80 = ops.maximum(tmp76, tmp59)
        tmp81 = ops.index_expr(2 * i2, torch.int64)
        tmp82 = ops.index_expr(0, torch.int64)
        tmp83 = tmp81 >= tmp82
        tmp84 = ops.index_expr(2 * i2, torch.int64)
        tmp85 = ops.index_expr(112, torch.int64)
        tmp86 = tmp84 < tmp85
        tmp87 = tmp83 & tmp86
        tmp88 = ops.index_expr(2 * i3, torch.int64)
        tmp89 = ops.index_expr(0, torch.int64)
        tmp90 = tmp88 >= tmp89
        tmp91 = ops.index_expr(2 * i3, torch.int64)
        tmp92 = ops.index_expr(112, torch.int64)
        tmp93 = tmp91 < tmp92
        tmp94 = tmp90 & tmp93
        tmp95 = tmp87 & tmp94
        tmp96 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
        tmp97 = ops.masked(tmp95, tmp96, -inf)
        tmp98 = ops.index_expr(2 * i3 + 224 * i2, torch.int64)
        tmp99 = tmp97 > tmp80
        tmp100 = ops.where(tmp99, tmp98, tmp79)
        tmp101 = ops.maximum(tmp97, tmp80)
        tmp102 = ops.index_expr(2 * i2, torch.int64)
        tmp103 = ops.index_expr(0, torch.int64)
        tmp104 = tmp102 >= tmp103
        tmp105 = ops.index_expr(2 * i2, torch.int64)
        tmp106 = ops.index_expr(112, torch.int64)
        tmp107 = tmp105 < tmp106
        tmp108 = tmp104 & tmp107
        tmp109 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp110 = ops.index_expr(0, torch.int64)
        tmp111 = tmp109 >= tmp110
        tmp112 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp113 = ops.index_expr(112, torch.int64)
        tmp114 = tmp112 < tmp113
        tmp115 = tmp111 & tmp114
        tmp116 = tmp108 & tmp115
        tmp117 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp118 = ops.masked(tmp116, tmp117, -inf)
        tmp119 = ops.index_expr(1 + 2 * i3 + 224 * i2, torch.int64)
        tmp120 = tmp118 > tmp101
        tmp121 = ops.where(tmp120, tmp119, tmp100)
        tmp122 = ops.maximum(tmp118, tmp101)
        tmp123 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp124 = ops.index_expr(0, torch.int64)
        tmp125 = tmp123 >= tmp124
        tmp126 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp127 = ops.index_expr(112, torch.int64)
        tmp128 = tmp126 < tmp127
        tmp129 = tmp125 & tmp128
        tmp130 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp131 = ops.index_expr(0, torch.int64)
        tmp132 = tmp130 >= tmp131
        tmp133 = ops.index_expr(-1 + 2 * i3, torch.int64)
        tmp134 = ops.index_expr(112, torch.int64)
        tmp135 = tmp133 < tmp134
        tmp136 = tmp132 & tmp135
        tmp137 = tmp129 & tmp136
        tmp138 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp139 = ops.masked(tmp137, tmp138, -inf)
        tmp140 = ops.index_expr(111 + 2 * i3 + 224 * i2, torch.int64)
        tmp141 = tmp139 > tmp122
        tmp142 = ops.where(tmp141, tmp140, tmp121)
        tmp143 = ops.maximum(tmp139, tmp122)
        tmp144 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp145 = ops.index_expr(0, torch.int64)
        tmp146 = tmp144 >= tmp145
        tmp147 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp148 = ops.index_expr(112, torch.int64)
        tmp149 = tmp147 < tmp148
        tmp150 = tmp146 & tmp149
        tmp151 = ops.index_expr(2 * i3, torch.int64)
        tmp152 = ops.index_expr(0, torch.int64)
        tmp153 = tmp151 >= tmp152
        tmp154 = ops.index_expr(2 * i3, torch.int64)
        tmp155 = ops.index_expr(112, torch.int64)
        tmp156 = tmp154 < tmp155
        tmp157 = tmp153 & tmp156
        tmp158 = tmp150 & tmp157
        tmp159 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp160 = ops.masked(tmp158, tmp159, -inf)
        tmp161 = ops.index_expr(112 + 2 * i3 + 224 * i2, torch.int64)
        tmp162 = tmp160 > tmp143
        tmp163 = ops.where(tmp162, tmp161, tmp142)
        tmp164 = ops.maximum(tmp160, tmp143)
        tmp165 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp166 = ops.index_expr(0, torch.int64)
        tmp167 = tmp165 >= tmp166
        tmp168 = ops.index_expr(1 + 2 * i2, torch.int64)
        tmp169 = ops.index_expr(112, torch.int64)
        tmp170 = tmp168 < tmp169
        tmp171 = tmp167 & tmp170
        tmp172 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp173 = ops.index_expr(0, torch.int64)
        tmp174 = tmp172 >= tmp173
        tmp175 = ops.index_expr(1 + 2 * i3, torch.int64)
        tmp176 = ops.index_expr(112, torch.int64)
        tmp177 = tmp175 < tmp176
        tmp178 = tmp174 & tmp177
        tmp179 = tmp171 & tmp178
        tmp180 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
        tmp181 = ops.masked(tmp179, tmp180, -inf)
        tmp182 = ops.index_expr(113 + 2 * i3 + 224 * i2, torch.int64)
        tmp183 = tmp181 > tmp164
        tmp184 = ops.where(tmp183, tmp182, tmp163)
        tmp185 = ops.maximum(tmp181, tmp164)
        return tmp184
    ,
    ranges=[1, 64, 56, 56],
    origins={getitem_3}
  ))
)
Node 107: StorageBox(
  ExternKernelAlloc(
    name=buf12,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf10', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp1 = ops.index_expr(0, torch.int64)
          tmp2 = tmp0 >= tmp1
          tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp4 = ops.index_expr(112, torch.int64)
          tmp5 = tmp3 < tmp4
          tmp6 = tmp2 & tmp5
          tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp8 = ops.index_expr(0, torch.int64)
          tmp9 = tmp7 >= tmp8
          tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp11 = ops.index_expr(112, torch.int64)
          tmp12 = tmp10 < tmp11
          tmp13 = tmp9 & tmp12
          tmp14 = tmp6 & tmp13
          tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp16 = ops.masked(tmp14, tmp15, -inf)
          tmp17 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp18 = ops.index_expr(0, torch.int64)
          tmp19 = tmp17 >= tmp18
          tmp20 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp21 = ops.index_expr(112, torch.int64)
          tmp22 = tmp20 < tmp21
          tmp23 = tmp19 & tmp22
          tmp24 = ops.index_expr(2 * i3, torch.int64)
          tmp25 = ops.index_expr(0, torch.int64)
          tmp26 = tmp24 >= tmp25
          tmp27 = ops.index_expr(2 * i3, torch.int64)
          tmp28 = ops.index_expr(112, torch.int64)
          tmp29 = tmp27 < tmp28
          tmp30 = tmp26 & tmp29
          tmp31 = tmp23 & tmp30
          tmp32 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp33 = ops.masked(tmp31, tmp32, -inf)
          tmp34 = ops.maximum(tmp33, tmp16)
          tmp35 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp36 = ops.index_expr(0, torch.int64)
          tmp37 = tmp35 >= tmp36
          tmp38 = ops.index_expr(-1 + 2 * i2, torch.int64)
          tmp39 = ops.index_expr(112, torch.int64)
          tmp40 = tmp38 < tmp39
          tmp41 = tmp37 & tmp40
          tmp42 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp43 = ops.index_expr(0, torch.int64)
          tmp44 = tmp42 >= tmp43
          tmp45 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp46 = ops.index_expr(112, torch.int64)
          tmp47 = tmp45 < tmp46
          tmp48 = tmp44 & tmp47
          tmp49 = tmp41 & tmp48
          tmp50 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp51 = ops.masked(tmp49, tmp50, -inf)
          tmp52 = ops.maximum(tmp51, tmp34)
          tmp53 = ops.index_expr(2 * i2, torch.int64)
          tmp54 = ops.index_expr(0, torch.int64)
          tmp55 = tmp53 >= tmp54
          tmp56 = ops.index_expr(2 * i2, torch.int64)
          tmp57 = ops.index_expr(112, torch.int64)
          tmp58 = tmp56 < tmp57
          tmp59 = tmp55 & tmp58
          tmp60 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp61 = ops.index_expr(0, torch.int64)
          tmp62 = tmp60 >= tmp61
          tmp63 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp64 = ops.index_expr(112, torch.int64)
          tmp65 = tmp63 < tmp64
          tmp66 = tmp62 & tmp65
          tmp67 = tmp59 & tmp66
          tmp68 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp69 = ops.masked(tmp67, tmp68, -inf)
          tmp70 = ops.maximum(tmp69, tmp52)
          tmp71 = ops.index_expr(2 * i2, torch.int64)
          tmp72 = ops.index_expr(0, torch.int64)
          tmp73 = tmp71 >= tmp72
          tmp74 = ops.index_expr(2 * i2, torch.int64)
          tmp75 = ops.index_expr(112, torch.int64)
          tmp76 = tmp74 < tmp75
          tmp77 = tmp73 & tmp76
          tmp78 = ops.index_expr(2 * i3, torch.int64)
          tmp79 = ops.index_expr(0, torch.int64)
          tmp80 = tmp78 >= tmp79
          tmp81 = ops.index_expr(2 * i3, torch.int64)
          tmp82 = ops.index_expr(112, torch.int64)
          tmp83 = tmp81 < tmp82
          tmp84 = tmp80 & tmp83
          tmp85 = tmp77 & tmp84
          tmp86 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
          tmp87 = ops.masked(tmp85, tmp86, -inf)
          tmp88 = ops.maximum(tmp87, tmp70)
          tmp89 = ops.index_expr(2 * i2, torch.int64)
          tmp90 = ops.index_expr(0, torch.int64)
          tmp91 = tmp89 >= tmp90
          tmp92 = ops.index_expr(2 * i2, torch.int64)
          tmp93 = ops.index_expr(112, torch.int64)
          tmp94 = tmp92 < tmp93
          tmp95 = tmp91 & tmp94
          tmp96 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp97 = ops.index_expr(0, torch.int64)
          tmp98 = tmp96 >= tmp97
          tmp99 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp100 = ops.index_expr(112, torch.int64)
          tmp101 = tmp99 < tmp100
          tmp102 = tmp98 & tmp101
          tmp103 = tmp95 & tmp102
          tmp104 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp105 = ops.masked(tmp103, tmp104, -inf)
          tmp106 = ops.maximum(tmp105, tmp88)
          tmp107 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp108 = ops.index_expr(0, torch.int64)
          tmp109 = tmp107 >= tmp108
          tmp110 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp111 = ops.index_expr(112, torch.int64)
          tmp112 = tmp110 < tmp111
          tmp113 = tmp109 & tmp112
          tmp114 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp115 = ops.index_expr(0, torch.int64)
          tmp116 = tmp114 >= tmp115
          tmp117 = ops.index_expr(-1 + 2 * i3, torch.int64)
          tmp118 = ops.index_expr(112, torch.int64)
          tmp119 = tmp117 < tmp118
          tmp120 = tmp116 & tmp119
          tmp121 = tmp113 & tmp120
          tmp122 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp123 = ops.masked(tmp121, tmp122, -inf)
          tmp124 = ops.maximum(tmp123, tmp106)
          tmp125 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp126 = ops.index_expr(0, torch.int64)
          tmp127 = tmp125 >= tmp126
          tmp128 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp129 = ops.index_expr(112, torch.int64)
          tmp130 = tmp128 < tmp129
          tmp131 = tmp127 & tmp130
          tmp132 = ops.index_expr(2 * i3, torch.int64)
          tmp133 = ops.index_expr(0, torch.int64)
          tmp134 = tmp132 >= tmp133
          tmp135 = ops.index_expr(2 * i3, torch.int64)
          tmp136 = ops.index_expr(112, torch.int64)
          tmp137 = tmp135 < tmp136
          tmp138 = tmp134 & tmp137
          tmp139 = tmp131 & tmp138
          tmp140 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp141 = ops.masked(tmp139, tmp140, -inf)
          tmp142 = ops.maximum(tmp141, tmp124)
          tmp143 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp144 = ops.index_expr(0, torch.int64)
          tmp145 = tmp143 >= tmp144
          tmp146 = ops.index_expr(1 + 2 * i2, torch.int64)
          tmp147 = ops.index_expr(112, torch.int64)
          tmp148 = tmp146 < tmp147
          tmp149 = tmp145 & tmp148
          tmp150 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp151 = ops.index_expr(0, torch.int64)
          tmp152 = tmp150 >= tmp151
          tmp153 = ops.index_expr(1 + 2 * i3, torch.int64)
          tmp154 = ops.index_expr(112, torch.int64)
          tmp155 = tmp153 < tmp154
          tmp156 = tmp152 & tmp155
          tmp157 = tmp149 & tmp156
          tmp158 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
          tmp159 = ops.masked(tmp157, tmp158, -inf)
          tmp160 = ops.maximum(tmp159, tmp142)
          return tmp160
      ,
      ranges=[1, 64, 56, 56],
      origins={getitem_2}
    )), InputBuffer(name='primals_4', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_1}
  )
)
Node 108: StorageBox(
  ComputedBuffer(name='buf16', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf15, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(64,),
    origins={rsqrt_1, add_6, squeeze_4, var_mean_1}
  ))
)
Node 109: StorageBox(
  ComputedBuffer(name='buf19', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf12, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf14, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf15, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_5, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_6, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 64, 56, 56],
    origins={relu_1, rsqrt_1, sub_1, add_6, mul_7, var_mean_1, mu...
  ))
)
Node 110: StorageBox(
  ExternKernelAlloc(
    name=buf20,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf19', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf12, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf14, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf15, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_5, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_6, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 64, 56, 56],
      origins={relu_1, rsqrt_1, sub_1, add_6, mul_7, var_mean_1, mu...
    )), InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_2}
  )
)
Node 111: StorageBox(
  ComputedBuffer(name='buf24', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf23, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(64,),
    origins={rsqrt_2, var_mean_2, squeeze_7, add_11}
  ))
)
Node 112: StorageBox(
  ComputedBuffer(name='buf27', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf22, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf23, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_8, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_9, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf10, i3 + 56 * i2 + 3136 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 64, 56, 56],
    origins={add_11, add_15, mul_14, rsqrt_2, var_mean_2, mul_20,...
  ))
)
Node 113: StorageBox(
  ExternKernelAlloc(
    name=buf28,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf27', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf22, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf23, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_8, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_9, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf10, i3 + 56 * i2 + 3136 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 64, 56, 56],
      origins={add_11, add_15, mul_14, rsqrt_2, var_mean_2, mul_20,...
    )), InputBuffer(name='primals_10', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_3}
  )
)
Node 114: StorageBox(
  ComputedBuffer(name='buf32', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf31, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(64,),
    origins={rsqrt_3, add_17, var_mean_3, squeeze_10}
  ))
)
Node 115: StorageBox(
  ComputedBuffer(name='buf35', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf28, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf30, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf31, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_11, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_12, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 64, 56, 56],
    origins={rsqrt_3, add_17, sub_3, add_20, mul_27, mul_21, var_...
  ))
)
Node 116: StorageBox(
  ExternKernelAlloc(
    name=buf36,
    layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]),
    inputs=[ComputedBuffer(name='buf35', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf28, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf30, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf31, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_11, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_12, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 64, 56, 56],
      origins={rsqrt_3, add_17, sub_3, add_20, mul_27, mul_21, var_...
    )), InputBuffer(name='primals_13', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_4}
  )
)
Node 117: StorageBox(
  ComputedBuffer(name='buf40', layout=FixedLayout('cuda', torch.float32, size=(64,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf39, i0)
        tmp1 = ops.index_expr(3136, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(64,),
    origins={rsqrt_4, var_mean_4, add_22, squeeze_13}
  ))
)
Node 118: StorageBox(
  ComputedBuffer(name='buf43', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
        tmp1 = ops.load(buf38, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf39, i1)
        tmp4 = ops.index_expr(3136, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_14, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_15, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 64, 56, 56],
    origins={relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, ...
  ))
)
Node 119: StorageBox(
  ExternKernelAlloc(
    name=buf44,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf43', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf38, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf39, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_14, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_15, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 64, 56, 56],
      origins={relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, ...
    )), InputBuffer(name='primals_16', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 3, 3], stride=[576, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_5}
  )
)
Node 120: StorageBox(
  ComputedBuffer(name='buf48', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf47, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(128,),
    origins={squeeze_16, var_mean_5, add_28, rsqrt_5}
  ))
)
Node 121: StorageBox(
  ComputedBuffer(name='buf51', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf44, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf46, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf47, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_17, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_18, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 128, 28, 28],
    origins={add_31, add_28, rsqrt_5, mul_35, sub_5, relu_5, mul_...
  ))
)
Node 122: StorageBox(
  ExternKernelAlloc(
    name=buf52,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf51', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf44, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf46, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf47, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_17, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_18, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 128, 28, 28],
      origins={add_31, add_28, rsqrt_5, mul_35, sub_5, relu_5, mul_...
    )), InputBuffer(name='primals_19', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_6}
  )
)
Node 123: StorageBox(
  ComputedBuffer(name='buf56', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf55, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(128,),
    origins={add_33, squeeze_19, rsqrt_6, var_mean_6}
  ))
)
Node 124: StorageBox(
  ExternKernelAlloc(
    name=buf59,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf43', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
          tmp1 = ops.load(buf38, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf39, i1)
          tmp4 = ops.index_expr(3136, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_14, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_15, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 64, 56, 56],
      origins={relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, ...
    )), InputBuffer(name='primals_22', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 1, 1], stride=[64, 1, 1, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (0, 0), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_7}
  )
)
Node 125: StorageBox(
  ComputedBuffer(name='buf63', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf62, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(128,),
    origins={var_mean_7, rsqrt_7, add_38, squeeze_22}
  ))
)
Node 126: StorageBox(
  ComputedBuffer(name='buf67', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf66, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.relu(tmp0)
        return tmp1
    ,
    ranges=[1, 128, 28, 28],
    origins={relu_6}
  ))
)
Node 127: StorageBox(
  ExternKernelAlloc(
    name=buf68,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf67', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf66, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.relu(tmp0)
          return tmp1
      ,
      ranges=[1, 128, 28, 28],
      origins={relu_6}
    )), InputBuffer(name='primals_25', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_8}
  )
)
Node 128: StorageBox(
  ComputedBuffer(name='buf72', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf71, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(128,),
    origins={add_44, squeeze_25, rsqrt_8, var_mean_8}
  ))
)
Node 129: StorageBox(
  ComputedBuffer(name='buf75', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf68, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf70, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf71, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_26, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_27, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 128, 28, 28],
    origins={add_44, sub_8, relu_7, rsqrt_8, add_47, mul_62, var_...
  ))
)
Node 130: StorageBox(
  ExternKernelAlloc(
    name=buf76,
    layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]),
    inputs=[ComputedBuffer(name='buf75', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf68, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf70, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf71, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_26, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_27, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 128, 28, 28],
      origins={add_44, sub_8, relu_7, rsqrt_8, add_47, mul_62, var_...
    )), InputBuffer(name='primals_28', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_9}
  )
)
Node 131: StorageBox(
  ComputedBuffer(name='buf80', layout=FixedLayout('cuda', torch.float32, size=(128,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf79, i0)
        tmp1 = ops.index_expr(784, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(128,),
    origins={squeeze_28, var_mean_9, rsqrt_9, add_49}
  ))
)
Node 132: StorageBox(
  ComputedBuffer(name='buf83', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
        tmp1 = ops.load(buf78, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf79, i1)
        tmp4 = ops.index_expr(784, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_29, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_30, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 128, 28, 28],
    origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
  ))
)
Node 133: StorageBox(
  ExternKernelAlloc(
    name=buf84,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf83', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf78, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf79, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_29, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_30, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 128, 28, 28],
      origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
    )), InputBuffer(name='primals_31', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_10}
  )
)
Node 134: StorageBox(
  ComputedBuffer(name='buf88', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf87, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(256,),
    origins={rsqrt_10, squeeze_31, var_mean_10, add_55}
  ))
)
Node 135: StorageBox(
  ComputedBuffer(name='buf91', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf84, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf86, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf87, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_32, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_33, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 256, 14, 14],
    origins={var_mean_10, add_58, add_55, sub_10, mul_76, rsqrt_1...
  ))
)
Node 136: StorageBox(
  ExternKernelAlloc(
    name=buf92,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf91', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf84, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf86, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf87, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_32, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_33, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 256, 14, 14],
      origins={var_mean_10, add_58, add_55, sub_10, mul_76, rsqrt_1...
    )), InputBuffer(name='primals_34', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_11}
  )
)
Node 137: StorageBox(
  ComputedBuffer(name='buf96', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf95, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(256,),
    origins={squeeze_34, add_60, rsqrt_11, var_mean_11}
  ))
)
Node 138: StorageBox(
  ExternKernelAlloc(
    name=buf99,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf83', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
          tmp1 = ops.load(buf78, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf79, i1)
          tmp4 = ops.index_expr(784, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_29, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_30, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 128, 28, 28],
      origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
    )), InputBuffer(name='primals_37', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (0, 0), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_12}
  )
)
Node 139: StorageBox(
  ComputedBuffer(name='buf103', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf102, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(256,),
    origins={var_mean_12, rsqrt_12, add_65, squeeze_37}
  ))
)
Node 140: StorageBox(
  ComputedBuffer(name='buf107', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf106, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.relu(tmp0)
        return tmp1
    ,
    ranges=[1, 256, 14, 14],
    origins={relu_10}
  ))
)
Node 141: StorageBox(
  ExternKernelAlloc(
    name=buf108,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf107', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf106, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.relu(tmp0)
          return tmp1
      ,
      ranges=[1, 256, 14, 14],
      origins={relu_10}
    )), InputBuffer(name='primals_40', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_13}
  )
)
Node 142: StorageBox(
  ComputedBuffer(name='buf112', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf111, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(256,),
    origins={squeeze_40, rsqrt_13, add_71, var_mean_13}
  ))
)
Node 143: StorageBox(
  ComputedBuffer(name='buf115', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf108, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf110, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf111, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_41, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_42, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_91, relu_11, mul_97, rsqrt_13, add_74, sub_13, a...
  ))
)
Node 144: StorageBox(
  ExternKernelAlloc(
    name=buf116,
    layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]),
    inputs=[ComputedBuffer(name='buf115', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf108, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf110, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf111, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_41, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_42, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 256, 14, 14],
      origins={mul_91, relu_11, mul_97, rsqrt_13, add_74, sub_13, a...
    )), InputBuffer(name='primals_43', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_14}
  )
)
Node 145: StorageBox(
  ComputedBuffer(name='buf120', layout=FixedLayout('cuda', torch.float32, size=(256,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf119, i0)
        tmp1 = ops.index_expr(196, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(256,),
    origins={squeeze_43, var_mean_14, add_76, rsqrt_14}
  ))
)
Node 146: StorageBox(
  ComputedBuffer(name='buf123', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
        tmp1 = ops.load(buf118, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf119, i1)
        tmp4 = ops.index_expr(196, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_44, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_45, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
        tmp15 = tmp13 + tmp14
        tmp16 = ops.relu(tmp15)
        return tmp16
    ,
    ranges=[1, 256, 14, 14],
    origins={mul_98, add_80, var_mean_14, add_79, add_76, relu_12...
  ))
)
Node 147: StorageBox(
  ExternKernelAlloc(
    name=buf124,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf123', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf118, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf119, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_44, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_45, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 256, 14, 14],
      origins={mul_98, add_80, var_mean_14, add_79, add_76, relu_12...
    )), InputBuffer(name='primals_46', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 3, 3], stride=[2304, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_15}
  )
)
Node 148: StorageBox(
  ComputedBuffer(name='buf128', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf127, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(512,),
    origins={add_82, squeeze_46, rsqrt_15, var_mean_15}
  ))
)
Node 149: StorageBox(
  ComputedBuffer(name='buf131', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf124, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf126, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf127, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_47, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_48, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 512, 7, 7],
    origins={relu_13, add_85, mul_111, add_82, rsqrt_15, sub_15, ...
  ))
)
Node 150: StorageBox(
  ExternKernelAlloc(
    name=buf132,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf131', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf124, i3 + 7 * i2 + 49 * i1)
          tmp1 = ops.load(buf126, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf127, i1)
          tmp4 = ops.index_expr(49, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_47, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_48, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 512, 7, 7],
      origins={relu_13, add_85, mul_111, add_82, rsqrt_15, sub_15, ...
    )), InputBuffer(name='primals_49', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_16}
  )
)
Node 151: StorageBox(
  ComputedBuffer(name='buf136', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf135, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(512,),
    origins={rsqrt_16, var_mean_16, add_87, squeeze_49}
  ))
)
Node 152: StorageBox(
  ExternKernelAlloc(
    name=buf139,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf123', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
          tmp1 = ops.load(buf118, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf119, i1)
          tmp4 = ops.index_expr(196, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_44, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_45, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
          tmp15 = tmp13 + tmp14
          tmp16 = ops.relu(tmp15)
          return tmp16
      ,
      ranges=[1, 256, 14, 14],
      origins={mul_98, add_80, var_mean_14, add_79, add_76, relu_12...
    )), InputBuffer(name='primals_52', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1]))],
    constant_args=(),
    kwargs={'stride': (2, 2), 'padding': (0, 0), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_17}
  )
)
Node 153: StorageBox(
  ComputedBuffer(name='buf143', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf142, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(512,),
    origins={add_92, var_mean_17, squeeze_52, rsqrt_17}
  ))
)
Node 154: StorageBox(
  ComputedBuffer(name='buf147', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf146, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.relu(tmp0)
        return tmp1
    ,
    ranges=[1, 512, 7, 7],
    origins={relu_14}
  ))
)
Node 155: StorageBox(
  ExternKernelAlloc(
    name=buf148,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf147', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf146, i3 + 7 * i2 + 49 * i1)
          tmp1 = ops.relu(tmp0)
          return tmp1
      ,
      ranges=[1, 512, 7, 7],
      origins={relu_14}
    )), InputBuffer(name='primals_55', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_18}
  )
)
Node 156: StorageBox(
  ComputedBuffer(name='buf152', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf151, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(512,),
    origins={squeeze_55, add_98, var_mean_18, rsqrt_18}
  ))
)
Node 157: StorageBox(
  ComputedBuffer(name='buf155', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf148, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.load(buf150, i1)
        tmp2 = tmp0 - tmp1
        tmp3 = ops.load(buf151, i1)
        tmp4 = ops.index_expr(49, torch.float32)
        tmp5 = tmp3 / tmp4
        tmp6 = ops.constant(1e-05, torch.float32)
        tmp7 = tmp5 + tmp6
        tmp8 = ops.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = ops.load(primals_56, i1)
        tmp11 = tmp9 * tmp10
        tmp12 = ops.load(primals_57, i1)
        tmp13 = tmp11 + tmp12
        tmp14 = ops.relu(tmp13)
        return tmp14
    ,
    ranges=[1, 512, 7, 7],
    origins={sub_18, add_101, rsqrt_18, relu_15, add_98, mul_132,...
  ))
)
Node 158: StorageBox(
  ExternKernelAlloc(
    name=buf156,
    layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]),
    inputs=[ComputedBuffer(name='buf155', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, i2, i3 = index
          tmp0 = ops.load(buf148, i3 + 7 * i2 + 49 * i1)
          tmp1 = ops.load(buf150, i1)
          tmp2 = tmp0 - tmp1
          tmp3 = ops.load(buf151, i1)
          tmp4 = ops.index_expr(49, torch.float32)
          tmp5 = tmp3 / tmp4
          tmp6 = ops.constant(1e-05, torch.float32)
          tmp7 = tmp5 + tmp6
          tmp8 = ops.rsqrt(tmp7)
          tmp9 = tmp2 * tmp8
          tmp10 = ops.load(primals_56, i1)
          tmp11 = tmp9 * tmp10
          tmp12 = ops.load(primals_57, i1)
          tmp13 = tmp11 + tmp12
          tmp14 = ops.relu(tmp13)
          return tmp14
      ,
      ranges=[1, 512, 7, 7],
      origins={sub_18, add_101, rsqrt_18, relu_15, add_98, mul_132,...
    )), InputBuffer(name='primals_58', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))],
    constant_args=(),
    kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None},
    output_view=None,
    origins={convolution_19}
  )
)
Node 159: StorageBox(
  ComputedBuffer(name='buf160', layout=FixedLayout('cuda', torch.float32, size=(512,), stride=[1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        i0 = index
        tmp0 = ops.load(buf159, i0)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        tmp3 = ops.constant(1e-05, torch.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = ops.rsqrt(tmp4)
        return tmp5
    ,
    ranges=(512,),
    origins={add_103, var_mean_19, squeeze_58, rsqrt_19}
  ))
)
Node 160: StorageBox(
  ComputedBuffer(name='buf165', layout=FixedLayout('cuda', torch.float32, size=(1, 512), stride=[512, 1]), data=Pointwise(
    'cuda',
    torch.float32,
    def inner_fn(index):
        _, i1 = index
        tmp0 = ops.load(buf164, i1)
        tmp1 = ops.index_expr(49, torch.float32)
        tmp2 = tmp0 / tmp1
        return tmp2
    ,
    ranges=(1, 512),
    origins={mean, view}
  ))
)
Node 161: ReinterpretView(
  StorageBox(
    InputBuffer(name='primals_61', layout=FixedLayout('cuda', torch.float32, size=[1000, 512], stride=[512, 1]))
  ),
  FixedLayout('cuda', torch.float32, size=[1000, 512], stride=[512, 1]),
  origins=
)
Node 162: StorageBox(
  ComputedBuffer(name='buf167', layout=FixedLayout('cuda', torch.bool, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
    'cuda',
    torch.bool,
    def inner_fn(index):
        _, i1, i2, i3 = index
        tmp0 = ops.load(buf163, i3 + 7 * i2 + 49 * i1)
        tmp1 = ops.constant(0, torch.float32)
        tmp2 = tmp0 <= tmp1
        return tmp2
    ,
    ranges=[1, 512, 7, 7],
    origins={le}
  ))
)
Node 163: ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf158', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, _, _ = index
          tmp0 = ops.load(buf157, i1)
          tmp1 = ops.index_expr(49, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=[1, 512, 1, 1],
      origins={var_mean_19}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]),
  origins=
)
Node 164: ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf150', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, _, _ = index
          tmp0 = ops.load(buf149, i1)
          tmp1 = ops.index_expr(49, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=[1, 512, 1, 1],
      origins={var_mean_18}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]),
  origins=
)
Node 165: ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf141', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, _, _ = index
          tmp0 = ops.load(buf140, i1)
          tmp1 = ops.index_expr(49, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=[1, 512, 1, 1],
      origins={var_mean_17}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]),
  origins=
)
Node 166: ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf134', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, _, _ = index
          tmp0 = ops.load(buf133, i1)
          tmp1 = ops.index_expr(49, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=[1, 512, 1, 1],
      origins={var_mean_16}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]),
  origins=
)
Node 167: ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf126', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 512, 512]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, _, _ = index
          tmp0 = ops.load(buf125, i1)
          tmp1 = ops.index_expr(49, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=[1, 512, 1, 1],
      origins={var_mean_15}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[1, 512, 1, 1], stride=[512, 1, 1, 1]),
  origins=
)
Node 168: ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf118', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, _, _ = index
          tmp0 = ops.load(buf117, i1)
          tmp1 = ops.index_expr(196, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=[1, 256, 1, 1],
      origins={var_mean_14}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]),
  origins=
)
Node 169: ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf110', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, _, _ = index
          tmp0 = ops.load(buf109, i1)
          tmp1 = ops.index_expr(196, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=[1, 256, 1, 1],
      origins={var_mean_13}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]),
  origins=
)
Node 170: ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf101', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, _, _ = index
          tmp0 = ops.load(buf100, i1)
          tmp1 = ops.index_expr(196, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=[1, 256, 1, 1],
      origins={var_mean_12}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]),
  origins=
)
Node 171: ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf94', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, _, _ = index
          tmp0 = ops.load(buf93, i1)
          tmp1 = ops.index_expr(196, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=[1, 256, 1, 1],
      origins={var_mean_11}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]),
  origins=
)
Node 172: ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf86', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 256, 256]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, _, _ = index
          tmp0 = ops.load(buf85, i1)
          tmp1 = ops.index_expr(196, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=[1, 256, 1, 1],
      origins={var_mean_10}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[1, 256, 1, 1], stride=[256, 1, 1, 1]),
  origins=
)
Node 173: ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf78', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, _, _ = index
          tmp0 = ops.load(buf77, i1)
          tmp1 = ops.index_expr(784, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=[1, 128, 1, 1],
      origins={var_mean_9}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]),
  origins=
)
Node 174: ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf70', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, _, _ = index
          tmp0 = ops.load(buf69, i1)
          tmp1 = ops.index_expr(784, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=[1, 128, 1, 1],
      origins={var_mean_8}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]),
  origins=
)
Node 175: ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf61', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, _, _ = index
          tmp0 = ops.load(buf60, i1)
          tmp1 = ops.index_expr(784, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=[1, 128, 1, 1],
      origins={var_mean_7}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]),
  origins=
)
Node 176: ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf54', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, _, _ = index
          tmp0 = ops.load(buf53, i1)
          tmp1 = ops.index_expr(784, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=[1, 128, 1, 1],
      origins={var_mean_6}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]),
  origins=
)
Node 177: ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf46', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 128, 128]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, _, _ = index
          tmp0 = ops.load(buf45, i1)
          tmp1 = ops.index_expr(784, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=[1, 128, 1, 1],
      origins={var_mean_5}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[1, 128, 1, 1], stride=[128, 1, 1, 1]),
  origins=
)
Node 178: ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf38', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, _, _ = index
          tmp0 = ops.load(buf37, i1)
          tmp1 = ops.index_expr(3136, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=[1, 64, 1, 1],
      origins={var_mean_4}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]),
  origins=
)
Node 179: ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf30', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, _, _ = index
          tmp0 = ops.load(buf29, i1)
          tmp1 = ops.index_expr(3136, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=[1, 64, 1, 1],
      origins={var_mean_3}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]),
  origins=
)
Node 180: ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf22', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, _, _ = index
          tmp0 = ops.load(buf21, i1)
          tmp1 = ops.index_expr(3136, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=[1, 64, 1, 1],
      origins={var_mean_2}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]),
  origins=
)
Node 181: ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf14', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, _, _ = index
          tmp0 = ops.load(buf13, i1)
          tmp1 = ops.index_expr(3136, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=[1, 64, 1, 1],
      origins={var_mean_1}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]),
  origins=
)
Node 182: ReinterpretView(
  StorageBox(
    ComputedBuffer(name='buf3', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 64, 64]), data=Pointwise(
      'cuda',
      torch.float32,
      def inner_fn(index):
          _, i1, _, _ = index
          tmp0 = ops.load(buf2, i1)
          tmp1 = ops.index_expr(12544, torch.float32)
          tmp2 = tmp0 / tmp1
          return tmp2
      ,
      ranges=[1, 64, 1, 1],
      origins={var_mean}
    ))
  ),
  FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1], stride=[64, 1, 1, 1]),
  origins=
)

Finished Graph.lowering Output-------------------------


Result after run_node: None
Finished graph.run_node:------------------------------

Init Scheduler-----------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf0, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf1, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf0, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf1, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf1, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf2, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf1, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf2, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf2, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 12544, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf3, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf2, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 12544, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf3, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf0, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf3, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index2,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf4, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf0, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf3, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index2,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf4, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf4, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf5, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf4, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf5, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf5, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 12544, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf6, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf5, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 12544, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf6, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf3, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_63, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf7, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf3, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_63, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf7, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf5, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 12544, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0000797257434426, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_64, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf8, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf5, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 12544, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0000797257434426, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_64, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf8, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=16] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf0, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf3, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf5, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 12544, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_2, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_3, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_1), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf9, %get_index_5, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=16] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf0, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf3, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf5, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 12544, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_2, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_3, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_1), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf9, %get_index_5, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index2,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index4,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index6,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index8,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index9,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index10,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index12,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index13,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index14,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
self.graph: graph():
    %ops : [#users=144] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index, torch.int64), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge : [#users=1] = call_method[target=ge](args = (%ops, %index_expr, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr_1 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_1, torch.int64), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_1, %constant_1), kwargs = {})
    %and_ : [#users=1] = call_method[target=and_](args = (%ops, %ge, %lt), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_2 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_2, torch.int64), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_1 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_2, %constant_2), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_3 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_3, torch.int64), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_1 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_3, %constant_3), kwargs = {})
    %and__1 : [#users=1] = call_method[target=and_](args = (%ops, %ge_1, %lt_1), kwargs = {})
    %and__2 : [#users=1] = call_method[target=and_](args = (%ops, %and_, %and__1), kwargs = {})
    %masked_subblock1 : [#users=1] = call_module[target=masked_subblock1](args = (%and__2, -inf), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr_4 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_4, torch.int64), kwargs = {})
    %constant_4 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_2 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_4, %constant_4), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr_5 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_5, torch.int64), kwargs = {})
    %constant_5 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_2 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_5, %constant_5), kwargs = {})
    %and__3 : [#users=1] = call_method[target=and_](args = (%ops, %ge_2, %lt_2), kwargs = {})
    %get_index_6 : [#users=1] = call_module[target=get_index](args = (index3,), kwargs = {})
    %index_expr_6 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_6, torch.int64), kwargs = {})
    %constant_6 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_3 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_6, %constant_6), kwargs = {})
    %get_index_7 : [#users=1] = call_module[target=get_index](args = (index3,), kwargs = {})
    %index_expr_7 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_7, torch.int64), kwargs = {})
    %constant_7 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_3 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_7, %constant_7), kwargs = {})
    %and__4 : [#users=1] = call_method[target=and_](args = (%ops, %ge_3, %lt_3), kwargs = {})
    %and__5 : [#users=1] = call_method[target=and_](args = (%ops, %and__3, %and__4), kwargs = {})
    %masked_subblock2 : [#users=1] = call_module[target=masked_subblock2](args = (%and__5, -inf), kwargs = {})
    %maximum : [#users=1] = call_method[target=maximum](args = (%ops, %masked_subblock2, %masked_subblock1), kwargs = {})
    %get_index_8 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr_8 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_8, torch.int64), kwargs = {})
    %constant_8 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_4 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_8, %constant_8), kwargs = {})
    %get_index_9 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr_9 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_9, torch.int64), kwargs = {})
    %constant_9 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_4 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_9, %constant_9), kwargs = {})
    %and__6 : [#users=1] = call_method[target=and_](args = (%ops, %ge_4, %lt_4), kwargs = {})
    %get_index_10 : [#users=1] = call_module[target=get_index](args = (index5,), kwargs = {})
    %index_expr_10 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_10, torch.int64), kwargs = {})
    %constant_10 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_5 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_10, %constant_10), kwargs = {})
    %get_index_11 : [#users=1] = call_module[target=get_index](args = (index5,), kwargs = {})
    %index_expr_11 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_11, torch.int64), kwargs = {})
    %constant_11 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_5 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_11, %constant_11), kwargs = {})
    %and__7 : [#users=1] = call_method[target=and_](args = (%ops, %ge_5, %lt_5), kwargs = {})
    %and__8 : [#users=1] = call_method[target=and_](args = (%ops, %and__6, %and__7), kwargs = {})
    %masked_subblock3 : [#users=1] = call_module[target=masked_subblock3](args = (%and__8, -inf), kwargs = {})
    %maximum_1 : [#users=1] = call_method[target=maximum](args = (%ops, %masked_subblock3, %maximum), kwargs = {})
    %get_index_12 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_12 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_12, torch.int64), kwargs = {})
    %constant_12 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_6 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_12, %constant_12), kwargs = {})
    %get_index_13 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_13 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_13, torch.int64), kwargs = {})
    %constant_13 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_6 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_13, %constant_13), kwargs = {})
    %and__9 : [#users=1] = call_method[target=and_](args = (%ops, %ge_6, %lt_6), kwargs = {})
    %get_index_14 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_14 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_14, torch.int64), kwargs = {})
    %constant_14 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_7 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_14, %constant_14), kwargs = {})
    %get_index_15 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_15 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_15, torch.int64), kwargs = {})
    %constant_15 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_7 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_15, %constant_15), kwargs = {})
    %and__10 : [#users=1] = call_method[target=and_](args = (%ops, %ge_7, %lt_7), kwargs = {})
    %and__11 : [#users=1] = call_method[target=and_](args = (%ops, %and__9, %and__10), kwargs = {})
    %masked_subblock4 : [#users=1] = call_module[target=masked_subblock4](args = (%and__11, -inf), kwargs = {})
    %maximum_2 : [#users=1] = call_method[target=maximum](args = (%ops, %masked_subblock4, %maximum_1), kwargs = {})
    %get_index_16 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_16 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_16, torch.int64), kwargs = {})
    %constant_16 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_8 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_16, %constant_16), kwargs = {})
    %get_index_17 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_17 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_17, torch.int64), kwargs = {})
    %constant_17 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_8 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_17, %constant_17), kwargs = {})
    %and__12 : [#users=1] = call_method[target=and_](args = (%ops, %ge_8, %lt_8), kwargs = {})
    %get_index_18 : [#users=1] = call_module[target=get_index](args = (index3,), kwargs = {})
    %index_expr_18 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_18, torch.int64), kwargs = {})
    %constant_18 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_9 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_18, %constant_18), kwargs = {})
    %get_index_19 : [#users=1] = call_module[target=get_index](args = (index3,), kwargs = {})
    %index_expr_19 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_19, torch.int64), kwargs = {})
    %constant_19 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_9 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_19, %constant_19), kwargs = {})
    %and__13 : [#users=1] = call_method[target=and_](args = (%ops, %ge_9, %lt_9), kwargs = {})
    %and__14 : [#users=1] = call_method[target=and_](args = (%ops, %and__12, %and__13), kwargs = {})
    %masked_subblock5 : [#users=1] = call_module[target=masked_subblock5](args = (%and__14, -inf), kwargs = {})
    %maximum_3 : [#users=1] = call_method[target=maximum](args = (%ops, %masked_subblock5, %maximum_2), kwargs = {})
    %get_index_20 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_20 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_20, torch.int64), kwargs = {})
    %constant_20 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_10 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_20, %constant_20), kwargs = {})
    %get_index_21 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_21 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_21, torch.int64), kwargs = {})
    %constant_21 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_10 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_21, %constant_21), kwargs = {})
    %and__15 : [#users=1] = call_method[target=and_](args = (%ops, %ge_10, %lt_10), kwargs = {})
    %get_index_22 : [#users=1] = call_module[target=get_index](args = (index5,), kwargs = {})
    %index_expr_22 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_22, torch.int64), kwargs = {})
    %constant_22 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_11 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_22, %constant_22), kwargs = {})
    %get_index_23 : [#users=1] = call_module[target=get_index](args = (index5,), kwargs = {})
    %index_expr_23 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_23, torch.int64), kwargs = {})
    %constant_23 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_11 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_23, %constant_23), kwargs = {})
    %and__16 : [#users=1] = call_method[target=and_](args = (%ops, %ge_11, %lt_11), kwargs = {})
    %and__17 : [#users=1] = call_method[target=and_](args = (%ops, %and__15, %and__16), kwargs = {})
    %masked_subblock6 : [#users=1] = call_module[target=masked_subblock6](args = (%and__17, -inf), kwargs = {})
    %maximum_4 : [#users=1] = call_method[target=maximum](args = (%ops, %masked_subblock6, %maximum_3), kwargs = {})
    %get_index_24 : [#users=1] = call_module[target=get_index](args = (index11,), kwargs = {})
    %index_expr_24 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_24, torch.int64), kwargs = {})
    %constant_24 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_12 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_24, %constant_24), kwargs = {})
    %get_index_25 : [#users=1] = call_module[target=get_index](args = (index11,), kwargs = {})
    %index_expr_25 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_25, torch.int64), kwargs = {})
    %constant_25 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_12 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_25, %constant_25), kwargs = {})
    %and__18 : [#users=1] = call_method[target=and_](args = (%ops, %ge_12, %lt_12), kwargs = {})
    %get_index_26 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_26 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_26, torch.int64), kwargs = {})
    %constant_26 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_13 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_26, %constant_26), kwargs = {})
    %get_index_27 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_27 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_27, torch.int64), kwargs = {})
    %constant_27 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_13 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_27, %constant_27), kwargs = {})
    %and__19 : [#users=1] = call_method[target=and_](args = (%ops, %ge_13, %lt_13), kwargs = {})
    %and__20 : [#users=1] = call_method[target=and_](args = (%ops, %and__18, %and__19), kwargs = {})
    %masked_subblock7 : [#users=1] = call_module[target=masked_subblock7](args = (%and__20, -inf), kwargs = {})
    %maximum_5 : [#users=1] = call_method[target=maximum](args = (%ops, %masked_subblock7, %maximum_4), kwargs = {})
    %get_index_28 : [#users=1] = call_module[target=get_index](args = (index11,), kwargs = {})
    %index_expr_28 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_28, torch.int64), kwargs = {})
    %constant_28 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_14 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_28, %constant_28), kwargs = {})
    %get_index_29 : [#users=1] = call_module[target=get_index](args = (index11,), kwargs = {})
    %index_expr_29 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_29, torch.int64), kwargs = {})
    %constant_29 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_14 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_29, %constant_29), kwargs = {})
    %and__21 : [#users=1] = call_method[target=and_](args = (%ops, %ge_14, %lt_14), kwargs = {})
    %get_index_30 : [#users=1] = call_module[target=get_index](args = (index3,), kwargs = {})
    %index_expr_30 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_30, torch.int64), kwargs = {})
    %constant_30 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_15 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_30, %constant_30), kwargs = {})
    %get_index_31 : [#users=1] = call_module[target=get_index](args = (index3,), kwargs = {})
    %index_expr_31 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_31, torch.int64), kwargs = {})
    %constant_31 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_15 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_31, %constant_31), kwargs = {})
    %and__22 : [#users=1] = call_method[target=and_](args = (%ops, %ge_15, %lt_15), kwargs = {})
    %and__23 : [#users=1] = call_method[target=and_](args = (%ops, %and__21, %and__22), kwargs = {})
    %masked_subblock8 : [#users=1] = call_module[target=masked_subblock8](args = (%and__23, -inf), kwargs = {})
    %maximum_6 : [#users=1] = call_method[target=maximum](args = (%ops, %masked_subblock8, %maximum_5), kwargs = {})
    %get_index_32 : [#users=1] = call_module[target=get_index](args = (index11,), kwargs = {})
    %index_expr_32 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_32, torch.int64), kwargs = {})
    %constant_32 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_16 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_32, %constant_32), kwargs = {})
    %get_index_33 : [#users=1] = call_module[target=get_index](args = (index11,), kwargs = {})
    %index_expr_33 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_33, torch.int64), kwargs = {})
    %constant_33 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_16 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_33, %constant_33), kwargs = {})
    %and__24 : [#users=1] = call_method[target=and_](args = (%ops, %ge_16, %lt_16), kwargs = {})
    %get_index_34 : [#users=1] = call_module[target=get_index](args = (index5,), kwargs = {})
    %index_expr_34 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_34, torch.int64), kwargs = {})
    %constant_34 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_17 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_34, %constant_34), kwargs = {})
    %get_index_35 : [#users=1] = call_module[target=get_index](args = (index5,), kwargs = {})
    %index_expr_35 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_35, torch.int64), kwargs = {})
    %constant_35 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_17 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_35, %constant_35), kwargs = {})
    %and__25 : [#users=1] = call_method[target=and_](args = (%ops, %ge_17, %lt_17), kwargs = {})
    %and__26 : [#users=1] = call_method[target=and_](args = (%ops, %and__24, %and__25), kwargs = {})
    %masked_subblock9 : [#users=1] = call_module[target=masked_subblock9](args = (%and__26, -inf), kwargs = {})
    %maximum_7 : [#users=1] = call_method[target=maximum](args = (%ops, %masked_subblock9, %maximum_6), kwargs = {})
    %get_index_36 : [#users=1] = call_module[target=get_index](args = (index15,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf10, %get_index_36, %maximum_7, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index2,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index4,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index6,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index8,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index9,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index10,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index12,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index13,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index14,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
self.graph: graph():
    %ops : [#users=144] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index, torch.int64), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge : [#users=1] = call_method[target=ge](args = (%ops, %index_expr, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr_1 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_1, torch.int64), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_1, %constant_1), kwargs = {})
    %and_ : [#users=1] = call_method[target=and_](args = (%ops, %ge, %lt), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_2 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_2, torch.int64), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_1 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_2, %constant_2), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_3 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_3, torch.int64), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_1 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_3, %constant_3), kwargs = {})
    %and__1 : [#users=1] = call_method[target=and_](args = (%ops, %ge_1, %lt_1), kwargs = {})
    %and__2 : [#users=1] = call_method[target=and_](args = (%ops, %and_, %and__1), kwargs = {})
    %masked_subblock1 : [#users=1] = call_module[target=masked_subblock1](args = (%and__2, -inf), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr_4 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_4, torch.int64), kwargs = {})
    %constant_4 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_2 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_4, %constant_4), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr_5 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_5, torch.int64), kwargs = {})
    %constant_5 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_2 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_5, %constant_5), kwargs = {})
    %and__3 : [#users=1] = call_method[target=and_](args = (%ops, %ge_2, %lt_2), kwargs = {})
    %get_index_6 : [#users=1] = call_module[target=get_index](args = (index3,), kwargs = {})
    %index_expr_6 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_6, torch.int64), kwargs = {})
    %constant_6 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_3 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_6, %constant_6), kwargs = {})
    %get_index_7 : [#users=1] = call_module[target=get_index](args = (index3,), kwargs = {})
    %index_expr_7 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_7, torch.int64), kwargs = {})
    %constant_7 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_3 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_7, %constant_7), kwargs = {})
    %and__4 : [#users=1] = call_method[target=and_](args = (%ops, %ge_3, %lt_3), kwargs = {})
    %and__5 : [#users=1] = call_method[target=and_](args = (%ops, %and__3, %and__4), kwargs = {})
    %masked_subblock2 : [#users=1] = call_module[target=masked_subblock2](args = (%and__5, -inf), kwargs = {})
    %maximum : [#users=1] = call_method[target=maximum](args = (%ops, %masked_subblock2, %masked_subblock1), kwargs = {})
    %get_index_8 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr_8 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_8, torch.int64), kwargs = {})
    %constant_8 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_4 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_8, %constant_8), kwargs = {})
    %get_index_9 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr_9 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_9, torch.int64), kwargs = {})
    %constant_9 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_4 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_9, %constant_9), kwargs = {})
    %and__6 : [#users=1] = call_method[target=and_](args = (%ops, %ge_4, %lt_4), kwargs = {})
    %get_index_10 : [#users=1] = call_module[target=get_index](args = (index5,), kwargs = {})
    %index_expr_10 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_10, torch.int64), kwargs = {})
    %constant_10 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_5 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_10, %constant_10), kwargs = {})
    %get_index_11 : [#users=1] = call_module[target=get_index](args = (index5,), kwargs = {})
    %index_expr_11 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_11, torch.int64), kwargs = {})
    %constant_11 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_5 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_11, %constant_11), kwargs = {})
    %and__7 : [#users=1] = call_method[target=and_](args = (%ops, %ge_5, %lt_5), kwargs = {})
    %and__8 : [#users=1] = call_method[target=and_](args = (%ops, %and__6, %and__7), kwargs = {})
    %masked_subblock3 : [#users=1] = call_module[target=masked_subblock3](args = (%and__8, -inf), kwargs = {})
    %maximum_1 : [#users=1] = call_method[target=maximum](args = (%ops, %masked_subblock3, %maximum), kwargs = {})
    %get_index_12 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_12 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_12, torch.int64), kwargs = {})
    %constant_12 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_6 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_12, %constant_12), kwargs = {})
    %get_index_13 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_13 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_13, torch.int64), kwargs = {})
    %constant_13 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_6 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_13, %constant_13), kwargs = {})
    %and__9 : [#users=1] = call_method[target=and_](args = (%ops, %ge_6, %lt_6), kwargs = {})
    %get_index_14 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_14 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_14, torch.int64), kwargs = {})
    %constant_14 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_7 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_14, %constant_14), kwargs = {})
    %get_index_15 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_15 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_15, torch.int64), kwargs = {})
    %constant_15 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_7 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_15, %constant_15), kwargs = {})
    %and__10 : [#users=1] = call_method[target=and_](args = (%ops, %ge_7, %lt_7), kwargs = {})
    %and__11 : [#users=1] = call_method[target=and_](args = (%ops, %and__9, %and__10), kwargs = {})
    %masked_subblock4 : [#users=1] = call_module[target=masked_subblock4](args = (%and__11, -inf), kwargs = {})
    %maximum_2 : [#users=1] = call_method[target=maximum](args = (%ops, %masked_subblock4, %maximum_1), kwargs = {})
    %get_index_16 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_16 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_16, torch.int64), kwargs = {})
    %constant_16 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_8 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_16, %constant_16), kwargs = {})
    %get_index_17 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_17 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_17, torch.int64), kwargs = {})
    %constant_17 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_8 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_17, %constant_17), kwargs = {})
    %and__12 : [#users=1] = call_method[target=and_](args = (%ops, %ge_8, %lt_8), kwargs = {})
    %get_index_18 : [#users=1] = call_module[target=get_index](args = (index3,), kwargs = {})
    %index_expr_18 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_18, torch.int64), kwargs = {})
    %constant_18 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_9 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_18, %constant_18), kwargs = {})
    %get_index_19 : [#users=1] = call_module[target=get_index](args = (index3,), kwargs = {})
    %index_expr_19 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_19, torch.int64), kwargs = {})
    %constant_19 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_9 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_19, %constant_19), kwargs = {})
    %and__13 : [#users=1] = call_method[target=and_](args = (%ops, %ge_9, %lt_9), kwargs = {})
    %and__14 : [#users=1] = call_method[target=and_](args = (%ops, %and__12, %and__13), kwargs = {})
    %masked_subblock5 : [#users=1] = call_module[target=masked_subblock5](args = (%and__14, -inf), kwargs = {})
    %maximum_3 : [#users=1] = call_method[target=maximum](args = (%ops, %masked_subblock5, %maximum_2), kwargs = {})
    %get_index_20 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_20 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_20, torch.int64), kwargs = {})
    %constant_20 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_10 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_20, %constant_20), kwargs = {})
    %get_index_21 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_21 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_21, torch.int64), kwargs = {})
    %constant_21 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_10 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_21, %constant_21), kwargs = {})
    %and__15 : [#users=1] = call_method[target=and_](args = (%ops, %ge_10, %lt_10), kwargs = {})
    %get_index_22 : [#users=1] = call_module[target=get_index](args = (index5,), kwargs = {})
    %index_expr_22 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_22, torch.int64), kwargs = {})
    %constant_22 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_11 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_22, %constant_22), kwargs = {})
    %get_index_23 : [#users=1] = call_module[target=get_index](args = (index5,), kwargs = {})
    %index_expr_23 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_23, torch.int64), kwargs = {})
    %constant_23 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_11 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_23, %constant_23), kwargs = {})
    %and__16 : [#users=1] = call_method[target=and_](args = (%ops, %ge_11, %lt_11), kwargs = {})
    %and__17 : [#users=1] = call_method[target=and_](args = (%ops, %and__15, %and__16), kwargs = {})
    %masked_subblock6 : [#users=1] = call_module[target=masked_subblock6](args = (%and__17, -inf), kwargs = {})
    %maximum_4 : [#users=1] = call_method[target=maximum](args = (%ops, %masked_subblock6, %maximum_3), kwargs = {})
    %get_index_24 : [#users=1] = call_module[target=get_index](args = (index11,), kwargs = {})
    %index_expr_24 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_24, torch.int64), kwargs = {})
    %constant_24 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_12 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_24, %constant_24), kwargs = {})
    %get_index_25 : [#users=1] = call_module[target=get_index](args = (index11,), kwargs = {})
    %index_expr_25 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_25, torch.int64), kwargs = {})
    %constant_25 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_12 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_25, %constant_25), kwargs = {})
    %and__18 : [#users=1] = call_method[target=and_](args = (%ops, %ge_12, %lt_12), kwargs = {})
    %get_index_26 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_26 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_26, torch.int64), kwargs = {})
    %constant_26 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_13 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_26, %constant_26), kwargs = {})
    %get_index_27 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_27 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_27, torch.int64), kwargs = {})
    %constant_27 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_13 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_27, %constant_27), kwargs = {})
    %and__19 : [#users=1] = call_method[target=and_](args = (%ops, %ge_13, %lt_13), kwargs = {})
    %and__20 : [#users=1] = call_method[target=and_](args = (%ops, %and__18, %and__19), kwargs = {})
    %masked_subblock7 : [#users=1] = call_module[target=masked_subblock7](args = (%and__20, -inf), kwargs = {})
    %maximum_5 : [#users=1] = call_method[target=maximum](args = (%ops, %masked_subblock7, %maximum_4), kwargs = {})
    %get_index_28 : [#users=1] = call_module[target=get_index](args = (index11,), kwargs = {})
    %index_expr_28 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_28, torch.int64), kwargs = {})
    %constant_28 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_14 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_28, %constant_28), kwargs = {})
    %get_index_29 : [#users=1] = call_module[target=get_index](args = (index11,), kwargs = {})
    %index_expr_29 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_29, torch.int64), kwargs = {})
    %constant_29 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_14 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_29, %constant_29), kwargs = {})
    %and__21 : [#users=1] = call_method[target=and_](args = (%ops, %ge_14, %lt_14), kwargs = {})
    %get_index_30 : [#users=1] = call_module[target=get_index](args = (index3,), kwargs = {})
    %index_expr_30 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_30, torch.int64), kwargs = {})
    %constant_30 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_15 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_30, %constant_30), kwargs = {})
    %get_index_31 : [#users=1] = call_module[target=get_index](args = (index3,), kwargs = {})
    %index_expr_31 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_31, torch.int64), kwargs = {})
    %constant_31 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_15 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_31, %constant_31), kwargs = {})
    %and__22 : [#users=1] = call_method[target=and_](args = (%ops, %ge_15, %lt_15), kwargs = {})
    %and__23 : [#users=1] = call_method[target=and_](args = (%ops, %and__21, %and__22), kwargs = {})
    %masked_subblock8 : [#users=1] = call_module[target=masked_subblock8](args = (%and__23, -inf), kwargs = {})
    %maximum_6 : [#users=1] = call_method[target=maximum](args = (%ops, %masked_subblock8, %maximum_5), kwargs = {})
    %get_index_32 : [#users=1] = call_module[target=get_index](args = (index11,), kwargs = {})
    %index_expr_32 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_32, torch.int64), kwargs = {})
    %constant_32 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_16 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_32, %constant_32), kwargs = {})
    %get_index_33 : [#users=1] = call_module[target=get_index](args = (index11,), kwargs = {})
    %index_expr_33 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_33, torch.int64), kwargs = {})
    %constant_33 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_16 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_33, %constant_33), kwargs = {})
    %and__24 : [#users=1] = call_method[target=and_](args = (%ops, %ge_16, %lt_16), kwargs = {})
    %get_index_34 : [#users=1] = call_module[target=get_index](args = (index5,), kwargs = {})
    %index_expr_34 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_34, torch.int64), kwargs = {})
    %constant_34 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_17 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_34, %constant_34), kwargs = {})
    %get_index_35 : [#users=1] = call_module[target=get_index](args = (index5,), kwargs = {})
    %index_expr_35 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_35, torch.int64), kwargs = {})
    %constant_35 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_17 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_35, %constant_35), kwargs = {})
    %and__25 : [#users=1] = call_method[target=and_](args = (%ops, %ge_17, %lt_17), kwargs = {})
    %and__26 : [#users=1] = call_method[target=and_](args = (%ops, %and__24, %and__25), kwargs = {})
    %masked_subblock9 : [#users=1] = call_module[target=masked_subblock9](args = (%and__26, -inf), kwargs = {})
    %maximum_7 : [#users=1] = call_method[target=maximum](args = (%ops, %masked_subblock9, %maximum_6), kwargs = {})
    %get_index_36 : [#users=1] = call_module[target=get_index](args = (index15,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf10, %get_index_36, %maximum_7, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index2,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index5,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index8,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index11,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index13,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index15,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index18,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index20,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index22,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
self.graph: graph():
    %ops : [#users=169] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index, torch.int64), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge : [#users=1] = call_method[target=ge](args = (%ops, %index_expr, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr_1 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_1, torch.int64), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_1, %constant_1), kwargs = {})
    %and_ : [#users=1] = call_method[target=and_](args = (%ops, %ge, %lt), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_2 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_2, torch.int64), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_1 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_2, %constant_2), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_3 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_3, torch.int64), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_1 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_3, %constant_3), kwargs = {})
    %and__1 : [#users=1] = call_method[target=and_](args = (%ops, %ge_1, %lt_1), kwargs = {})
    %and__2 : [#users=1] = call_method[target=and_](args = (%ops, %and_, %and__1), kwargs = {})
    %masked_subblock1 : [#users=2] = call_module[target=masked_subblock1](args = (%and__2, -inf), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index3,), kwargs = {})
    %index_expr_4 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_4, torch.int64), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr_5 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_5, torch.int64), kwargs = {})
    %constant_4 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_2 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_5, %constant_4), kwargs = {})
    %get_index_6 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr_6 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_6, torch.int64), kwargs = {})
    %constant_5 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_2 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_6, %constant_5), kwargs = {})
    %and__3 : [#users=1] = call_method[target=and_](args = (%ops, %ge_2, %lt_2), kwargs = {})
    %get_index_7 : [#users=1] = call_module[target=get_index](args = (index4,), kwargs = {})
    %index_expr_7 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_7, torch.int64), kwargs = {})
    %constant_6 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_3 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_7, %constant_6), kwargs = {})
    %get_index_8 : [#users=1] = call_module[target=get_index](args = (index4,), kwargs = {})
    %index_expr_8 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_8, torch.int64), kwargs = {})
    %constant_7 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_3 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_8, %constant_7), kwargs = {})
    %and__4 : [#users=1] = call_method[target=and_](args = (%ops, %ge_3, %lt_3), kwargs = {})
    %and__5 : [#users=1] = call_method[target=and_](args = (%ops, %and__3, %and__4), kwargs = {})
    %masked_subblock2 : [#users=2] = call_module[target=masked_subblock2](args = (%and__5, -inf), kwargs = {})
    %get_index_9 : [#users=1] = call_module[target=get_index](args = (index6,), kwargs = {})
    %index_expr_9 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_9, torch.int64), kwargs = {})
    %gt : [#users=1] = call_method[target=gt](args = (%ops, %masked_subblock2, %masked_subblock1), kwargs = {})
    %where : [#users=1] = call_method[target=where](args = (%ops, %gt, %index_expr_9, %index_expr_4), kwargs = {})
    %maximum : [#users=2] = call_method[target=maximum](args = (%ops, %masked_subblock2, %masked_subblock1), kwargs = {})
    %get_index_10 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr_10 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_10, torch.int64), kwargs = {})
    %constant_8 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_4 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_10, %constant_8), kwargs = {})
    %get_index_11 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr_11 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_11, torch.int64), kwargs = {})
    %constant_9 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_4 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_11, %constant_9), kwargs = {})
    %and__6 : [#users=1] = call_method[target=and_](args = (%ops, %ge_4, %lt_4), kwargs = {})
    %get_index_12 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_12 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_12, torch.int64), kwargs = {})
    %constant_10 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_5 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_12, %constant_10), kwargs = {})
    %get_index_13 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_13 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_13, torch.int64), kwargs = {})
    %constant_11 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_5 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_13, %constant_11), kwargs = {})
    %and__7 : [#users=1] = call_method[target=and_](args = (%ops, %ge_5, %lt_5), kwargs = {})
    %and__8 : [#users=1] = call_method[target=and_](args = (%ops, %and__6, %and__7), kwargs = {})
    %masked_subblock3 : [#users=2] = call_module[target=masked_subblock3](args = (%and__8, -inf), kwargs = {})
    %get_index_14 : [#users=1] = call_module[target=get_index](args = (index9,), kwargs = {})
    %index_expr_14 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_14, torch.int64), kwargs = {})
    %gt_1 : [#users=1] = call_method[target=gt](args = (%ops, %masked_subblock3, %maximum), kwargs = {})
    %where_1 : [#users=1] = call_method[target=where](args = (%ops, %gt_1, %index_expr_14, %where), kwargs = {})
    %maximum_1 : [#users=2] = call_method[target=maximum](args = (%ops, %masked_subblock3, %maximum), kwargs = {})
    %get_index_15 : [#users=1] = call_module[target=get_index](args = (index10,), kwargs = {})
    %index_expr_15 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_15, torch.int64), kwargs = {})
    %constant_12 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_6 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_15, %constant_12), kwargs = {})
    %get_index_16 : [#users=1] = call_module[target=get_index](args = (index10,), kwargs = {})
    %index_expr_16 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_16, torch.int64), kwargs = {})
    %constant_13 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_6 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_16, %constant_13), kwargs = {})
    %and__9 : [#users=1] = call_method[target=and_](args = (%ops, %ge_6, %lt_6), kwargs = {})
    %get_index_17 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_17 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_17, torch.int64), kwargs = {})
    %constant_14 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_7 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_17, %constant_14), kwargs = {})
    %get_index_18 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_18 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_18, torch.int64), kwargs = {})
    %constant_15 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_7 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_18, %constant_15), kwargs = {})
    %and__10 : [#users=1] = call_method[target=and_](args = (%ops, %ge_7, %lt_7), kwargs = {})
    %and__11 : [#users=1] = call_method[target=and_](args = (%ops, %and__9, %and__10), kwargs = {})
    %masked_subblock4 : [#users=2] = call_module[target=masked_subblock4](args = (%and__11, -inf), kwargs = {})
    %get_index_19 : [#users=1] = call_module[target=get_index](args = (index12,), kwargs = {})
    %index_expr_19 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_19, torch.int64), kwargs = {})
    %gt_2 : [#users=1] = call_method[target=gt](args = (%ops, %masked_subblock4, %maximum_1), kwargs = {})
    %where_2 : [#users=1] = call_method[target=where](args = (%ops, %gt_2, %index_expr_19, %where_1), kwargs = {})
    %maximum_2 : [#users=2] = call_method[target=maximum](args = (%ops, %masked_subblock4, %maximum_1), kwargs = {})
    %get_index_20 : [#users=1] = call_module[target=get_index](args = (index10,), kwargs = {})
    %index_expr_20 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_20, torch.int64), kwargs = {})
    %constant_16 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_8 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_20, %constant_16), kwargs = {})
    %get_index_21 : [#users=1] = call_module[target=get_index](args = (index10,), kwargs = {})
    %index_expr_21 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_21, torch.int64), kwargs = {})
    %constant_17 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_8 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_21, %constant_17), kwargs = {})
    %and__12 : [#users=1] = call_method[target=and_](args = (%ops, %ge_8, %lt_8), kwargs = {})
    %get_index_22 : [#users=1] = call_module[target=get_index](args = (index4,), kwargs = {})
    %index_expr_22 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_22, torch.int64), kwargs = {})
    %constant_18 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_9 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_22, %constant_18), kwargs = {})
    %get_index_23 : [#users=1] = call_module[target=get_index](args = (index4,), kwargs = {})
    %index_expr_23 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_23, torch.int64), kwargs = {})
    %constant_19 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_9 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_23, %constant_19), kwargs = {})
    %and__13 : [#users=1] = call_method[target=and_](args = (%ops, %ge_9, %lt_9), kwargs = {})
    %and__14 : [#users=1] = call_method[target=and_](args = (%ops, %and__12, %and__13), kwargs = {})
    %masked_subblock5 : [#users=2] = call_module[target=masked_subblock5](args = (%and__14, -inf), kwargs = {})
    %get_index_24 : [#users=1] = call_module[target=get_index](args = (index14,), kwargs = {})
    %index_expr_24 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_24, torch.int64), kwargs = {})
    %gt_3 : [#users=1] = call_method[target=gt](args = (%ops, %masked_subblock5, %maximum_2), kwargs = {})
    %where_3 : [#users=1] = call_method[target=where](args = (%ops, %gt_3, %index_expr_24, %where_2), kwargs = {})
    %maximum_3 : [#users=2] = call_method[target=maximum](args = (%ops, %masked_subblock5, %maximum_2), kwargs = {})
    %get_index_25 : [#users=1] = call_module[target=get_index](args = (index10,), kwargs = {})
    %index_expr_25 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_25, torch.int64), kwargs = {})
    %constant_20 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_10 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_25, %constant_20), kwargs = {})
    %get_index_26 : [#users=1] = call_module[target=get_index](args = (index10,), kwargs = {})
    %index_expr_26 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_26, torch.int64), kwargs = {})
    %constant_21 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_10 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_26, %constant_21), kwargs = {})
    %and__15 : [#users=1] = call_method[target=and_](args = (%ops, %ge_10, %lt_10), kwargs = {})
    %get_index_27 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_27 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_27, torch.int64), kwargs = {})
    %constant_22 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_11 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_27, %constant_22), kwargs = {})
    %get_index_28 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_28 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_28, torch.int64), kwargs = {})
    %constant_23 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_11 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_28, %constant_23), kwargs = {})
    %and__16 : [#users=1] = call_method[target=and_](args = (%ops, %ge_11, %lt_11), kwargs = {})
    %and__17 : [#users=1] = call_method[target=and_](args = (%ops, %and__15, %and__16), kwargs = {})
    %masked_subblock6 : [#users=2] = call_module[target=masked_subblock6](args = (%and__17, -inf), kwargs = {})
    %get_index_29 : [#users=1] = call_module[target=get_index](args = (index16,), kwargs = {})
    %index_expr_29 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_29, torch.int64), kwargs = {})
    %gt_4 : [#users=1] = call_method[target=gt](args = (%ops, %masked_subblock6, %maximum_3), kwargs = {})
    %where_4 : [#users=1] = call_method[target=where](args = (%ops, %gt_4, %index_expr_29, %where_3), kwargs = {})
    %maximum_4 : [#users=2] = call_method[target=maximum](args = (%ops, %masked_subblock6, %maximum_3), kwargs = {})
    %get_index_30 : [#users=1] = call_module[target=get_index](args = (index17,), kwargs = {})
    %index_expr_30 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_30, torch.int64), kwargs = {})
    %constant_24 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_12 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_30, %constant_24), kwargs = {})
    %get_index_31 : [#users=1] = call_module[target=get_index](args = (index17,), kwargs = {})
    %index_expr_31 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_31, torch.int64), kwargs = {})
    %constant_25 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_12 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_31, %constant_25), kwargs = {})
    %and__18 : [#users=1] = call_method[target=and_](args = (%ops, %ge_12, %lt_12), kwargs = {})
    %get_index_32 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_32 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_32, torch.int64), kwargs = {})
    %constant_26 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_13 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_32, %constant_26), kwargs = {})
    %get_index_33 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_33 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_33, torch.int64), kwargs = {})
    %constant_27 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_13 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_33, %constant_27), kwargs = {})
    %and__19 : [#users=1] = call_method[target=and_](args = (%ops, %ge_13, %lt_13), kwargs = {})
    %and__20 : [#users=1] = call_method[target=and_](args = (%ops, %and__18, %and__19), kwargs = {})
    %masked_subblock7 : [#users=2] = call_module[target=masked_subblock7](args = (%and__20, -inf), kwargs = {})
    %get_index_34 : [#users=1] = call_module[target=get_index](args = (index19,), kwargs = {})
    %index_expr_34 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_34, torch.int64), kwargs = {})
    %gt_5 : [#users=1] = call_method[target=gt](args = (%ops, %masked_subblock7, %maximum_4), kwargs = {})
    %where_5 : [#users=1] = call_method[target=where](args = (%ops, %gt_5, %index_expr_34, %where_4), kwargs = {})
    %maximum_5 : [#users=2] = call_method[target=maximum](args = (%ops, %masked_subblock7, %maximum_4), kwargs = {})
    %get_index_35 : [#users=1] = call_module[target=get_index](args = (index17,), kwargs = {})
    %index_expr_35 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_35, torch.int64), kwargs = {})
    %constant_28 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_14 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_35, %constant_28), kwargs = {})
    %get_index_36 : [#users=1] = call_module[target=get_index](args = (index17,), kwargs = {})
    %index_expr_36 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_36, torch.int64), kwargs = {})
    %constant_29 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_14 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_36, %constant_29), kwargs = {})
    %and__21 : [#users=1] = call_method[target=and_](args = (%ops, %ge_14, %lt_14), kwargs = {})
    %get_index_37 : [#users=1] = call_module[target=get_index](args = (index4,), kwargs = {})
    %index_expr_37 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_37, torch.int64), kwargs = {})
    %constant_30 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_15 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_37, %constant_30), kwargs = {})
    %get_index_38 : [#users=1] = call_module[target=get_index](args = (index4,), kwargs = {})
    %index_expr_38 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_38, torch.int64), kwargs = {})
    %constant_31 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_15 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_38, %constant_31), kwargs = {})
    %and__22 : [#users=1] = call_method[target=and_](args = (%ops, %ge_15, %lt_15), kwargs = {})
    %and__23 : [#users=1] = call_method[target=and_](args = (%ops, %and__21, %and__22), kwargs = {})
    %masked_subblock8 : [#users=2] = call_module[target=masked_subblock8](args = (%and__23, -inf), kwargs = {})
    %get_index_39 : [#users=1] = call_module[target=get_index](args = (index21,), kwargs = {})
    %index_expr_39 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_39, torch.int64), kwargs = {})
    %gt_6 : [#users=1] = call_method[target=gt](args = (%ops, %masked_subblock8, %maximum_5), kwargs = {})
    %where_6 : [#users=1] = call_method[target=where](args = (%ops, %gt_6, %index_expr_39, %where_5), kwargs = {})
    %maximum_6 : [#users=2] = call_method[target=maximum](args = (%ops, %masked_subblock8, %maximum_5), kwargs = {})
    %get_index_40 : [#users=1] = call_module[target=get_index](args = (index17,), kwargs = {})
    %index_expr_40 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_40, torch.int64), kwargs = {})
    %constant_32 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_16 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_40, %constant_32), kwargs = {})
    %get_index_41 : [#users=1] = call_module[target=get_index](args = (index17,), kwargs = {})
    %index_expr_41 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_41, torch.int64), kwargs = {})
    %constant_33 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_16 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_41, %constant_33), kwargs = {})
    %and__24 : [#users=1] = call_method[target=and_](args = (%ops, %ge_16, %lt_16), kwargs = {})
    %get_index_42 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_42 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_42, torch.int64), kwargs = {})
    %constant_34 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_17 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_42, %constant_34), kwargs = {})
    %get_index_43 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_43 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_43, torch.int64), kwargs = {})
    %constant_35 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_17 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_43, %constant_35), kwargs = {})
    %and__25 : [#users=1] = call_method[target=and_](args = (%ops, %ge_17, %lt_17), kwargs = {})
    %and__26 : [#users=1] = call_method[target=and_](args = (%ops, %and__24, %and__25), kwargs = {})
    %masked_subblock9 : [#users=2] = call_module[target=masked_subblock9](args = (%and__26, -inf), kwargs = {})
    %get_index_44 : [#users=1] = call_module[target=get_index](args = (index23,), kwargs = {})
    %index_expr_44 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_44, torch.int64), kwargs = {})
    %gt_7 : [#users=1] = call_method[target=gt](args = (%ops, %masked_subblock9, %maximum_6), kwargs = {})
    %where_7 : [#users=1] = call_method[target=where](args = (%ops, %gt_7, %index_expr_44, %where_6), kwargs = {})
    %maximum_7 : [#users=0] = call_method[target=maximum](args = (%ops, %masked_subblock9, %maximum_6), kwargs = {})
    %get_index_45 : [#users=1] = call_module[target=get_index](args = (index24,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf11, %get_index_45, %where_7, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index2,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index5,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index8,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index11,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index13,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index15,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index18,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index20,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=1] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index22,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf9, %get_index), kwargs = {})
    return load
self.graph: graph():
    %ops : [#users=169] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index, torch.int64), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge : [#users=1] = call_method[target=ge](args = (%ops, %index_expr, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr_1 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_1, torch.int64), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_1, %constant_1), kwargs = {})
    %and_ : [#users=1] = call_method[target=and_](args = (%ops, %ge, %lt), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_2 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_2, torch.int64), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_1 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_2, %constant_2), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_3 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_3, torch.int64), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_1 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_3, %constant_3), kwargs = {})
    %and__1 : [#users=1] = call_method[target=and_](args = (%ops, %ge_1, %lt_1), kwargs = {})
    %and__2 : [#users=1] = call_method[target=and_](args = (%ops, %and_, %and__1), kwargs = {})
    %masked_subblock1 : [#users=2] = call_module[target=masked_subblock1](args = (%and__2, -inf), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index3,), kwargs = {})
    %index_expr_4 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_4, torch.int64), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr_5 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_5, torch.int64), kwargs = {})
    %constant_4 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_2 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_5, %constant_4), kwargs = {})
    %get_index_6 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr_6 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_6, torch.int64), kwargs = {})
    %constant_5 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_2 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_6, %constant_5), kwargs = {})
    %and__3 : [#users=1] = call_method[target=and_](args = (%ops, %ge_2, %lt_2), kwargs = {})
    %get_index_7 : [#users=1] = call_module[target=get_index](args = (index4,), kwargs = {})
    %index_expr_7 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_7, torch.int64), kwargs = {})
    %constant_6 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_3 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_7, %constant_6), kwargs = {})
    %get_index_8 : [#users=1] = call_module[target=get_index](args = (index4,), kwargs = {})
    %index_expr_8 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_8, torch.int64), kwargs = {})
    %constant_7 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_3 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_8, %constant_7), kwargs = {})
    %and__4 : [#users=1] = call_method[target=and_](args = (%ops, %ge_3, %lt_3), kwargs = {})
    %and__5 : [#users=1] = call_method[target=and_](args = (%ops, %and__3, %and__4), kwargs = {})
    %masked_subblock2 : [#users=2] = call_module[target=masked_subblock2](args = (%and__5, -inf), kwargs = {})
    %get_index_9 : [#users=1] = call_module[target=get_index](args = (index6,), kwargs = {})
    %index_expr_9 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_9, torch.int64), kwargs = {})
    %gt : [#users=1] = call_method[target=gt](args = (%ops, %masked_subblock2, %masked_subblock1), kwargs = {})
    %where : [#users=1] = call_method[target=where](args = (%ops, %gt, %index_expr_9, %index_expr_4), kwargs = {})
    %maximum : [#users=2] = call_method[target=maximum](args = (%ops, %masked_subblock2, %masked_subblock1), kwargs = {})
    %get_index_10 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr_10 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_10, torch.int64), kwargs = {})
    %constant_8 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_4 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_10, %constant_8), kwargs = {})
    %get_index_11 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %index_expr_11 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_11, torch.int64), kwargs = {})
    %constant_9 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_4 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_11, %constant_9), kwargs = {})
    %and__6 : [#users=1] = call_method[target=and_](args = (%ops, %ge_4, %lt_4), kwargs = {})
    %get_index_12 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_12 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_12, torch.int64), kwargs = {})
    %constant_10 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_5 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_12, %constant_10), kwargs = {})
    %get_index_13 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_13 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_13, torch.int64), kwargs = {})
    %constant_11 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_5 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_13, %constant_11), kwargs = {})
    %and__7 : [#users=1] = call_method[target=and_](args = (%ops, %ge_5, %lt_5), kwargs = {})
    %and__8 : [#users=1] = call_method[target=and_](args = (%ops, %and__6, %and__7), kwargs = {})
    %masked_subblock3 : [#users=2] = call_module[target=masked_subblock3](args = (%and__8, -inf), kwargs = {})
    %get_index_14 : [#users=1] = call_module[target=get_index](args = (index9,), kwargs = {})
    %index_expr_14 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_14, torch.int64), kwargs = {})
    %gt_1 : [#users=1] = call_method[target=gt](args = (%ops, %masked_subblock3, %maximum), kwargs = {})
    %where_1 : [#users=1] = call_method[target=where](args = (%ops, %gt_1, %index_expr_14, %where), kwargs = {})
    %maximum_1 : [#users=2] = call_method[target=maximum](args = (%ops, %masked_subblock3, %maximum), kwargs = {})
    %get_index_15 : [#users=1] = call_module[target=get_index](args = (index10,), kwargs = {})
    %index_expr_15 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_15, torch.int64), kwargs = {})
    %constant_12 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_6 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_15, %constant_12), kwargs = {})
    %get_index_16 : [#users=1] = call_module[target=get_index](args = (index10,), kwargs = {})
    %index_expr_16 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_16, torch.int64), kwargs = {})
    %constant_13 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_6 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_16, %constant_13), kwargs = {})
    %and__9 : [#users=1] = call_method[target=and_](args = (%ops, %ge_6, %lt_6), kwargs = {})
    %get_index_17 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_17 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_17, torch.int64), kwargs = {})
    %constant_14 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_7 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_17, %constant_14), kwargs = {})
    %get_index_18 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_18 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_18, torch.int64), kwargs = {})
    %constant_15 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_7 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_18, %constant_15), kwargs = {})
    %and__10 : [#users=1] = call_method[target=and_](args = (%ops, %ge_7, %lt_7), kwargs = {})
    %and__11 : [#users=1] = call_method[target=and_](args = (%ops, %and__9, %and__10), kwargs = {})
    %masked_subblock4 : [#users=2] = call_module[target=masked_subblock4](args = (%and__11, -inf), kwargs = {})
    %get_index_19 : [#users=1] = call_module[target=get_index](args = (index12,), kwargs = {})
    %index_expr_19 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_19, torch.int64), kwargs = {})
    %gt_2 : [#users=1] = call_method[target=gt](args = (%ops, %masked_subblock4, %maximum_1), kwargs = {})
    %where_2 : [#users=1] = call_method[target=where](args = (%ops, %gt_2, %index_expr_19, %where_1), kwargs = {})
    %maximum_2 : [#users=2] = call_method[target=maximum](args = (%ops, %masked_subblock4, %maximum_1), kwargs = {})
    %get_index_20 : [#users=1] = call_module[target=get_index](args = (index10,), kwargs = {})
    %index_expr_20 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_20, torch.int64), kwargs = {})
    %constant_16 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_8 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_20, %constant_16), kwargs = {})
    %get_index_21 : [#users=1] = call_module[target=get_index](args = (index10,), kwargs = {})
    %index_expr_21 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_21, torch.int64), kwargs = {})
    %constant_17 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_8 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_21, %constant_17), kwargs = {})
    %and__12 : [#users=1] = call_method[target=and_](args = (%ops, %ge_8, %lt_8), kwargs = {})
    %get_index_22 : [#users=1] = call_module[target=get_index](args = (index4,), kwargs = {})
    %index_expr_22 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_22, torch.int64), kwargs = {})
    %constant_18 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_9 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_22, %constant_18), kwargs = {})
    %get_index_23 : [#users=1] = call_module[target=get_index](args = (index4,), kwargs = {})
    %index_expr_23 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_23, torch.int64), kwargs = {})
    %constant_19 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_9 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_23, %constant_19), kwargs = {})
    %and__13 : [#users=1] = call_method[target=and_](args = (%ops, %ge_9, %lt_9), kwargs = {})
    %and__14 : [#users=1] = call_method[target=and_](args = (%ops, %and__12, %and__13), kwargs = {})
    %masked_subblock5 : [#users=2] = call_module[target=masked_subblock5](args = (%and__14, -inf), kwargs = {})
    %get_index_24 : [#users=1] = call_module[target=get_index](args = (index14,), kwargs = {})
    %index_expr_24 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_24, torch.int64), kwargs = {})
    %gt_3 : [#users=1] = call_method[target=gt](args = (%ops, %masked_subblock5, %maximum_2), kwargs = {})
    %where_3 : [#users=1] = call_method[target=where](args = (%ops, %gt_3, %index_expr_24, %where_2), kwargs = {})
    %maximum_3 : [#users=2] = call_method[target=maximum](args = (%ops, %masked_subblock5, %maximum_2), kwargs = {})
    %get_index_25 : [#users=1] = call_module[target=get_index](args = (index10,), kwargs = {})
    %index_expr_25 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_25, torch.int64), kwargs = {})
    %constant_20 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_10 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_25, %constant_20), kwargs = {})
    %get_index_26 : [#users=1] = call_module[target=get_index](args = (index10,), kwargs = {})
    %index_expr_26 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_26, torch.int64), kwargs = {})
    %constant_21 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_10 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_26, %constant_21), kwargs = {})
    %and__15 : [#users=1] = call_method[target=and_](args = (%ops, %ge_10, %lt_10), kwargs = {})
    %get_index_27 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_27 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_27, torch.int64), kwargs = {})
    %constant_22 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_11 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_27, %constant_22), kwargs = {})
    %get_index_28 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_28 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_28, torch.int64), kwargs = {})
    %constant_23 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_11 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_28, %constant_23), kwargs = {})
    %and__16 : [#users=1] = call_method[target=and_](args = (%ops, %ge_11, %lt_11), kwargs = {})
    %and__17 : [#users=1] = call_method[target=and_](args = (%ops, %and__15, %and__16), kwargs = {})
    %masked_subblock6 : [#users=2] = call_module[target=masked_subblock6](args = (%and__17, -inf), kwargs = {})
    %get_index_29 : [#users=1] = call_module[target=get_index](args = (index16,), kwargs = {})
    %index_expr_29 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_29, torch.int64), kwargs = {})
    %gt_4 : [#users=1] = call_method[target=gt](args = (%ops, %masked_subblock6, %maximum_3), kwargs = {})
    %where_4 : [#users=1] = call_method[target=where](args = (%ops, %gt_4, %index_expr_29, %where_3), kwargs = {})
    %maximum_4 : [#users=2] = call_method[target=maximum](args = (%ops, %masked_subblock6, %maximum_3), kwargs = {})
    %get_index_30 : [#users=1] = call_module[target=get_index](args = (index17,), kwargs = {})
    %index_expr_30 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_30, torch.int64), kwargs = {})
    %constant_24 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_12 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_30, %constant_24), kwargs = {})
    %get_index_31 : [#users=1] = call_module[target=get_index](args = (index17,), kwargs = {})
    %index_expr_31 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_31, torch.int64), kwargs = {})
    %constant_25 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_12 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_31, %constant_25), kwargs = {})
    %and__18 : [#users=1] = call_method[target=and_](args = (%ops, %ge_12, %lt_12), kwargs = {})
    %get_index_32 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_32 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_32, torch.int64), kwargs = {})
    %constant_26 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_13 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_32, %constant_26), kwargs = {})
    %get_index_33 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %index_expr_33 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_33, torch.int64), kwargs = {})
    %constant_27 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_13 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_33, %constant_27), kwargs = {})
    %and__19 : [#users=1] = call_method[target=and_](args = (%ops, %ge_13, %lt_13), kwargs = {})
    %and__20 : [#users=1] = call_method[target=and_](args = (%ops, %and__18, %and__19), kwargs = {})
    %masked_subblock7 : [#users=2] = call_module[target=masked_subblock7](args = (%and__20, -inf), kwargs = {})
    %get_index_34 : [#users=1] = call_module[target=get_index](args = (index19,), kwargs = {})
    %index_expr_34 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_34, torch.int64), kwargs = {})
    %gt_5 : [#users=1] = call_method[target=gt](args = (%ops, %masked_subblock7, %maximum_4), kwargs = {})
    %where_5 : [#users=1] = call_method[target=where](args = (%ops, %gt_5, %index_expr_34, %where_4), kwargs = {})
    %maximum_5 : [#users=2] = call_method[target=maximum](args = (%ops, %masked_subblock7, %maximum_4), kwargs = {})
    %get_index_35 : [#users=1] = call_module[target=get_index](args = (index17,), kwargs = {})
    %index_expr_35 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_35, torch.int64), kwargs = {})
    %constant_28 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_14 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_35, %constant_28), kwargs = {})
    %get_index_36 : [#users=1] = call_module[target=get_index](args = (index17,), kwargs = {})
    %index_expr_36 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_36, torch.int64), kwargs = {})
    %constant_29 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_14 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_36, %constant_29), kwargs = {})
    %and__21 : [#users=1] = call_method[target=and_](args = (%ops, %ge_14, %lt_14), kwargs = {})
    %get_index_37 : [#users=1] = call_module[target=get_index](args = (index4,), kwargs = {})
    %index_expr_37 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_37, torch.int64), kwargs = {})
    %constant_30 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_15 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_37, %constant_30), kwargs = {})
    %get_index_38 : [#users=1] = call_module[target=get_index](args = (index4,), kwargs = {})
    %index_expr_38 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_38, torch.int64), kwargs = {})
    %constant_31 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_15 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_38, %constant_31), kwargs = {})
    %and__22 : [#users=1] = call_method[target=and_](args = (%ops, %ge_15, %lt_15), kwargs = {})
    %and__23 : [#users=1] = call_method[target=and_](args = (%ops, %and__21, %and__22), kwargs = {})
    %masked_subblock8 : [#users=2] = call_module[target=masked_subblock8](args = (%and__23, -inf), kwargs = {})
    %get_index_39 : [#users=1] = call_module[target=get_index](args = (index21,), kwargs = {})
    %index_expr_39 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_39, torch.int64), kwargs = {})
    %gt_6 : [#users=1] = call_method[target=gt](args = (%ops, %masked_subblock8, %maximum_5), kwargs = {})
    %where_6 : [#users=1] = call_method[target=where](args = (%ops, %gt_6, %index_expr_39, %where_5), kwargs = {})
    %maximum_6 : [#users=2] = call_method[target=maximum](args = (%ops, %masked_subblock8, %maximum_5), kwargs = {})
    %get_index_40 : [#users=1] = call_module[target=get_index](args = (index17,), kwargs = {})
    %index_expr_40 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_40, torch.int64), kwargs = {})
    %constant_32 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_16 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_40, %constant_32), kwargs = {})
    %get_index_41 : [#users=1] = call_module[target=get_index](args = (index17,), kwargs = {})
    %index_expr_41 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_41, torch.int64), kwargs = {})
    %constant_33 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_16 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_41, %constant_33), kwargs = {})
    %and__24 : [#users=1] = call_method[target=and_](args = (%ops, %ge_16, %lt_16), kwargs = {})
    %get_index_42 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_42 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_42, torch.int64), kwargs = {})
    %constant_34 : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.int64), kwargs = {})
    %ge_17 : [#users=1] = call_method[target=ge](args = (%ops, %index_expr_42, %constant_34), kwargs = {})
    %get_index_43 : [#users=1] = call_module[target=get_index](args = (index7,), kwargs = {})
    %index_expr_43 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_43, torch.int64), kwargs = {})
    %constant_35 : [#users=1] = call_method[target=constant](args = (%ops, 112, torch.int64), kwargs = {})
    %lt_17 : [#users=1] = call_method[target=lt](args = (%ops, %index_expr_43, %constant_35), kwargs = {})
    %and__25 : [#users=1] = call_method[target=and_](args = (%ops, %ge_17, %lt_17), kwargs = {})
    %and__26 : [#users=1] = call_method[target=and_](args = (%ops, %and__24, %and__25), kwargs = {})
    %masked_subblock9 : [#users=2] = call_module[target=masked_subblock9](args = (%and__26, -inf), kwargs = {})
    %get_index_44 : [#users=1] = call_module[target=get_index](args = (index23,), kwargs = {})
    %index_expr_44 : [#users=1] = call_method[target=index_expr](args = (%ops, %get_index_44, torch.int64), kwargs = {})
    %gt_7 : [#users=1] = call_method[target=gt](args = (%ops, %masked_subblock9, %maximum_6), kwargs = {})
    %where_7 : [#users=1] = call_method[target=where](args = (%ops, %gt_7, %index_expr_44, %where_6), kwargs = {})
    %maximum_7 : [#users=0] = call_method[target=maximum](args = (%ops, %masked_subblock9, %maximum_6), kwargs = {})
    %get_index_45 : [#users=1] = call_module[target=get_index](args = (index24,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf11, %get_index_45, %where_7, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf12, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf13, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf12, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf13, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf13, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf14, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf13, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf14, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf12, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf14, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf15, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf12, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf14, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf15, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf15, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf16, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf15, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf16, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf14, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_66, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf17, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf14, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_66, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf17, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf15, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0003189792663476, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_67, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf18, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf15, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0003189792663476, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_67, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf18, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=16] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf12, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf14, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf15, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_5, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_6, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_1), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf19, %get_index_5, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=16] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf12, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf14, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf15, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_5, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_6, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_1), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf19, %get_index_5, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf20, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf21, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf20, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf21, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf21, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf22, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf21, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf22, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf20, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf22, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf23, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf20, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf22, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf23, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf23, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf24, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf23, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf24, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf22, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_69, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf25, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf22, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_69, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf25, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf23, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0003189792663476, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_70, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf26, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf23, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0003189792663476, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_70, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf26, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=18] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf20, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf22, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf23, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_8, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_9, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_5 : [#users=1] = call_method[target=load](args = (%ops, buf10, %get_index_5), kwargs = {})
    %add_2 : [#users=1] = call_method[target=add](args = (%ops, %add_1, %load_5), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_2), kwargs = {})
    %get_index_6 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf27, %get_index_6, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=18] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf20, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf22, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf23, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_8, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_9, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_5 : [#users=1] = call_method[target=load](args = (%ops, buf10, %get_index_5), kwargs = {})
    %add_2 : [#users=1] = call_method[target=add](args = (%ops, %add_1, %load_5), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_2), kwargs = {})
    %get_index_6 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf27, %get_index_6, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf28, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf29, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf28, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf29, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf29, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf30, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf29, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf30, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf28, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf30, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf31, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf28, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf30, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf31, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf31, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf32, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf31, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf32, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf30, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_72, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf33, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf30, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_72, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf33, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf31, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0003189792663476, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_73, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf34, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf31, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0003189792663476, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_73, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf34, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=16] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf28, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf30, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf31, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_11, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_12, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_1), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf35, %get_index_5, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=16] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf28, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf30, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf31, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_11, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_12, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_1), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf35, %get_index_5, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf36, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf37, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf36, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf37, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf37, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf38, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf37, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf38, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf36, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf38, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf39, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf36, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf38, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf39, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf39, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf40, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf39, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf40, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf38, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_75, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf41, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf38, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_75, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf41, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf39, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0003189792663476, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_76, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf42, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf39, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0003189792663476, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_76, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf42, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=18] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf36, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf38, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf39, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_14, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_15, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_5 : [#users=1] = call_method[target=load](args = (%ops, buf27, %get_index_5), kwargs = {})
    %add_2 : [#users=1] = call_method[target=add](args = (%ops, %add_1, %load_5), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_2), kwargs = {})
    %get_index_6 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf43, %get_index_6, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=18] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf36, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf38, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf39, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 3136, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_14, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_15, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_5 : [#users=1] = call_method[target=load](args = (%ops, buf27, %get_index_5), kwargs = {})
    %add_2 : [#users=1] = call_method[target=add](args = (%ops, %add_1, %load_5), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_2), kwargs = {})
    %get_index_6 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf43, %get_index_6, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf44, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf45, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf44, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf45, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf45, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf46, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf45, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf46, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf44, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf46, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf47, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf44, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf46, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf47, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf47, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf48, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf47, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf48, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf46, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_78, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf49, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf46, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_78, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf49, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf47, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0012771392081736, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_79, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf50, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf47, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0012771392081736, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_79, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf50, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=16] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf44, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf46, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf47, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_17, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_18, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_1), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf51, %get_index_5, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=16] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf44, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf46, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf47, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_17, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_18, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_1), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf51, %get_index_5, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf52, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf53, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf52, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf53, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf53, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf54, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf53, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf54, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf52, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf54, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf55, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf52, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf54, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf55, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf55, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf56, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf55, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf56, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf54, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_81, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf57, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf54, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_81, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf57, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf55, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0012771392081736, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_82, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf58, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf55, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0012771392081736, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_82, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf58, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf59, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf60, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf59, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf60, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf60, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf61, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf60, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf61, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf59, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf61, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf62, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf59, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf61, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf62, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf62, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf63, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf62, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf63, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf61, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_84, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf64, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf61, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_84, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf64, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf62, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0012771392081736, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_85, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf65, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf62, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0012771392081736, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_85, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf65, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=30] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf52, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf54, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf55, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_20, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_21, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_5 : [#users=1] = call_method[target=load](args = (%ops, buf59, %get_index_5), kwargs = {})
    %get_index_6 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_6 : [#users=1] = call_method[target=load](args = (%ops, buf61, %get_index_6), kwargs = {})
    %sub_1 : [#users=1] = call_method[target=sub](args = (%ops, %load_5, %load_6), kwargs = {})
    %get_index_7 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_7 : [#users=1] = call_method[target=load](args = (%ops, buf62, %get_index_7), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div_1 : [#users=1] = call_method[target=div](args = (%ops, %load_7, %constant_2), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add_2 : [#users=1] = call_method[target=add](args = (%ops, %div_1, %constant_3), kwargs = {})
    %rsqrt_1 : [#users=1] = call_method[target=rsqrt](args = (%ops, %add_2), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %sub_1, %rsqrt_1), kwargs = {})
    %get_index_8 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_8 : [#users=1] = call_method[target=load](args = (%ops, primals_23, %get_index_8), kwargs = {})
    %mul_3 : [#users=1] = call_method[target=mul](args = (%ops, %mul_2, %load_8), kwargs = {})
    %get_index_9 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_9 : [#users=1] = call_method[target=load](args = (%ops, primals_24, %get_index_9), kwargs = {})
    %add_3 : [#users=1] = call_method[target=add](args = (%ops, %mul_3, %load_9), kwargs = {})
    %add_4 : [#users=1] = call_method[target=add](args = (%ops, %add_1, %add_3), kwargs = {})
    %get_index_10 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf66, %get_index_10, %add_4, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=30] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf52, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf54, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf55, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_20, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_21, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_5 : [#users=1] = call_method[target=load](args = (%ops, buf59, %get_index_5), kwargs = {})
    %get_index_6 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_6 : [#users=1] = call_method[target=load](args = (%ops, buf61, %get_index_6), kwargs = {})
    %sub_1 : [#users=1] = call_method[target=sub](args = (%ops, %load_5, %load_6), kwargs = {})
    %get_index_7 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_7 : [#users=1] = call_method[target=load](args = (%ops, buf62, %get_index_7), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div_1 : [#users=1] = call_method[target=div](args = (%ops, %load_7, %constant_2), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add_2 : [#users=1] = call_method[target=add](args = (%ops, %div_1, %constant_3), kwargs = {})
    %rsqrt_1 : [#users=1] = call_method[target=rsqrt](args = (%ops, %add_2), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %sub_1, %rsqrt_1), kwargs = {})
    %get_index_8 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_8 : [#users=1] = call_method[target=load](args = (%ops, primals_23, %get_index_8), kwargs = {})
    %mul_3 : [#users=1] = call_method[target=mul](args = (%ops, %mul_2, %load_8), kwargs = {})
    %get_index_9 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_9 : [#users=1] = call_method[target=load](args = (%ops, primals_24, %get_index_9), kwargs = {})
    %add_3 : [#users=1] = call_method[target=add](args = (%ops, %mul_3, %load_9), kwargs = {})
    %add_4 : [#users=1] = call_method[target=add](args = (%ops, %add_1, %add_3), kwargs = {})
    %get_index_10 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf66, %get_index_10, %add_4, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=3] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf66, %get_index), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %load), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf67, %get_index_1, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=3] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf66, %get_index), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %load), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf67, %get_index_1, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf68, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf69, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf68, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf69, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf69, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf70, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf69, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf70, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf68, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf70, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf71, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf68, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf70, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf71, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf71, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf72, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf71, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf72, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf70, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_87, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf73, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf70, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_87, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf73, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf71, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0012771392081736, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_88, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf74, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf71, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0012771392081736, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_88, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf74, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=16] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf68, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf70, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf71, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_26, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_27, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_1), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf75, %get_index_5, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=16] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf68, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf70, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf71, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_26, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_27, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_1), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf75, %get_index_5, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf76, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf77, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf76, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf77, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf77, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf78, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf77, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf78, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf76, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf78, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf79, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf76, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf78, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf79, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf79, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf80, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf79, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf80, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf78, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_90, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf81, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf78, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_90, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf81, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf79, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0012771392081736, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_91, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf82, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf79, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0012771392081736, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_91, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf82, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=18] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf76, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf78, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf79, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_29, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_30, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_5 : [#users=1] = call_method[target=load](args = (%ops, buf67, %get_index_5), kwargs = {})
    %add_2 : [#users=1] = call_method[target=add](args = (%ops, %add_1, %load_5), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_2), kwargs = {})
    %get_index_6 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf83, %get_index_6, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=18] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf76, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf78, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf79, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 784, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_29, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_30, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_5 : [#users=1] = call_method[target=load](args = (%ops, buf67, %get_index_5), kwargs = {})
    %add_2 : [#users=1] = call_method[target=add](args = (%ops, %add_1, %load_5), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_2), kwargs = {})
    %get_index_6 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf83, %get_index_6, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf84, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf85, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf84, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf85, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf85, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf86, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf85, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf86, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf84, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf86, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf87, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf84, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf86, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf87, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf87, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf88, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf87, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf88, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf86, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_93, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf89, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf86, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_93, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf89, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf87, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.005128205128205, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_94, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf90, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf87, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.005128205128205, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_94, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf90, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=16] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf84, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf86, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf87, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_32, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_33, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_1), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf91, %get_index_5, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=16] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf84, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf86, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf87, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_32, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_33, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_1), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf91, %get_index_5, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf92, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf93, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf92, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf93, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf93, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf94, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf93, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf94, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf92, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf94, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf95, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf92, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf94, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf95, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf95, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf96, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf95, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf96, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf94, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_96, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf97, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf94, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_96, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf97, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf95, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.005128205128205, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_97, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf98, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf95, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.005128205128205, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_97, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf98, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf99, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf100, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf99, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf100, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf100, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf101, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf100, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf101, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf99, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf101, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf102, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf99, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf101, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf102, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf102, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf103, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf102, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf103, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf101, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_99, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf104, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf101, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_99, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf104, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf102, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.005128205128205, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_100, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf105, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf102, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.005128205128205, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_100, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf105, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=30] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf92, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf94, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf95, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_35, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_36, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_5 : [#users=1] = call_method[target=load](args = (%ops, buf99, %get_index_5), kwargs = {})
    %get_index_6 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_6 : [#users=1] = call_method[target=load](args = (%ops, buf101, %get_index_6), kwargs = {})
    %sub_1 : [#users=1] = call_method[target=sub](args = (%ops, %load_5, %load_6), kwargs = {})
    %get_index_7 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_7 : [#users=1] = call_method[target=load](args = (%ops, buf102, %get_index_7), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div_1 : [#users=1] = call_method[target=div](args = (%ops, %load_7, %constant_2), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add_2 : [#users=1] = call_method[target=add](args = (%ops, %div_1, %constant_3), kwargs = {})
    %rsqrt_1 : [#users=1] = call_method[target=rsqrt](args = (%ops, %add_2), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %sub_1, %rsqrt_1), kwargs = {})
    %get_index_8 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_8 : [#users=1] = call_method[target=load](args = (%ops, primals_38, %get_index_8), kwargs = {})
    %mul_3 : [#users=1] = call_method[target=mul](args = (%ops, %mul_2, %load_8), kwargs = {})
    %get_index_9 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_9 : [#users=1] = call_method[target=load](args = (%ops, primals_39, %get_index_9), kwargs = {})
    %add_3 : [#users=1] = call_method[target=add](args = (%ops, %mul_3, %load_9), kwargs = {})
    %add_4 : [#users=1] = call_method[target=add](args = (%ops, %add_1, %add_3), kwargs = {})
    %get_index_10 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf106, %get_index_10, %add_4, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=30] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf92, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf94, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf95, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_35, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_36, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_5 : [#users=1] = call_method[target=load](args = (%ops, buf99, %get_index_5), kwargs = {})
    %get_index_6 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_6 : [#users=1] = call_method[target=load](args = (%ops, buf101, %get_index_6), kwargs = {})
    %sub_1 : [#users=1] = call_method[target=sub](args = (%ops, %load_5, %load_6), kwargs = {})
    %get_index_7 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_7 : [#users=1] = call_method[target=load](args = (%ops, buf102, %get_index_7), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div_1 : [#users=1] = call_method[target=div](args = (%ops, %load_7, %constant_2), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add_2 : [#users=1] = call_method[target=add](args = (%ops, %div_1, %constant_3), kwargs = {})
    %rsqrt_1 : [#users=1] = call_method[target=rsqrt](args = (%ops, %add_2), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %sub_1, %rsqrt_1), kwargs = {})
    %get_index_8 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_8 : [#users=1] = call_method[target=load](args = (%ops, primals_38, %get_index_8), kwargs = {})
    %mul_3 : [#users=1] = call_method[target=mul](args = (%ops, %mul_2, %load_8), kwargs = {})
    %get_index_9 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_9 : [#users=1] = call_method[target=load](args = (%ops, primals_39, %get_index_9), kwargs = {})
    %add_3 : [#users=1] = call_method[target=add](args = (%ops, %mul_3, %load_9), kwargs = {})
    %add_4 : [#users=1] = call_method[target=add](args = (%ops, %add_1, %add_3), kwargs = {})
    %get_index_10 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf106, %get_index_10, %add_4, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=3] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf106, %get_index), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %load), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf107, %get_index_1, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=3] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf106, %get_index), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %load), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf107, %get_index_1, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf108, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf109, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf108, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf109, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf109, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf110, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf109, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf110, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf108, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf110, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf111, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf108, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf110, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf111, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf111, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf112, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf111, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf112, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf110, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_102, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf113, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf110, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_102, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf113, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf111, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.005128205128205, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_103, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf114, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf111, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.005128205128205, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_103, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf114, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=16] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf108, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf110, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf111, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_41, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_42, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_1), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf115, %get_index_5, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=16] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf108, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf110, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf111, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_41, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_42, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_1), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf115, %get_index_5, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf116, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf117, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf116, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf117, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf117, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf118, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf117, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf118, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf116, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf118, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf119, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf116, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf118, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf119, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf119, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf120, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf119, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf120, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf118, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_105, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf121, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf118, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_105, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf121, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf119, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.005128205128205, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_106, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf122, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf119, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.005128205128205, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_106, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf122, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=18] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf116, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf118, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf119, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_44, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_45, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_5 : [#users=1] = call_method[target=load](args = (%ops, buf107, %get_index_5), kwargs = {})
    %add_2 : [#users=1] = call_method[target=add](args = (%ops, %add_1, %load_5), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_2), kwargs = {})
    %get_index_6 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf123, %get_index_6, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=18] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf116, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf118, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf119, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 196, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_44, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_45, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_5 : [#users=1] = call_method[target=load](args = (%ops, buf107, %get_index_5), kwargs = {})
    %add_2 : [#users=1] = call_method[target=add](args = (%ops, %add_1, %load_5), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_2), kwargs = {})
    %get_index_6 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf123, %get_index_6, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf124, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf125, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf124, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf125, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf125, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf126, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf125, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf126, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf124, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf126, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf127, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf124, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf126, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf127, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf127, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf128, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf127, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf128, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf126, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_108, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf129, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf126, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_108, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf129, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf127, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0208333333333333, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_109, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf130, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf127, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0208333333333333, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_109, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf130, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=16] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf124, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf126, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf127, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_47, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_48, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_1), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf131, %get_index_5, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=16] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf124, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf126, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf127, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_47, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_48, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_1), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf131, %get_index_5, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf132, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf133, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf132, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf133, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf133, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf134, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf133, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf134, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf132, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf134, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf135, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf132, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf134, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf135, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf135, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf136, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf135, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf136, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf134, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_111, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf137, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf134, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_111, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf137, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf135, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0208333333333333, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_112, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf138, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf135, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0208333333333333, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_112, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf138, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf139, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf140, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf139, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf140, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf140, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf141, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf140, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf141, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf139, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf141, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf142, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf139, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf141, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf142, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf142, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf143, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf142, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf143, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf141, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_114, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf144, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf141, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_114, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf144, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf142, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0208333333333333, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_115, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf145, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf142, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0208333333333333, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_115, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf145, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=30] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf132, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf134, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf135, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_50, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_51, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_5 : [#users=1] = call_method[target=load](args = (%ops, buf139, %get_index_5), kwargs = {})
    %get_index_6 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_6 : [#users=1] = call_method[target=load](args = (%ops, buf141, %get_index_6), kwargs = {})
    %sub_1 : [#users=1] = call_method[target=sub](args = (%ops, %load_5, %load_6), kwargs = {})
    %get_index_7 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_7 : [#users=1] = call_method[target=load](args = (%ops, buf142, %get_index_7), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div_1 : [#users=1] = call_method[target=div](args = (%ops, %load_7, %constant_2), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add_2 : [#users=1] = call_method[target=add](args = (%ops, %div_1, %constant_3), kwargs = {})
    %rsqrt_1 : [#users=1] = call_method[target=rsqrt](args = (%ops, %add_2), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %sub_1, %rsqrt_1), kwargs = {})
    %get_index_8 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_8 : [#users=1] = call_method[target=load](args = (%ops, primals_53, %get_index_8), kwargs = {})
    %mul_3 : [#users=1] = call_method[target=mul](args = (%ops, %mul_2, %load_8), kwargs = {})
    %get_index_9 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_9 : [#users=1] = call_method[target=load](args = (%ops, primals_54, %get_index_9), kwargs = {})
    %add_3 : [#users=1] = call_method[target=add](args = (%ops, %mul_3, %load_9), kwargs = {})
    %add_4 : [#users=1] = call_method[target=add](args = (%ops, %add_1, %add_3), kwargs = {})
    %get_index_10 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf146, %get_index_10, %add_4, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=30] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf132, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf134, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf135, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_50, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_51, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_5 : [#users=1] = call_method[target=load](args = (%ops, buf139, %get_index_5), kwargs = {})
    %get_index_6 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_6 : [#users=1] = call_method[target=load](args = (%ops, buf141, %get_index_6), kwargs = {})
    %sub_1 : [#users=1] = call_method[target=sub](args = (%ops, %load_5, %load_6), kwargs = {})
    %get_index_7 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_7 : [#users=1] = call_method[target=load](args = (%ops, buf142, %get_index_7), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div_1 : [#users=1] = call_method[target=div](args = (%ops, %load_7, %constant_2), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add_2 : [#users=1] = call_method[target=add](args = (%ops, %div_1, %constant_3), kwargs = {})
    %rsqrt_1 : [#users=1] = call_method[target=rsqrt](args = (%ops, %add_2), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %sub_1, %rsqrt_1), kwargs = {})
    %get_index_8 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_8 : [#users=1] = call_method[target=load](args = (%ops, primals_53, %get_index_8), kwargs = {})
    %mul_3 : [#users=1] = call_method[target=mul](args = (%ops, %mul_2, %load_8), kwargs = {})
    %get_index_9 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_9 : [#users=1] = call_method[target=load](args = (%ops, primals_54, %get_index_9), kwargs = {})
    %add_3 : [#users=1] = call_method[target=add](args = (%ops, %mul_3, %load_9), kwargs = {})
    %add_4 : [#users=1] = call_method[target=add](args = (%ops, %add_1, %add_3), kwargs = {})
    %get_index_10 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf146, %get_index_10, %add_4, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=3] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf146, %get_index), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %load), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf147, %get_index_1, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=3] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf146, %get_index), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %load), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf147, %get_index_1, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf148, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf149, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf148, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf149, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf149, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf150, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf149, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf150, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf148, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf150, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf151, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf148, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf150, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf151, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf151, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf152, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf151, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf152, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf150, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_117, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf153, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf150, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_117, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf153, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf151, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0208333333333333, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_118, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf154, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf151, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0208333333333333, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_118, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf154, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=16] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf148, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf150, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf151, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_56, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_57, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_1), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf155, %get_index_5, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=16] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf148, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf150, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf151, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_56, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_57, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_1), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf155, %get_index_5, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf156, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf157, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf156, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf157, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf157, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf158, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf157, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf158, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf156, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf158, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf159, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=5] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf156, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf158, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %square : [#users=1] = call_method[target=square](args = (%ops, %sub), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf159, torch.float32, torch.float32, sum, %get_index_2, %square), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf159, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf160, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=7] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf159, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf160, %get_index_1, %rsqrt, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf158, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_120, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf161, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=8] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf158, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_120, %get_index_1), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_1), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul, %mul_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf161, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf159, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0208333333333333, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_121, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf162, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=12] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf159, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1.0208333333333333, torch.float32), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %div, %constant_1), kwargs = {})
    %constant_2 : [#users=1] = call_method[target=constant](args = (%ops, 0.1, torch.float32), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %constant_2), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, primals_121, %get_index_1), kwargs = {})
    %constant_3 : [#users=1] = call_method[target=constant](args = (%ops, 0.9, torch.float32), kwargs = {})
    %mul_2 : [#users=1] = call_method[target=mul](args = (%ops, %load_1, %constant_3), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %mul_2), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf162, %get_index_2, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=18] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf156, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf158, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf159, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_59, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_60, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_5 : [#users=1] = call_method[target=load](args = (%ops, buf147, %get_index_5), kwargs = {})
    %add_2 : [#users=1] = call_method[target=add](args = (%ops, %add_1, %load_5), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_2), kwargs = {})
    %get_index_6 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf163, %get_index_6, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=18] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf156, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_1 : [#users=1] = call_method[target=load](args = (%ops, buf158, %get_index_1), kwargs = {})
    %sub : [#users=1] = call_method[target=sub](args = (%ops, %load, %load_1), kwargs = {})
    %get_index_2 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_2 : [#users=1] = call_method[target=load](args = (%ops, buf159, %get_index_2), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load_2, %constant), kwargs = {})
    %constant_1 : [#users=1] = call_method[target=constant](args = (%ops, 1e-05, torch.float32), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %div, %constant_1), kwargs = {})
    %rsqrt : [#users=1] = call_method[target=rsqrt](args = (%ops, %add), kwargs = {})
    %mul : [#users=1] = call_method[target=mul](args = (%ops, %sub, %rsqrt), kwargs = {})
    %get_index_3 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_3 : [#users=1] = call_method[target=load](args = (%ops, primals_59, %get_index_3), kwargs = {})
    %mul_1 : [#users=1] = call_method[target=mul](args = (%ops, %mul, %load_3), kwargs = {})
    %get_index_4 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %load_4 : [#users=1] = call_method[target=load](args = (%ops, primals_60, %get_index_4), kwargs = {})
    %add_1 : [#users=1] = call_method[target=add](args = (%ops, %mul_1, %load_4), kwargs = {})
    %get_index_5 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load_5 : [#users=1] = call_method[target=load](args = (%ops, buf147, %get_index_5), kwargs = {})
    %add_2 : [#users=1] = call_method[target=add](args = (%ops, %add_1, %load_5), kwargs = {})
    %relu : [#users=1] = call_method[target=relu](args = (%ops, %add_2), kwargs = {})
    %get_index_6 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf163, %get_index_6, %relu, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf163, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf164, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=2] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf163, %get_index), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index1,), kwargs = {})
    %reduction : [#users=1] = call_method[target=reduction](args = (%ops, buf164, torch.float32, torch.float32, sum, %get_index_1, %load), kwargs = {})
    return reduction
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf164, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf165, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf164, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 49, torch.float32), kwargs = {})
    %div : [#users=1] = call_method[target=div](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf165, %get_index_1, %div, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf163, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.float32), kwargs = {})
    %le : [#users=1] = call_method[target=le](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf167, %get_index_1, %le, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, buf163, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 0, torch.float32), kwargs = {})
    %le : [#users=1] = call_method[target=le](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf167, %get_index_1, %le, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_65, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf168, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_65, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf168, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_68, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf169, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_68, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf169, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_71, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf170, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_71, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf170, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_74, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf171, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_74, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf171, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_77, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf172, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_77, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf172, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_80, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf173, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_80, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf173, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_83, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf174, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_83, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf174, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_86, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf175, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_86, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf175, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_89, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf176, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_89, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf176, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_92, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf177, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_92, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf177, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_95, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf178, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_95, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf178, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_98, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf179, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_98, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf179, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_101, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf180, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_101, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf180, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_104, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf181, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_104, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf181, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_107, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf182, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_107, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf182, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_110, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf183, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_110, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf183, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_113, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf184, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_113, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf184, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_116, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf185, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_116, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf185, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_119, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf186, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_119, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf186, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__init__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_122, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf187, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__init__---------------------------
ir.LoopBodyBlock.__call__---------------------------
self.graph: graph():
    %ops : [#users=4] = placeholder[target=ops]
    %get_index : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %load : [#users=1] = call_method[target=load](args = (%ops, primals_122, %get_index), kwargs = {})
    %constant : [#users=1] = call_method[target=constant](args = (%ops, 1, torch.int64), kwargs = {})
    %add : [#users=1] = call_method[target=add](args = (%ops, %load, %constant), kwargs = {})
    %get_index_1 : [#users=1] = call_module[target=get_index](args = (index0,), kwargs = {})
    %store : [#users=1] = call_method[target=store](args = (%ops, buf187, %get_index_1, %add, None), kwargs = {})
    return store
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf11', 'buf10'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (200704, 1)),
 'inverse_users': [],
 'max_order': 11,
 'min_order': 10,
 'node': None,
 'origins': {getitem_3: 1, getitem_2: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf9', index=224*c0 + 2*c1 - 1, size=(3584, 56)), MemoryDep(name='buf9', index=224*c0 + 2*c1 - 111, size=(3584, 56)), MemoryDep(name='buf9', index=224*c0 + 2*c1 + 112, size=(3584, 56)), MemoryDep(name='buf9', index=224*c0 + 2*c1 - 112, size=(3584, 56)), MemoryDep(name='buf9', index=224*c0 + 2*c1 + 113, size=(3584, 56)), MemoryDep(name='buf9', index=224*c0 + 2*c1 + 111, size=(3584, 56)), MemoryDep(name='buf9', index=224*c0 + 2*c1, size=(3584, 56)), MemoryDep(name='buf9', index=224*c0 + 2*c1 + 1, size=(3584, 56)), MemoryDep(name='buf9', index=224*c0 + 2*c1 - 113, size=(3584, 56))}, writes={MemoryDep(name='buf10', index=c0, size=(200704,)), MemoryDep(name='buf11', index=c0, size=(200704,))}, index_exprs={IndexExprDep(index=224*c1 + 2*c2 + 112, size=(64, 56, 56)), IndexExprDep(index=2*c1, size=(64, 56, 56)), IndexExprDep(index=224*c1 + 2*c2 - 1, size=(64, 56, 56)), IndexExprDep(index=2*c1 + 1, size=(64, 56, 56)), IndexExprDep(index=2*c1, size=(3584, 56)), IndexExprDep(index=224*c1 + 2*c2 + 113, size=(64, 56, 56)), IndexExprDep(index=2*c1 + 1, size=(3584, 56)), IndexExprDep(index=224*c1 + 2*c2 - 113, size=(64, 56, 56)), IndexExprDep(index=2*c1 - 1, size=(64, 56, 56)), IndexExprDep(index=224*c1 + 2*c2, size=(64, 56, 56)), IndexExprDep(index=224*c1 + 2*c2 - 111, size=(64, 56, 56)), IndexExprDep(index=224*c1 + 2*c2 + 111, size=(64, 56, 56)), IndexExprDep(index=2*c1 - 1, size=(3584, 56)), IndexExprDep(index=224*c1 + 2*c2 + 1, size=(64, 56, 56)), IndexExprDep(index=224*c1 + 2*c2 - 112, size=(64, 56, 56))}, range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf2',
                            'buf3',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf10'), SchedulerNode(name='buf11')],
 'unmet_dependencies': {MemoryDep(name='buf9', index=224*c0 + 2*c1 - 113, size=(3584, 56)),
                        MemoryDep(name='buf9', index=224*c0 + 2*c1 - 112, size=(3584, 56)),
                        MemoryDep(name='buf9', index=224*c0 + 2*c1 - 111, size=(3584, 56)),
                        MemoryDep(name='buf9', index=224*c0 + 2*c1 - 1, size=(3584, 56)),
                        MemoryDep(name='buf9', index=224*c0 + 2*c1, size=(3584, 56)),
                        MemoryDep(name='buf9', index=224*c0 + 2*c1 + 1, size=(3584, 56)),
                        MemoryDep(name='buf9', index=224*c0 + 2*c1 + 111, size=(3584, 56)),
                        MemoryDep(name='buf9', index=224*c0 + 2*c1 + 112, size=(3584, 56)),
                        MemoryDep(name='buf9', index=224*c0 + 2*c1 + 113, size=(3584, 56))},
 'users': None}

Done fusedschedulernode-----------------------
ir.LoopBodyBlock.__call__---------------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf67', 'buf66'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (100352, 1)),
 'inverse_users': [],
 'max_order': 67,
 'min_order': 66,
 'node': None,
 'origins': {rsqrt_7: 1,
             add_38: 1,
             var_mean_7: 1,
             mul_49: 1,
             sub_7: 1,
             mul_42: 1,
             rsqrt_6: 1,
             sub_6: 1,
             var_mean_6: 1,
             mul_48: 1,
             add_36: 1,
             add_33: 1,
             add_41: 1,
             mul_55: 1,
             relu_6: 1,
             add_42: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_20', index=c0, size=(128, 784)), MemoryDep(name='buf59', index=c0, size=(100352,)), MemoryDep(name='primals_23', index=c0, size=(128, 784)), MemoryDep(name='primals_21', index=c0, size=(128, 784)), MemoryDep(name='buf62', index=c0, size=(128, 784)), MemoryDep(name='buf54', index=c0, size=(128, 784)), MemoryDep(name='buf52', index=c0, size=(100352,)), MemoryDep(name='buf55', index=c0, size=(128, 784)), MemoryDep(name='primals_24', index=c0, size=(128, 784)), MemoryDep(name='buf61', index=c0, size=(128, 784))}, writes={MemoryDep(name='buf67', index=c0, size=(100352,)), MemoryDep(name='buf66', index=c0, size=(100352,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf66'), SchedulerNode(name='buf67')],
 'unmet_dependencies': {MemoryDep(name='buf52', index=c0, size=(100352,)),
                        MemoryDep(name='buf54', index=c0, size=(128, 784)),
                        MemoryDep(name='buf55', index=c0, size=(128, 784)),
                        MemoryDep(name='buf59', index=c0, size=(100352,)),
                        MemoryDep(name='buf61', index=c0, size=(128, 784)),
                        MemoryDep(name='buf62', index=c0, size=(128, 784))},
 'users': None}

Done fusedschedulernode-----------------------
ir.LoopBodyBlock.__call__---------------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf107', 'buf106'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (50176, 1)),
 'inverse_users': [],
 'max_order': 107,
 'min_order': 106,
 'node': None,
 'origins': {mul_90: 1,
             add_68: 1,
             relu_10: 1,
             add_69: 1,
             sub_11: 1,
             add_60: 1,
             mul_77: 1,
             var_mean_11: 1,
             add_65: 1,
             rsqrt_11: 1,
             mul_84: 1,
             mul_83: 1,
             add_63: 1,
             rsqrt_12: 1,
             sub_12: 1,
             var_mean_12: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_39', index=c0, size=(256, 196)), MemoryDep(name='buf99', index=c0, size=(50176,)), MemoryDep(name='primals_36', index=c0, size=(256, 196)), MemoryDep(name='buf101', index=c0, size=(256, 196)), MemoryDep(name='buf92', index=c0, size=(50176,)), MemoryDep(name='buf102', index=c0, size=(256, 196)), MemoryDep(name='buf95', index=c0, size=(256, 196)), MemoryDep(name='buf94', index=c0, size=(256, 196)), MemoryDep(name='primals_35', index=c0, size=(256, 196)), MemoryDep(name='primals_38', index=c0, size=(256, 196))}, writes={MemoryDep(name='buf107', index=c0, size=(50176,)), MemoryDep(name='buf106', index=c0, size=(50176,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf106'), SchedulerNode(name='buf107')],
 'unmet_dependencies': {MemoryDep(name='buf101', index=c0, size=(256, 196)),
                        MemoryDep(name='buf102', index=c0, size=(256, 196)),
                        MemoryDep(name='buf92', index=c0, size=(50176,)),
                        MemoryDep(name='buf94', index=c0, size=(256, 196)),
                        MemoryDep(name='buf95', index=c0, size=(256, 196)),
                        MemoryDep(name='buf99', index=c0, size=(50176,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf146', 'buf147'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (25088, 1)),
 'inverse_users': [],
 'max_order': 147,
 'min_order': 146,
 'node': None,
 'origins': {sub_16: 1,
             add_92: 1,
             var_mean_16: 1,
             rsqrt_16: 1,
             mul_118: 1,
             add_87: 1,
             var_mean_17: 1,
             mul_112: 1,
             add_90: 1,
             mul_119: 1,
             rsqrt_17: 1,
             mul_125: 1,
             relu_14: 1,
             add_96: 1,
             add_95: 1,
             sub_17: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_50', index=c0, size=(512, 49)), MemoryDep(name='primals_54', index=c0, size=(512, 49)), MemoryDep(name='buf135', index=c0, size=(512, 49)), MemoryDep(name='buf139', index=c0, size=(25088,)), MemoryDep(name='buf141', index=c0, size=(512, 49)), MemoryDep(name='buf142', index=c0, size=(512, 49)), MemoryDep(name='primals_53', index=c0, size=(512, 49)), MemoryDep(name='buf134', index=c0, size=(512, 49)), MemoryDep(name='buf132', index=c0, size=(25088,)), MemoryDep(name='primals_51', index=c0, size=(512, 49))}, writes={MemoryDep(name='buf146', index=c0, size=(25088,)), MemoryDep(name='buf147', index=c0, size=(25088,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf146'), SchedulerNode(name='buf147')],
 'unmet_dependencies': {MemoryDep(name='buf132', index=c0, size=(25088,)),
                        MemoryDep(name='buf134', index=c0, size=(512, 49)),
                        MemoryDep(name='buf135', index=c0, size=(512, 49)),
                        MemoryDep(name='buf139', index=c0, size=(25088,)),
                        MemoryDep(name='buf141', index=c0, size=(512, 49)),
                        MemoryDep(name='buf142', index=c0, size=(512, 49))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf167', 'buf163'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (25088, 1)),
 'inverse_users': [],
 'max_order': 167,
 'min_order': 163,
 'node': None,
 'origins': {le: 1,
             relu_16: 1,
             add_107: 1,
             mul_139: 1,
             add_106: 1,
             sub_19: 1,
             mul_133: 1,
             var_mean_19: 1,
             add_103: 1,
             rsqrt_19: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf159', index=c0, size=(512, 49)), MemoryDep(name='buf147', index=c0, size=(25088,)), MemoryDep(name='buf156', index=c0, size=(25088,)), MemoryDep(name='primals_60', index=c0, size=(512, 49)), MemoryDep(name='primals_59', index=c0, size=(512, 49)), MemoryDep(name='buf158', index=c0, size=(512, 49))}, writes={MemoryDep(name='buf167', index=c0, size=(25088,)), MemoryDep(name='buf163', index=c0, size=(25088,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf147',
                            'buf148',
                            'buf149',
                            'buf15',
                            'buf150',
                            'buf151',
                            'buf155',
                            'buf156',
                            'buf157',
                            'buf158',
                            'buf159',
                            'buf163',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf163'), SchedulerNode(name='buf167')],
 'unmet_dependencies': {MemoryDep(name='buf147', index=c0, size=(25088,)),
                        MemoryDep(name='buf156', index=c0, size=(25088,)),
                        MemoryDep(name='buf158', index=c0, size=(512, 49)),
                        MemoryDep(name='buf159', index=c0, size=(512, 49))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf128', 'buf130'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 1)),
 'inverse_users': [],
 'max_order': 130,
 'min_order': 128,
 'node': None,
 'origins': {mul_109: 1,
             add_82: 1,
             var_mean_15: 1,
             add_84: 1,
             rsqrt_15: 1,
             mul_110: 1,
             squeeze_46: 1,
             mul_108: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_109', index=c0, size=(512,)), MemoryDep(name='buf127', index=c0, size=(512,))}, writes={MemoryDep(name='buf128', index=c0, size=(512,)), MemoryDep(name='buf130', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf128'), SchedulerNode(name='buf130')],
 'unmet_dependencies': {MemoryDep(name='buf127', index=c0, size=(512,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf136', 'buf138'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 1)),
 'inverse_users': [],
 'max_order': 138,
 'min_order': 136,
 'node': None,
 'origins': {mul_116: 1,
             var_mean_16: 1,
             rsqrt_16: 1,
             add_87: 1,
             add_89: 1,
             mul_117: 1,
             squeeze_49: 1,
             mul_115: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf135', index=c0, size=(512,)), MemoryDep(name='primals_112', index=c0, size=(512,))}, writes={MemoryDep(name='buf138', index=c0, size=(512,)), MemoryDep(name='buf136', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf136'), SchedulerNode(name='buf138')],
 'unmet_dependencies': {MemoryDep(name='buf135', index=c0, size=(512,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf145', 'buf143'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 1)),
 'inverse_users': [],
 'max_order': 145,
 'min_order': 143,
 'node': None,
 'origins': {add_92: 1,
             var_mean_17: 1,
             mul_123: 1,
             add_94: 1,
             rsqrt_17: 1,
             mul_124: 1,
             squeeze_52: 1,
             mul_122: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf142', index=c0, size=(512,)), MemoryDep(name='primals_115', index=c0, size=(512,))}, writes={MemoryDep(name='buf143', index=c0, size=(512,)), MemoryDep(name='buf145', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf13',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf143'), SchedulerNode(name='buf145')],
 'unmet_dependencies': {MemoryDep(name='buf142', index=c0, size=(512,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf154', 'buf152'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 1)),
 'inverse_users': [],
 'max_order': 154,
 'min_order': 152,
 'node': None,
 'origins': {mul_130: 1,
             var_mean_18: 1,
             add_100: 1,
             rsqrt_18: 1,
             add_98: 1,
             squeeze_55: 1,
             mul_129: 1,
             mul_131: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf151', index=c0, size=(512,)), MemoryDep(name='primals_118', index=c0, size=(512,))}, writes={MemoryDep(name='buf154', index=c0, size=(512,)), MemoryDep(name='buf152', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf147',
                            'buf148',
                            'buf149',
                            'buf15',
                            'buf150',
                            'buf151',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf152'), SchedulerNode(name='buf154')],
 'unmet_dependencies': {MemoryDep(name='buf151', index=c0, size=(512,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf160', 'buf162'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 1)),
 'inverse_users': [],
 'max_order': 162,
 'min_order': 160,
 'node': None,
 'origins': {mul_136: 1,
             mul_138: 1,
             mul_137: 1,
             add_105: 1,
             var_mean_19: 1,
             add_103: 1,
             squeeze_58: 1,
             rsqrt_19: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_121', index=c0, size=(512,)), MemoryDep(name='buf159', index=c0, size=(512,))}, writes={MemoryDep(name='buf160', index=c0, size=(512,)), MemoryDep(name='buf162', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf147',
                            'buf148',
                            'buf149',
                            'buf15',
                            'buf150',
                            'buf151',
                            'buf155',
                            'buf156',
                            'buf157',
                            'buf158',
                            'buf159',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf160'), SchedulerNode(name='buf162')],
 'unmet_dependencies': {MemoryDep(name='buf159', index=c0, size=(512,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf126', 'buf129'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 1)),
 'inverse_users': [],
 'max_order': 129,
 'min_order': 126,
 'node': None,
 'origins': {add_83: 1, mul_107: 1, var_mean_15: 1, mul_106: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf125', index=c0, size=(512,)), MemoryDep(name='primals_108', index=c0, size=(512,))}, writes={MemoryDep(name='buf126', index=c0, size=(512,)), MemoryDep(name='buf129', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf126'), SchedulerNode(name='buf129')],
 'unmet_dependencies': {MemoryDep(name='buf125', index=c0, size=(512,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf137', 'buf134'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 1)),
 'inverse_users': [],
 'max_order': 137,
 'min_order': 134,
 'node': None,
 'origins': {var_mean_16: 1, mul_114: 1, add_88: 1, mul_113: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_111', index=c0, size=(512,)), MemoryDep(name='buf133', index=c0, size=(512,))}, writes={MemoryDep(name='buf134', index=c0, size=(512,)), MemoryDep(name='buf137', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf134'), SchedulerNode(name='buf137')],
 'unmet_dependencies': {MemoryDep(name='buf133', index=c0, size=(512,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf144', 'buf141'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 1)),
 'inverse_users': [],
 'max_order': 144,
 'min_order': 141,
 'node': None,
 'origins': {var_mean_17: 1, mul_121: 1, mul_120: 1, add_93: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf140', index=c0, size=(512,)), MemoryDep(name='primals_114', index=c0, size=(512,))}, writes={MemoryDep(name='buf144', index=c0, size=(512,)), MemoryDep(name='buf141', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf13',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf141'), SchedulerNode(name='buf144')],
 'unmet_dependencies': {MemoryDep(name='buf140', index=c0, size=(512,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf153', 'buf150'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 1)),
 'inverse_users': [],
 'max_order': 153,
 'min_order': 150,
 'node': None,
 'origins': {add_99: 1, var_mean_18: 1, mul_128: 1, mul_127: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf149', index=c0, size=(512,)), MemoryDep(name='primals_117', index=c0, size=(512,))}, writes={MemoryDep(name='buf153', index=c0, size=(512,)), MemoryDep(name='buf150', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf147',
                            'buf148',
                            'buf149',
                            'buf15',
                            'buf150',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf150'), SchedulerNode(name='buf153')],
 'unmet_dependencies': {MemoryDep(name='buf149', index=c0, size=(512,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf161', 'buf158'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 1)),
 'inverse_users': [],
 'max_order': 161,
 'min_order': 158,
 'node': None,
 'origins': {mul_134: 1, mul_135: 1, var_mean_19: 1, add_104: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_120', index=c0, size=(512,)), MemoryDep(name='buf157', index=c0, size=(512,))}, writes={MemoryDep(name='buf158', index=c0, size=(512,)), MemoryDep(name='buf161', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf147',
                            'buf148',
                            'buf149',
                            'buf15',
                            'buf150',
                            'buf151',
                            'buf155',
                            'buf156',
                            'buf157',
                            'buf158',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf158'), SchedulerNode(name='buf161')],
 'unmet_dependencies': {MemoryDep(name='buf157', index=c0, size=(512,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf88', 'buf90'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 1)),
 'inverse_users': [],
 'max_order': 90,
 'min_order': 88,
 'node': None,
 'origins': {var_mean_10: 1,
             add_55: 1,
             mul_74: 1,
             add_57: 1,
             rsqrt_10: 1,
             mul_75: 1,
             squeeze_31: 1,
             mul_73: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf87', index=c0, size=(256,)), MemoryDep(name='primals_94', index=c0, size=(256,))}, writes={MemoryDep(name='buf88', index=c0, size=(256,)), MemoryDep(name='buf90', index=c0, size=(256,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf88'), SchedulerNode(name='buf90')],
 'unmet_dependencies': {MemoryDep(name='buf87', index=c0, size=(256,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf98', 'buf96'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 1)),
 'inverse_users': [],
 'max_order': 98,
 'min_order': 96,
 'node': None,
 'origins': {mul_81: 1,
             add_60: 1,
             var_mean_11: 1,
             squeeze_34: 1,
             mul_82: 1,
             add_62: 1,
             rsqrt_11: 1,
             mul_80: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_97', index=c0, size=(256,)), MemoryDep(name='buf95', index=c0, size=(256,))}, writes={MemoryDep(name='buf98', index=c0, size=(256,)), MemoryDep(name='buf96', index=c0, size=(256,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf96'), SchedulerNode(name='buf98')],
 'unmet_dependencies': {MemoryDep(name='buf95', index=c0, size=(256,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf103', 'buf105'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 1)),
 'inverse_users': [],
 'max_order': 105,
 'min_order': 103,
 'node': None,
 'origins': {add_67: 1,
             mul_88: 1,
             squeeze_37: 1,
             mul_89: 1,
             mul_87: 1,
             add_65: 1,
             rsqrt_12: 1,
             var_mean_12: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_100', index=c0, size=(256,)), MemoryDep(name='buf102', index=c0, size=(256,))}, writes={MemoryDep(name='buf103', index=c0, size=(256,)), MemoryDep(name='buf105', index=c0, size=(256,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf9',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf103'), SchedulerNode(name='buf105')],
 'unmet_dependencies': {MemoryDep(name='buf102', index=c0, size=(256,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf114', 'buf112'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 1)),
 'inverse_users': [],
 'max_order': 114,
 'min_order': 112,
 'node': None,
 'origins': {mul_95: 1,
             add_71: 1,
             var_mean_13: 1,
             rsqrt_13: 1,
             add_73: 1,
             squeeze_40: 1,
             mul_96: 1,
             mul_94: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_103', index=c0, size=(256,)), MemoryDep(name='buf111', index=c0, size=(256,))}, writes={MemoryDep(name='buf114', index=c0, size=(256,)), MemoryDep(name='buf112', index=c0, size=(256,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf112'), SchedulerNode(name='buf114')],
 'unmet_dependencies': {MemoryDep(name='buf111', index=c0, size=(256,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf120', 'buf122'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 1)),
 'inverse_users': [],
 'max_order': 122,
 'min_order': 120,
 'node': None,
 'origins': {mul_103: 1,
             var_mean_14: 1,
             mul_101: 1,
             add_76: 1,
             squeeze_43: 1,
             rsqrt_14: 1,
             add_78: 1,
             mul_102: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf119', index=c0, size=(256,)), MemoryDep(name='primals_106', index=c0, size=(256,))}, writes={MemoryDep(name='buf120', index=c0, size=(256,)), MemoryDep(name='buf122', index=c0, size=(256,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf120'), SchedulerNode(name='buf122')],
 'unmet_dependencies': {MemoryDep(name='buf119', index=c0, size=(256,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf89', 'buf86'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 1)),
 'inverse_users': [],
 'max_order': 89,
 'min_order': 86,
 'node': None,
 'origins': {var_mean_10: 1, mul_72: 1, add_56: 1, mul_71: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf85', index=c0, size=(256,)), MemoryDep(name='primals_93', index=c0, size=(256,))}, writes={MemoryDep(name='buf86', index=c0, size=(256,)), MemoryDep(name='buf89', index=c0, size=(256,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf86'), SchedulerNode(name='buf89')],
 'unmet_dependencies': {MemoryDep(name='buf85', index=c0, size=(256,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf94', 'buf97'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 1)),
 'inverse_users': [],
 'max_order': 97,
 'min_order': 94,
 'node': None,
 'origins': {add_61: 1, mul_79: 1, var_mean_11: 1, mul_78: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_96', index=c0, size=(256,)), MemoryDep(name='buf93', index=c0, size=(256,))}, writes={MemoryDep(name='buf94', index=c0, size=(256,)), MemoryDep(name='buf97', index=c0, size=(256,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf94'), SchedulerNode(name='buf97')],
 'unmet_dependencies': {MemoryDep(name='buf93', index=c0, size=(256,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf104', 'buf101'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 1)),
 'inverse_users': [],
 'max_order': 104,
 'min_order': 101,
 'node': None,
 'origins': {mul_85: 1, add_66: 1, mul_86: 1, var_mean_12: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_99', index=c0, size=(256,)), MemoryDep(name='buf100', index=c0, size=(256,))}, writes={MemoryDep(name='buf104', index=c0, size=(256,)), MemoryDep(name='buf101', index=c0, size=(256,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf9',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf101'), SchedulerNode(name='buf104')],
 'unmet_dependencies': {MemoryDep(name='buf100', index=c0, size=(256,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf110', 'buf113'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 1)),
 'inverse_users': [],
 'max_order': 113,
 'min_order': 110,
 'node': None,
 'origins': {add_72: 1, mul_93: 1, var_mean_13: 1, mul_92: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf109', index=c0, size=(256,)), MemoryDep(name='primals_102', index=c0, size=(256,))}, writes={MemoryDep(name='buf110', index=c0, size=(256,)), MemoryDep(name='buf113', index=c0, size=(256,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf110'), SchedulerNode(name='buf113')],
 'unmet_dependencies': {MemoryDep(name='buf109', index=c0, size=(256,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf118', 'buf121'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 1)),
 'inverse_users': [],
 'max_order': 121,
 'min_order': 118,
 'node': None,
 'origins': {var_mean_14: 1, mul_99: 1, add_77: 1, mul_100: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf117', index=c0, size=(256,)), MemoryDep(name='primals_105', index=c0, size=(256,))}, writes={MemoryDep(name='buf118', index=c0, size=(256,)), MemoryDep(name='buf121', index=c0, size=(256,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf118'), SchedulerNode(name='buf121')],
 'unmet_dependencies': {MemoryDep(name='buf117', index=c0, size=(256,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf50', 'buf48'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 1)),
 'inverse_users': [],
 'max_order': 50,
 'min_order': 48,
 'node': None,
 'origins': {mul_38: 1,
             squeeze_16: 1,
             mul_39: 1,
             add_30: 1,
             add_28: 1,
             mul_40: 1,
             rsqrt_5: 1,
             var_mean_5: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_79', index=c0, size=(128,)), MemoryDep(name='buf47', index=c0, size=(128,))}, writes={MemoryDep(name='buf48', index=c0, size=(128,)), MemoryDep(name='buf50', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf48'), SchedulerNode(name='buf50')],
 'unmet_dependencies': {MemoryDep(name='buf47', index=c0, size=(128,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf56', 'buf58'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 1)),
 'inverse_users': [],
 'max_order': 58,
 'min_order': 56,
 'node': None,
 'origins': {add_35: 1,
             rsqrt_6: 1,
             var_mean_6: 1,
             squeeze_19: 1,
             mul_47: 1,
             add_33: 1,
             mul_45: 1,
             mul_46: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf55', index=c0, size=(128,)), MemoryDep(name='primals_82', index=c0, size=(128,))}, writes={MemoryDep(name='buf56', index=c0, size=(128,)), MemoryDep(name='buf58', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf56'), SchedulerNode(name='buf58')],
 'unmet_dependencies': {MemoryDep(name='buf55', index=c0, size=(128,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf63', 'buf65'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 1)),
 'inverse_users': [],
 'max_order': 65,
 'min_order': 63,
 'node': None,
 'origins': {rsqrt_7: 1,
             add_38: 1,
             var_mean_7: 1,
             squeeze_22: 1,
             mul_52: 1,
             mul_53: 1,
             mul_54: 1,
             add_40: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_85', index=c0, size=(128,)), MemoryDep(name='buf62', index=c0, size=(128,))}, writes={MemoryDep(name='buf65', index=c0, size=(128,)), MemoryDep(name='buf63', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf5',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf63'), SchedulerNode(name='buf65')],
 'unmet_dependencies': {MemoryDep(name='buf62', index=c0, size=(128,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf74', 'buf72'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 1)),
 'inverse_users': [],
 'max_order': 74,
 'min_order': 72,
 'node': None,
 'origins': {mul_60: 1,
             add_44: 1,
             var_mean_8: 1,
             add_46: 1,
             rsqrt_8: 1,
             mul_61: 1,
             squeeze_25: 1,
             mul_59: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_88', index=c0, size=(128,)), MemoryDep(name='buf71', index=c0, size=(128,))}, writes={MemoryDep(name='buf72', index=c0, size=(128,)), MemoryDep(name='buf74', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf72'), SchedulerNode(name='buf74')],
 'unmet_dependencies': {MemoryDep(name='buf71', index=c0, size=(128,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf82', 'buf80'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 1)),
 'inverse_users': [],
 'max_order': 82,
 'min_order': 80,
 'node': None,
 'origins': {squeeze_28: 1,
             mul_67: 1,
             mul_66: 1,
             mul_68: 1,
             add_49: 1,
             add_51: 1,
             rsqrt_9: 1,
             var_mean_9: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_91', index=c0, size=(128,)), MemoryDep(name='buf79', index=c0, size=(128,))}, writes={MemoryDep(name='buf80', index=c0, size=(128,)), MemoryDep(name='buf82', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf80'), SchedulerNode(name='buf82')],
 'unmet_dependencies': {MemoryDep(name='buf79', index=c0, size=(128,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf46', 'buf49'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 1)),
 'inverse_users': [],
 'max_order': 49,
 'min_order': 46,
 'node': None,
 'origins': {mul_37: 1, add_29: 1, mul_36: 1, var_mean_5: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf45', index=c0, size=(128,)), MemoryDep(name='primals_78', index=c0, size=(128,))}, writes={MemoryDep(name='buf49', index=c0, size=(128,)), MemoryDep(name='buf46', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf46'), SchedulerNode(name='buf49')],
 'unmet_dependencies': {MemoryDep(name='buf45', index=c0, size=(128,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf54', 'buf57'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 1)),
 'inverse_users': [],
 'max_order': 57,
 'min_order': 54,
 'node': None,
 'origins': {add_34: 1, mul_44: 1, var_mean_6: 1, mul_43: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf53', index=c0, size=(128,)), MemoryDep(name='primals_81', index=c0, size=(128,))}, writes={MemoryDep(name='buf57', index=c0, size=(128,)), MemoryDep(name='buf54', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf54'), SchedulerNode(name='buf57')],
 'unmet_dependencies': {MemoryDep(name='buf53', index=c0, size=(128,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf61', 'buf64'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 1)),
 'inverse_users': [],
 'max_order': 64,
 'min_order': 61,
 'node': None,
 'origins': {var_mean_7: 1, mul_50: 1, mul_51: 1, add_39: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_84', index=c0, size=(128,)), MemoryDep(name='buf60', index=c0, size=(128,))}, writes={MemoryDep(name='buf61', index=c0, size=(128,)), MemoryDep(name='buf64', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf5',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf61'), SchedulerNode(name='buf64')],
 'unmet_dependencies': {MemoryDep(name='buf60', index=c0, size=(128,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf73', 'buf70'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 1)),
 'inverse_users': [],
 'max_order': 73,
 'min_order': 70,
 'node': None,
 'origins': {add_45: 1, mul_58: 1, var_mean_8: 1, mul_57: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_87', index=c0, size=(128,)), MemoryDep(name='buf69', index=c0, size=(128,))}, writes={MemoryDep(name='buf73', index=c0, size=(128,)), MemoryDep(name='buf70', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf70'), SchedulerNode(name='buf73')],
 'unmet_dependencies': {MemoryDep(name='buf69', index=c0, size=(128,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf78', 'buf81'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 1)),
 'inverse_users': [],
 'max_order': 81,
 'min_order': 78,
 'node': None,
 'origins': {add_50: 1, mul_64: 1, mul_65: 1, var_mean_9: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf77', index=c0, size=(128,)), MemoryDep(name='primals_90', index=c0, size=(128,))}, writes={MemoryDep(name='buf81', index=c0, size=(128,)), MemoryDep(name='buf78', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf78'), SchedulerNode(name='buf81')],
 'unmet_dependencies': {MemoryDep(name='buf77', index=c0, size=(128,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf8', 'buf6'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 1)),
 'inverse_users': [],
 'max_order': 8,
 'min_order': 6,
 'node': None,
 'origins': {mul_3: 1,
             add_3: 1,
             mul_4: 1,
             squeeze_1: 1,
             mul_5: 1,
             add_1: 1,
             rsqrt: 1,
             var_mean: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf5', index=c0, size=(64,)), MemoryDep(name='primals_64', index=c0, size=(64,))}, writes={MemoryDep(name='buf8', index=c0, size=(64,)), MemoryDep(name='buf6', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf5', 'buf3', 'buf1', 'buf2', 'buf4', 'buf0'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf6'), SchedulerNode(name='buf8')],
 'unmet_dependencies': {MemoryDep(name='buf5', index=c0, size=(64,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf16', 'buf18'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 1)),
 'inverse_users': [],
 'max_order': 18,
 'min_order': 16,
 'node': None,
 'origins': {mul_12: 1,
             mul_11: 1,
             mul_10: 1,
             squeeze_4: 1,
             add_8: 1,
             rsqrt_1: 1,
             add_6: 1,
             var_mean_1: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf15', index=c0, size=(64,)), MemoryDep(name='primals_67', index=c0, size=(64,))}, writes={MemoryDep(name='buf16', index=c0, size=(64,)), MemoryDep(name='buf18', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf2',
                            'buf3',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf16'), SchedulerNode(name='buf18')],
 'unmet_dependencies': {MemoryDep(name='buf15', index=c0, size=(64,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf26', 'buf24'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 1)),
 'inverse_users': [],
 'max_order': 26,
 'min_order': 24,
 'node': None,
 'origins': {add_13: 1,
             mul_18: 1,
             mul_19: 1,
             add_11: 1,
             var_mean_2: 1,
             rsqrt_2: 1,
             mul_17: 1,
             squeeze_7: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf23', index=c0, size=(64,)), MemoryDep(name='primals_70', index=c0, size=(64,))}, writes={MemoryDep(name='buf26', index=c0, size=(64,)), MemoryDep(name='buf24', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf3',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf24'), SchedulerNode(name='buf26')],
 'unmet_dependencies': {MemoryDep(name='buf23', index=c0, size=(64,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf32', 'buf34'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 1)),
 'inverse_users': [],
 'max_order': 34,
 'min_order': 32,
 'node': None,
 'origins': {mul_25: 1,
             mul_26: 1,
             mul_24: 1,
             add_17: 1,
             add_19: 1,
             var_mean_3: 1,
             squeeze_10: 1,
             rsqrt_3: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf31', index=c0, size=(64,)), MemoryDep(name='primals_73', index=c0, size=(64,))}, writes={MemoryDep(name='buf32', index=c0, size=(64,)), MemoryDep(name='buf34', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf32'), SchedulerNode(name='buf34')],
 'unmet_dependencies': {MemoryDep(name='buf31', index=c0, size=(64,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf40', 'buf42'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 1)),
 'inverse_users': [],
 'max_order': 42,
 'min_order': 40,
 'node': None,
 'origins': {squeeze_13: 1,
             mul_32: 1,
             add_24: 1,
             rsqrt_4: 1,
             mul_33: 1,
             mul_31: 1,
             var_mean_4: 1,
             add_22: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf39', index=c0, size=(64,)), MemoryDep(name='primals_76', index=c0, size=(64,))}, writes={MemoryDep(name='buf42', index=c0, size=(64,)), MemoryDep(name='buf40', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf40'), SchedulerNode(name='buf42')],
 'unmet_dependencies': {MemoryDep(name='buf39', index=c0, size=(64,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf17', 'buf14'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 1)),
 'inverse_users': [],
 'max_order': 17,
 'min_order': 14,
 'node': None,
 'origins': {mul_8: 1, mul_9: 1, add_7: 1, var_mean_1: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_66', index=c0, size=(64,)), MemoryDep(name='buf13', index=c0, size=(64,))}, writes={MemoryDep(name='buf14', index=c0, size=(64,)), MemoryDep(name='buf17', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf2',
                            'buf3',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf14'), SchedulerNode(name='buf17')],
 'unmet_dependencies': {MemoryDep(name='buf13', index=c0, size=(64,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf22', 'buf25'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 1)),
 'inverse_users': [],
 'max_order': 25,
 'min_order': 22,
 'node': None,
 'origins': {mul_16: 1, var_mean_2: 1, mul_15: 1, add_12: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_69', index=c0, size=(64,)), MemoryDep(name='buf21', index=c0, size=(64,))}, writes={MemoryDep(name='buf25', index=c0, size=(64,)), MemoryDep(name='buf22', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf3',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf22'), SchedulerNode(name='buf25')],
 'unmet_dependencies': {MemoryDep(name='buf21', index=c0, size=(64,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf30', 'buf33'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 1)),
 'inverse_users': [],
 'max_order': 33,
 'min_order': 30,
 'node': None,
 'origins': {mul_23: 1, mul_22: 1, add_18: 1, var_mean_3: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf29', index=c0, size=(64,)), MemoryDep(name='primals_72', index=c0, size=(64,))}, writes={MemoryDep(name='buf30', index=c0, size=(64,)), MemoryDep(name='buf33', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf30'), SchedulerNode(name='buf33')],
 'unmet_dependencies': {MemoryDep(name='buf29', index=c0, size=(64,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf38', 'buf41'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 1)),
 'inverse_users': [],
 'max_order': 41,
 'min_order': 38,
 'node': None,
 'origins': {mul_29: 1, var_mean_4: 1, mul_30: 1, add_23: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_75', index=c0, size=(64,)), MemoryDep(name='buf37', index=c0, size=(64,))}, writes={MemoryDep(name='buf41', index=c0, size=(64,)), MemoryDep(name='buf38', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf38'), SchedulerNode(name='buf41')],
 'unmet_dependencies': {MemoryDep(name='buf37', index=c0, size=(64,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf3', 'buf7'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 1)),
 'inverse_users': [],
 'max_order': 7,
 'min_order': 3,
 'node': None,
 'origins': {mul_2: 1, mul_1: 1, add_2: 1, var_mean: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf2', index=c0, size=(64,)), MemoryDep(name='primals_63', index=c0, size=(64,))}, writes={MemoryDep(name='buf7', index=c0, size=(64,)), MemoryDep(name='buf3', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf1', 'buf3', 'buf2', 'buf0'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf3'), SchedulerNode(name='buf7')],
 'unmet_dependencies': {MemoryDep(name='buf2', index=c0, size=(64,))},
 'users': None}

Done fusedschedulernode-----------------------
ir.LoopBodyBlock.__call__---------------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf19', 'buf15'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 3136)),
 'inverse_users': [],
 'max_order': 19,
 'min_order': 15,
 'node': None,
 'origins': {add_9: 1,
             mul_13: 1,
             relu_1: 1,
             rsqrt_1: 1,
             add_6: 1,
             var_mean_1: 2,
             sub_1: 1,
             mul_7: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_5', index=c0, size=(64, 3136)), MemoryDep(name='primals_6', index=c0, size=(64, 3136)), MemoryDep(name='buf14', index=c0, size=(64, 3136)), MemoryDep(name='buf12', index=c0, size=(200704,))}, writes={MemoryDep(name='buf15', index=c0, size=(64,)), MemoryDep(name='buf19', index=c0, size=(200704,)), MemoryDep(name='buf15', index=c0, size=(64, 3136))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf2',
                            'buf3',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf15'), SchedulerNode(name='buf19')],
 'unmet_dependencies': {MemoryDep(name='buf12', index=c0, size=(200704,)),
                        MemoryDep(name='buf14', index=c0, size=(64, 3136))},
 'users': None}

Done fusedschedulernode-----------------------
ir.LoopBodyBlock.__call__---------------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf27', 'buf23'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 3136)),
 'inverse_users': [],
 'max_order': 27,
 'min_order': 23,
 'node': None,
 'origins': {add_15: 1,
             mul_20: 1,
             relu_2: 1,
             add_14: 1,
             mul_14: 1,
             sub_2: 1,
             add_11: 1,
             var_mean_2: 2,
             rsqrt_2: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf20', index=c0, size=(200704,)), MemoryDep(name='primals_9', index=c0, size=(64, 3136)), MemoryDep(name='buf10', index=c0, size=(200704,)), MemoryDep(name='buf22', index=c0, size=(64, 3136)), MemoryDep(name='primals_8', index=c0, size=(64, 3136))}, writes={MemoryDep(name='buf27', index=c0, size=(200704,)), MemoryDep(name='buf23', index=c0, size=(64, 3136)), MemoryDep(name='buf23', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf3',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf23'), SchedulerNode(name='buf27')],
 'unmet_dependencies': {MemoryDep(name='buf10', index=c0, size=(200704,)),
                        MemoryDep(name='buf20', index=c0, size=(200704,)),
                        MemoryDep(name='buf22', index=c0, size=(64, 3136))},
 'users': None}

Done fusedschedulernode-----------------------
ir.LoopBodyBlock.__call__---------------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf31', 'buf35'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 3136)),
 'inverse_users': [],
 'max_order': 35,
 'min_order': 31,
 'node': None,
 'origins': {relu_3: 1,
             add_20: 1,
             mul_27: 1,
             mul_21: 1,
             add_17: 1,
             var_mean_3: 2,
             rsqrt_3: 1,
             sub_3: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf30', index=c0, size=(64, 3136)), MemoryDep(name='primals_12', index=c0, size=(64, 3136)), MemoryDep(name='buf28', index=c0, size=(200704,)), MemoryDep(name='primals_11', index=c0, size=(64, 3136))}, writes={MemoryDep(name='buf31', index=c0, size=(64, 3136)), MemoryDep(name='buf31', index=c0, size=(64,)), MemoryDep(name='buf35', index=c0, size=(200704,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf31'), SchedulerNode(name='buf35')],
 'unmet_dependencies': {MemoryDep(name='buf28', index=c0, size=(200704,)),
                        MemoryDep(name='buf30', index=c0, size=(64, 3136))},
 'users': None}

Done fusedschedulernode-----------------------
ir.LoopBodyBlock.__call__---------------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf39', 'buf43'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 3136)),
 'inverse_users': [],
 'max_order': 43,
 'min_order': 39,
 'node': None,
 'origins': {add_25: 1,
             add_26: 1,
             rsqrt_4: 1,
             mul_34: 1,
             relu_4: 1,
             var_mean_4: 2,
             add_22: 1,
             mul_28: 1,
             sub_4: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf27', index=c0, size=(200704,)), MemoryDep(name='buf36', index=c0, size=(200704,)), MemoryDep(name='primals_15', index=c0, size=(64, 3136)), MemoryDep(name='buf38', index=c0, size=(64, 3136)), MemoryDep(name='primals_14', index=c0, size=(64, 3136))}, writes={MemoryDep(name='buf39', index=c0, size=(64,)), MemoryDep(name='buf43', index=c0, size=(200704,)), MemoryDep(name='buf39', index=c0, size=(64, 3136))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf39'), SchedulerNode(name='buf43')],
 'unmet_dependencies': {MemoryDep(name='buf27', index=c0, size=(200704,)),
                        MemoryDep(name='buf36', index=c0, size=(200704,)),
                        MemoryDep(name='buf38', index=c0, size=(64, 3136))},
 'users': None}

Done fusedschedulernode-----------------------
ir.LoopBodyBlock.__call__---------------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf51', 'buf47'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'max_order': 51,
 'min_order': 47,
 'node': None,
 'origins': {relu_5: 1,
             mul_35: 1,
             mul_41: 1,
             add_31: 1,
             add_28: 1,
             rsqrt_5: 1,
             sub_5: 1,
             var_mean_5: 2},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_17', index=c0, size=(128, 784)), MemoryDep(name='buf46', index=c0, size=(128, 784)), MemoryDep(name='buf44', index=c0, size=(100352,)), MemoryDep(name='primals_18', index=c0, size=(128, 784))}, writes={MemoryDep(name='buf47', index=c0, size=(128, 784)), MemoryDep(name='buf51', index=c0, size=(100352,)), MemoryDep(name='buf47', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf47'), SchedulerNode(name='buf51')],
 'unmet_dependencies': {MemoryDep(name='buf44', index=c0, size=(100352,)),
                        MemoryDep(name='buf46', index=c0, size=(128, 784))},
 'users': None}

Done fusedschedulernode-----------------------
ir.LoopBodyBlock.__call__---------------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf67', 'buf66', 'buf62'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'max_order': 67,
 'min_order': 62,
 'node': None,
 'origins': {rsqrt_7: 1,
             add_38: 1,
             var_mean_7: 2,
             mul_49: 1,
             sub_7: 1,
             mul_42: 1,
             rsqrt_6: 1,
             sub_6: 1,
             var_mean_6: 1,
             mul_48: 1,
             add_36: 1,
             add_33: 1,
             add_41: 1,
             mul_55: 1,
             relu_6: 1,
             add_42: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_20', index=c0, size=(128, 784)), MemoryDep(name='buf59', index=c0, size=(100352,)), MemoryDep(name='primals_23', index=c0, size=(128, 784)), MemoryDep(name='primals_21', index=c0, size=(128, 784)), MemoryDep(name='buf54', index=c0, size=(128, 784)), MemoryDep(name='buf52', index=c0, size=(100352,)), MemoryDep(name='buf55', index=c0, size=(128, 784)), MemoryDep(name='primals_24', index=c0, size=(128, 784)), MemoryDep(name='buf61', index=c0, size=(128, 784))}, writes={MemoryDep(name='buf62', index=c0, size=(128,)), MemoryDep(name='buf62', index=c0, size=(128, 784)), MemoryDep(name='buf67', index=c0, size=(100352,)), MemoryDep(name='buf66', index=c0, size=(100352,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf62'),
            SchedulerNode(name='buf66'),
            SchedulerNode(name='buf67')],
 'unmet_dependencies': {MemoryDep(name='buf52', index=c0, size=(100352,)),
                        MemoryDep(name='buf54', index=c0, size=(128, 784)),
                        MemoryDep(name='buf55', index=c0, size=(128, 784)),
                        MemoryDep(name='buf59', index=c0, size=(100352,)),
                        MemoryDep(name='buf61', index=c0, size=(128, 784))},
 'users': None}

Done fusedschedulernode-----------------------
ir.LoopBodyBlock.__call__---------------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf71', 'buf75'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'max_order': 75,
 'min_order': 71,
 'node': None,
 'origins': {sub_8: 1,
             add_44: 1,
             var_mean_8: 2,
             rsqrt_8: 1,
             mul_56: 1,
             relu_7: 1,
             add_47: 1,
             mul_62: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf70', index=c0, size=(128, 784)), MemoryDep(name='buf68', index=c0, size=(100352,)), MemoryDep(name='primals_27', index=c0, size=(128, 784)), MemoryDep(name='primals_26', index=c0, size=(128, 784))}, writes={MemoryDep(name='buf75', index=c0, size=(100352,)), MemoryDep(name='buf71', index=c0, size=(128,)), MemoryDep(name='buf71', index=c0, size=(128, 784))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf71'), SchedulerNode(name='buf75')],
 'unmet_dependencies': {MemoryDep(name='buf68', index=c0, size=(100352,)),
                        MemoryDep(name='buf70', index=c0, size=(128, 784))},
 'users': None}

Done fusedschedulernode-----------------------
ir.LoopBodyBlock.__call__---------------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf79', 'buf83'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'max_order': 83,
 'min_order': 79,
 'node': None,
 'origins': {relu_8: 1,
             add_53: 1,
             mul_69: 1,
             add_52: 1,
             mul_63: 1,
             add_49: 1,
             rsqrt_9: 1,
             var_mean_9: 2,
             sub_9: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_30', index=c0, size=(128, 784)), MemoryDep(name='primals_29', index=c0, size=(128, 784)), MemoryDep(name='buf76', index=c0, size=(100352,)), MemoryDep(name='buf67', index=c0, size=(100352,)), MemoryDep(name='buf78', index=c0, size=(128, 784))}, writes={MemoryDep(name='buf79', index=c0, size=(128, 784)), MemoryDep(name='buf83', index=c0, size=(100352,)), MemoryDep(name='buf79', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf79'), SchedulerNode(name='buf83')],
 'unmet_dependencies': {MemoryDep(name='buf67', index=c0, size=(100352,)),
                        MemoryDep(name='buf76', index=c0, size=(100352,)),
                        MemoryDep(name='buf78', index=c0, size=(128, 784))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf67', 'buf66', 'buf55', 'buf62'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'max_order': 67,
 'min_order': 55,
 'node': None,
 'origins': {rsqrt_7: 1,
             add_38: 1,
             var_mean_7: 2,
             mul_49: 1,
             sub_7: 1,
             mul_42: 1,
             rsqrt_6: 1,
             sub_6: 1,
             var_mean_6: 2,
             mul_48: 1,
             add_36: 1,
             add_33: 1,
             add_41: 1,
             mul_55: 1,
             relu_6: 1,
             add_42: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_20', index=c0, size=(128, 784)), MemoryDep(name='buf59', index=c0, size=(100352,)), MemoryDep(name='primals_23', index=c0, size=(128, 784)), MemoryDep(name='primals_21', index=c0, size=(128, 784)), MemoryDep(name='buf54', index=c0, size=(128, 784)), MemoryDep(name='buf52', index=c0, size=(100352,)), MemoryDep(name='primals_24', index=c0, size=(128, 784)), MemoryDep(name='buf61', index=c0, size=(128, 784))}, writes={MemoryDep(name='buf55', index=c0, size=(128,)), MemoryDep(name='buf55', index=c0, size=(128, 784)), MemoryDep(name='buf66', index=c0, size=(100352,)), MemoryDep(name='buf62', index=c0, size=(128,)), MemoryDep(name='buf62', index=c0, size=(128, 784)), MemoryDep(name='buf67', index=c0, size=(100352,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf55'),
            SchedulerNode(name='buf62'),
            SchedulerNode(name='buf66'),
            SchedulerNode(name='buf67')],
 'unmet_dependencies': {MemoryDep(name='buf52', index=c0, size=(100352,)),
                        MemoryDep(name='buf54', index=c0, size=(128, 784)),
                        MemoryDep(name='buf59', index=c0, size=(100352,)),
                        MemoryDep(name='buf61', index=c0, size=(128, 784))},
 'users': None}

Done fusedschedulernode-----------------------
ir.LoopBodyBlock.__call__---------------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf91', 'buf87'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'max_order': 91,
 'min_order': 87,
 'node': None,
 'origins': {var_mean_10: 2,
             add_55: 1,
             sub_10: 1,
             mul_70: 1,
             rsqrt_10: 1,
             relu_9: 1,
             add_58: 1,
             mul_76: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf86', index=c0, size=(256, 196)), MemoryDep(name='primals_32', index=c0, size=(256, 196)), MemoryDep(name='buf84', index=c0, size=(50176,)), MemoryDep(name='primals_33', index=c0, size=(256, 196))}, writes={MemoryDep(name='buf87', index=c0, size=(256,)), MemoryDep(name='buf91', index=c0, size=(50176,)), MemoryDep(name='buf87', index=c0, size=(256, 196))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf87'), SchedulerNode(name='buf91')],
 'unmet_dependencies': {MemoryDep(name='buf84', index=c0, size=(50176,)),
                        MemoryDep(name='buf86', index=c0, size=(256, 196))},
 'users': None}

Done fusedschedulernode-----------------------
ir.LoopBodyBlock.__call__---------------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf102', 'buf107', 'buf106'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'max_order': 107,
 'min_order': 102,
 'node': None,
 'origins': {mul_90: 1,
             add_68: 1,
             relu_10: 1,
             add_69: 1,
             sub_11: 1,
             add_60: 1,
             mul_77: 1,
             var_mean_11: 1,
             add_65: 1,
             rsqrt_11: 1,
             mul_84: 1,
             mul_83: 1,
             add_63: 1,
             rsqrt_12: 1,
             sub_12: 1,
             var_mean_12: 2},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_39', index=c0, size=(256, 196)), MemoryDep(name='buf99', index=c0, size=(50176,)), MemoryDep(name='primals_36', index=c0, size=(256, 196)), MemoryDep(name='buf101', index=c0, size=(256, 196)), MemoryDep(name='buf92', index=c0, size=(50176,)), MemoryDep(name='buf95', index=c0, size=(256, 196)), MemoryDep(name='buf94', index=c0, size=(256, 196)), MemoryDep(name='primals_35', index=c0, size=(256, 196)), MemoryDep(name='primals_38', index=c0, size=(256, 196))}, writes={MemoryDep(name='buf106', index=c0, size=(50176,)), MemoryDep(name='buf102', index=c0, size=(256,)), MemoryDep(name='buf102', index=c0, size=(256, 196)), MemoryDep(name='buf107', index=c0, size=(50176,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf102'),
            SchedulerNode(name='buf106'),
            SchedulerNode(name='buf107')],
 'unmet_dependencies': {MemoryDep(name='buf101', index=c0, size=(256, 196)),
                        MemoryDep(name='buf92', index=c0, size=(50176,)),
                        MemoryDep(name='buf94', index=c0, size=(256, 196)),
                        MemoryDep(name='buf95', index=c0, size=(256, 196)),
                        MemoryDep(name='buf99', index=c0, size=(50176,))},
 'users': None}

Done fusedschedulernode-----------------------
ir.LoopBodyBlock.__call__---------------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf115', 'buf111'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'max_order': 115,
 'min_order': 111,
 'node': None,
 'origins': {sub_13: 1,
             add_71: 1,
             var_mean_13: 2,
             rsqrt_13: 1,
             mul_91: 1,
             mul_97: 1,
             add_74: 1,
             relu_11: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf108', index=c0, size=(50176,)), MemoryDep(name='buf110', index=c0, size=(256, 196)), MemoryDep(name='primals_41', index=c0, size=(256, 196)), MemoryDep(name='primals_42', index=c0, size=(256, 196))}, writes={MemoryDep(name='buf111', index=c0, size=(256, 196)), MemoryDep(name='buf115', index=c0, size=(50176,)), MemoryDep(name='buf111', index=c0, size=(256,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf111'), SchedulerNode(name='buf115')],
 'unmet_dependencies': {MemoryDep(name='buf108', index=c0, size=(50176,)),
                        MemoryDep(name='buf110', index=c0, size=(256, 196))},
 'users': None}

Done fusedschedulernode-----------------------
ir.LoopBodyBlock.__call__---------------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf119', 'buf123'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'max_order': 123,
 'min_order': 119,
 'node': None,
 'origins': {add_79: 1,
             mul_104: 1,
             add_80: 1,
             relu_12: 1,
             sub_14: 1,
             var_mean_14: 2,
             add_76: 1,
             rsqrt_14: 1,
             mul_98: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf107', index=c0, size=(50176,)), MemoryDep(name='primals_45', index=c0, size=(256, 196)), MemoryDep(name='buf118', index=c0, size=(256, 196)), MemoryDep(name='primals_44', index=c0, size=(256, 196)), MemoryDep(name='buf116', index=c0, size=(50176,))}, writes={MemoryDep(name='buf119', index=c0, size=(256,)), MemoryDep(name='buf119', index=c0, size=(256, 196)), MemoryDep(name='buf123', index=c0, size=(50176,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf119'), SchedulerNode(name='buf123')],
 'unmet_dependencies': {MemoryDep(name='buf107', index=c0, size=(50176,)),
                        MemoryDep(name='buf116', index=c0, size=(50176,)),
                        MemoryDep(name='buf118', index=c0, size=(256, 196))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf102', 'buf107', 'buf106', 'buf95'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'max_order': 107,
 'min_order': 95,
 'node': None,
 'origins': {mul_90: 1,
             add_68: 1,
             relu_10: 1,
             add_69: 1,
             sub_11: 1,
             add_60: 1,
             mul_77: 1,
             var_mean_11: 2,
             add_65: 1,
             rsqrt_11: 1,
             mul_84: 1,
             mul_83: 1,
             add_63: 1,
             rsqrt_12: 1,
             sub_12: 1,
             var_mean_12: 2},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_39', index=c0, size=(256, 196)), MemoryDep(name='buf99', index=c0, size=(50176,)), MemoryDep(name='primals_36', index=c0, size=(256, 196)), MemoryDep(name='buf101', index=c0, size=(256, 196)), MemoryDep(name='buf92', index=c0, size=(50176,)), MemoryDep(name='buf94', index=c0, size=(256, 196)), MemoryDep(name='primals_35', index=c0, size=(256, 196)), MemoryDep(name='primals_38', index=c0, size=(256, 196))}, writes={MemoryDep(name='buf107', index=c0, size=(50176,)), MemoryDep(name='buf102', index=c0, size=(256,)), MemoryDep(name='buf102', index=c0, size=(256, 196)), MemoryDep(name='buf95', index=c0, size=(256,)), MemoryDep(name='buf95', index=c0, size=(256, 196)), MemoryDep(name='buf106', index=c0, size=(50176,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf95'),
            SchedulerNode(name='buf102'),
            SchedulerNode(name='buf106'),
            SchedulerNode(name='buf107')],
 'unmet_dependencies': {MemoryDep(name='buf101', index=c0, size=(256, 196)),
                        MemoryDep(name='buf92', index=c0, size=(50176,)),
                        MemoryDep(name='buf94', index=c0, size=(256, 196)),
                        MemoryDep(name='buf99', index=c0, size=(50176,))},
 'users': None}

Done fusedschedulernode-----------------------
ir.LoopBodyBlock.__call__---------------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf127', 'buf131'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 131,
 'min_order': 127,
 'node': None,
 'origins': {sub_15: 1,
             add_82: 1,
             var_mean_15: 2,
             rsqrt_15: 1,
             mul_105: 1,
             relu_13: 1,
             add_85: 1,
             mul_111: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf124', index=c0, size=(25088,)), MemoryDep(name='primals_48', index=c0, size=(512, 49)), MemoryDep(name='buf126', index=c0, size=(512, 49)), MemoryDep(name='primals_47', index=c0, size=(512, 49))}, writes={MemoryDep(name='buf131', index=c0, size=(25088,)), MemoryDep(name='buf127', index=c0, size=(512,)), MemoryDep(name='buf127', index=c0, size=(512, 49))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf127'), SchedulerNode(name='buf131')],
 'unmet_dependencies': {MemoryDep(name='buf124', index=c0, size=(25088,)),
                        MemoryDep(name='buf126', index=c0, size=(512, 49))},
 'users': None}

Done fusedschedulernode-----------------------
ir.LoopBodyBlock.__call__---------------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf146', 'buf142', 'buf147'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 147,
 'min_order': 142,
 'node': None,
 'origins': {sub_16: 1,
             add_92: 1,
             var_mean_16: 1,
             rsqrt_16: 1,
             mul_118: 1,
             add_87: 1,
             var_mean_17: 2,
             mul_112: 1,
             add_90: 1,
             mul_119: 1,
             rsqrt_17: 1,
             mul_125: 1,
             relu_14: 1,
             add_96: 1,
             add_95: 1,
             sub_17: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_50', index=c0, size=(512, 49)), MemoryDep(name='primals_54', index=c0, size=(512, 49)), MemoryDep(name='buf139', index=c0, size=(25088,)), MemoryDep(name='buf135', index=c0, size=(512, 49)), MemoryDep(name='buf141', index=c0, size=(512, 49)), MemoryDep(name='primals_53', index=c0, size=(512, 49)), MemoryDep(name='buf134', index=c0, size=(512, 49)), MemoryDep(name='buf132', index=c0, size=(25088,)), MemoryDep(name='primals_51', index=c0, size=(512, 49))}, writes={MemoryDep(name='buf142', index=c0, size=(512,)), MemoryDep(name='buf142', index=c0, size=(512, 49)), MemoryDep(name='buf146', index=c0, size=(25088,)), MemoryDep(name='buf147', index=c0, size=(25088,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf142'),
            SchedulerNode(name='buf146'),
            SchedulerNode(name='buf147')],
 'unmet_dependencies': {MemoryDep(name='buf132', index=c0, size=(25088,)),
                        MemoryDep(name='buf134', index=c0, size=(512, 49)),
                        MemoryDep(name='buf135', index=c0, size=(512, 49)),
                        MemoryDep(name='buf139', index=c0, size=(25088,)),
                        MemoryDep(name='buf141', index=c0, size=(512, 49))},
 'users': None}

Done fusedschedulernode-----------------------
ir.LoopBodyBlock.__call__---------------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf151', 'buf155'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 155,
 'min_order': 151,
 'node': None,
 'origins': {sub_18: 1,
             var_mean_18: 2,
             rsqrt_18: 1,
             add_98: 1,
             mul_126: 1,
             mul_132: 1,
             add_101: 1,
             relu_15: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf148', index=c0, size=(25088,)), MemoryDep(name='primals_57', index=c0, size=(512, 49)), MemoryDep(name='primals_56', index=c0, size=(512, 49)), MemoryDep(name='buf150', index=c0, size=(512, 49))}, writes={MemoryDep(name='buf151', index=c0, size=(512,)), MemoryDep(name='buf151', index=c0, size=(512, 49)), MemoryDep(name='buf155', index=c0, size=(25088,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf147',
                            'buf148',
                            'buf149',
                            'buf15',
                            'buf150',
                            'buf151',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf151'), SchedulerNode(name='buf155')],
 'unmet_dependencies': {MemoryDep(name='buf148', index=c0, size=(25088,)),
                        MemoryDep(name='buf150', index=c0, size=(512, 49))},
 'users': None}

Done fusedschedulernode-----------------------
ir.LoopBodyBlock.__call__---------------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf159', 'buf167', 'buf163'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 167,
 'min_order': 159,
 'node': None,
 'origins': {le: 1,
             relu_16: 1,
             add_107: 1,
             mul_139: 1,
             add_106: 1,
             sub_19: 1,
             mul_133: 1,
             var_mean_19: 2,
             add_103: 1,
             rsqrt_19: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf147', index=c0, size=(25088,)), MemoryDep(name='buf156', index=c0, size=(25088,)), MemoryDep(name='primals_60', index=c0, size=(512, 49)), MemoryDep(name='primals_59', index=c0, size=(512, 49)), MemoryDep(name='buf158', index=c0, size=(512, 49))}, writes={MemoryDep(name='buf163', index=c0, size=(25088,)), MemoryDep(name='buf159', index=c0, size=(512,)), MemoryDep(name='buf167', index=c0, size=(25088,)), MemoryDep(name='buf159', index=c0, size=(512, 49))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf147',
                            'buf148',
                            'buf149',
                            'buf15',
                            'buf150',
                            'buf151',
                            'buf155',
                            'buf156',
                            'buf157',
                            'buf158',
                            'buf159',
                            'buf163',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf159'),
            SchedulerNode(name='buf163'),
            SchedulerNode(name='buf167')],
 'unmet_dependencies': {MemoryDep(name='buf147', index=c0, size=(25088,)),
                        MemoryDep(name='buf156', index=c0, size=(25088,)),
                        MemoryDep(name='buf158', index=c0, size=(512, 49))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf146', 'buf135', 'buf147', 'buf142'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 147,
 'min_order': 135,
 'node': None,
 'origins': {sub_16: 1,
             add_92: 1,
             var_mean_16: 2,
             rsqrt_16: 1,
             mul_118: 1,
             add_87: 1,
             var_mean_17: 2,
             mul_112: 1,
             add_90: 1,
             mul_119: 1,
             rsqrt_17: 1,
             mul_125: 1,
             relu_14: 1,
             add_96: 1,
             add_95: 1,
             sub_17: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_50', index=c0, size=(512, 49)), MemoryDep(name='primals_54', index=c0, size=(512, 49)), MemoryDep(name='buf139', index=c0, size=(25088,)), MemoryDep(name='buf141', index=c0, size=(512, 49)), MemoryDep(name='primals_53', index=c0, size=(512, 49)), MemoryDep(name='buf134', index=c0, size=(512, 49)), MemoryDep(name='buf132', index=c0, size=(25088,)), MemoryDep(name='primals_51', index=c0, size=(512, 49))}, writes={MemoryDep(name='buf135', index=c0, size=(512,)), MemoryDep(name='buf146', index=c0, size=(25088,)), MemoryDep(name='buf135', index=c0, size=(512, 49)), MemoryDep(name='buf147', index=c0, size=(25088,)), MemoryDep(name='buf142', index=c0, size=(512,)), MemoryDep(name='buf142', index=c0, size=(512, 49))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf135'),
            SchedulerNode(name='buf142'),
            SchedulerNode(name='buf146'),
            SchedulerNode(name='buf147')],
 'unmet_dependencies': {MemoryDep(name='buf132', index=c0, size=(25088,)),
                        MemoryDep(name='buf134', index=c0, size=(512, 49)),
                        MemoryDep(name='buf139', index=c0, size=(25088,)),
                        MemoryDep(name='buf141', index=c0, size=(512, 49))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf159', 'buf167', 'buf163', 'buf164'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 167,
 'min_order': 159,
 'node': None,
 'origins': {le: 1,
             relu_16: 1,
             add_107: 1,
             mul_139: 1,
             add_106: 1,
             mean: 1,
             sub_19: 1,
             mul_133: 1,
             var_mean_19: 2,
             add_103: 1,
             rsqrt_19: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf147', index=c0, size=(25088,)), MemoryDep(name='buf156', index=c0, size=(25088,)), MemoryDep(name='primals_60', index=c0, size=(512, 49)), MemoryDep(name='primals_59', index=c0, size=(512, 49)), MemoryDep(name='buf158', index=c0, size=(512, 49))}, writes={MemoryDep(name='buf164', index=c0, size=(512, 49)), MemoryDep(name='buf159', index=c0, size=(512,)), MemoryDep(name='buf163', index=c0, size=(25088,)), MemoryDep(name='buf164', index=c0, size=(512,)), MemoryDep(name='buf159', index=c0, size=(512, 49)), MemoryDep(name='buf167', index=c0, size=(25088,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf147',
                            'buf148',
                            'buf149',
                            'buf15',
                            'buf150',
                            'buf151',
                            'buf155',
                            'buf156',
                            'buf157',
                            'buf158',
                            'buf159',
                            'buf163',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf159'),
            SchedulerNode(name='buf163'),
            SchedulerNode(name='buf167'),
            SchedulerNode(name='buf164')],
 'unmet_dependencies': {MemoryDep(name='buf147', index=c0, size=(25088,)),
                        MemoryDep(name='buf156', index=c0, size=(25088,)),
                        MemoryDep(name='buf158', index=c0, size=(512, 49))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf125', 'buf126', 'buf129'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 129,
 'min_order': 125,
 'node': None,
 'origins': {add_83: 1, mul_107: 1, var_mean_15: 2, mul_106: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf124', index=c0, size=(25088,)), MemoryDep(name='primals_108', index=c0, size=(512,))}, writes={MemoryDep(name='buf126', index=c0, size=(512,)), MemoryDep(name='buf125', index=c0, size=(512,)), MemoryDep(name='buf129', index=c0, size=(512,)), MemoryDep(name='buf125', index=c0, size=(512, 49))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf125'),
            SchedulerNode(name='buf126'),
            SchedulerNode(name='buf129')],
 'unmet_dependencies': {MemoryDep(name='buf124', index=c0, size=(25088,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf128', 'buf127', 'buf130', 'buf131'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 131,
 'min_order': 127,
 'node': None,
 'origins': {mul_109: 1,
             sub_15: 1,
             add_82: 2,
             var_mean_15: 3,
             add_84: 1,
             rsqrt_15: 2,
             mul_110: 1,
             squeeze_46: 1,
             mul_105: 1,
             relu_13: 1,
             add_85: 1,
             mul_111: 1,
             mul_108: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_48', index=c0, size=(512, 49)), MemoryDep(name='buf126', index=c0, size=(512, 49)), MemoryDep(name='primals_47', index=c0, size=(512, 49)), MemoryDep(name='buf124', index=c0, size=(25088,)), MemoryDep(name='primals_109', index=c0, size=(512,))}, writes={MemoryDep(name='buf128', index=c0, size=(512,)), MemoryDep(name='buf127', index=c0, size=(512,)), MemoryDep(name='buf127', index=c0, size=(512, 49)), MemoryDep(name='buf131', index=c0, size=(25088,)), MemoryDep(name='buf130', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf127'),
            SchedulerNode(name='buf131'),
            SchedulerNode(name='buf128'),
            SchedulerNode(name='buf130')],
 'unmet_dependencies': {MemoryDep(name='buf124', index=c0, size=(25088,)),
                        MemoryDep(name='buf126', index=c0, size=(512, 49))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf133', 'buf137', 'buf134'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 137,
 'min_order': 133,
 'node': None,
 'origins': {var_mean_16: 2, mul_114: 1, add_88: 1, mul_113: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf132', index=c0, size=(25088,)), MemoryDep(name='primals_111', index=c0, size=(512,))}, writes={MemoryDep(name='buf133', index=c0, size=(512,)), MemoryDep(name='buf134', index=c0, size=(512,)), MemoryDep(name='buf133', index=c0, size=(512, 49)), MemoryDep(name='buf137', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf133'),
            SchedulerNode(name='buf134'),
            SchedulerNode(name='buf137')],
 'unmet_dependencies': {MemoryDep(name='buf132', index=c0, size=(25088,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf135',
                       'buf136',
                       'buf138',
                       'buf142',
                       'buf146',
                       'buf147'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 147,
 'min_order': 135,
 'node': None,
 'origins': {mul_116: 1,
             sub_16: 1,
             add_92: 1,
             var_mean_16: 3,
             rsqrt_16: 2,
             mul_118: 1,
             add_87: 2,
             var_mean_17: 2,
             mul_112: 1,
             add_89: 1,
             add_90: 1,
             mul_117: 1,
             squeeze_49: 1,
             mul_115: 1,
             mul_119: 1,
             rsqrt_17: 1,
             mul_125: 1,
             relu_14: 1,
             add_96: 1,
             add_95: 1,
             sub_17: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_50', index=c0, size=(512, 49)), MemoryDep(name='primals_54', index=c0, size=(512, 49)), MemoryDep(name='buf139', index=c0, size=(25088,)), MemoryDep(name='buf141', index=c0, size=(512, 49)), MemoryDep(name='primals_53', index=c0, size=(512, 49)), MemoryDep(name='buf134', index=c0, size=(512, 49)), MemoryDep(name='primals_112', index=c0, size=(512,)), MemoryDep(name='buf132', index=c0, size=(25088,)), MemoryDep(name='primals_51', index=c0, size=(512, 49))}, writes={MemoryDep(name='buf135', index=c0, size=(512,)), MemoryDep(name='buf146', index=c0, size=(25088,)), MemoryDep(name='buf135', index=c0, size=(512, 49)), MemoryDep(name='buf138', index=c0, size=(512,)), MemoryDep(name='buf147', index=c0, size=(25088,)), MemoryDep(name='buf142', index=c0, size=(512,)), MemoryDep(name='buf142', index=c0, size=(512, 49)), MemoryDep(name='buf136', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf135'),
            SchedulerNode(name='buf142'),
            SchedulerNode(name='buf146'),
            SchedulerNode(name='buf147'),
            SchedulerNode(name='buf136'),
            SchedulerNode(name='buf138')],
 'unmet_dependencies': {MemoryDep(name='buf132', index=c0, size=(25088,)),
                        MemoryDep(name='buf134', index=c0, size=(512, 49)),
                        MemoryDep(name='buf139', index=c0, size=(25088,)),
                        MemoryDep(name='buf141', index=c0, size=(512, 49))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf144', 'buf140', 'buf141'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 144,
 'min_order': 140,
 'node': None,
 'origins': {var_mean_17: 2, mul_121: 1, mul_120: 1, add_93: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf139', index=c0, size=(25088,)), MemoryDep(name='primals_114', index=c0, size=(512,))}, writes={MemoryDep(name='buf140', index=c0, size=(512, 49)), MemoryDep(name='buf141', index=c0, size=(512,)), MemoryDep(name='buf144', index=c0, size=(512,)), MemoryDep(name='buf140', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf13',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf140'),
            SchedulerNode(name='buf141'),
            SchedulerNode(name='buf144')],
 'unmet_dependencies': {MemoryDep(name='buf139', index=c0, size=(25088,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf135',
                       'buf136',
                       'buf138',
                       'buf142',
                       'buf143',
                       'buf145',
                       'buf146',
                       'buf147'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 147,
 'min_order': 135,
 'node': None,
 'origins': {mul_116: 1,
             sub_16: 1,
             add_92: 2,
             var_mean_16: 3,
             rsqrt_16: 2,
             mul_118: 1,
             add_87: 2,
             var_mean_17: 3,
             mul_112: 1,
             add_89: 1,
             add_90: 1,
             mul_117: 1,
             squeeze_49: 1,
             mul_115: 1,
             mul_123: 1,
             mul_119: 1,
             add_94: 1,
             rsqrt_17: 2,
             mul_124: 1,
             squeeze_52: 1,
             mul_122: 1,
             mul_125: 1,
             relu_14: 1,
             add_96: 1,
             add_95: 1,
             sub_17: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_50', index=c0, size=(512, 49)), MemoryDep(name='primals_54', index=c0, size=(512, 49)), MemoryDep(name='buf139', index=c0, size=(25088,)), MemoryDep(name='buf141', index=c0, size=(512, 49)), MemoryDep(name='primals_53', index=c0, size=(512, 49)), MemoryDep(name='primals_115', index=c0, size=(512,)), MemoryDep(name='buf134', index=c0, size=(512, 49)), MemoryDep(name='primals_112', index=c0, size=(512,)), MemoryDep(name='buf132', index=c0, size=(25088,)), MemoryDep(name='primals_51', index=c0, size=(512, 49))}, writes={MemoryDep(name='buf146', index=c0, size=(25088,)), MemoryDep(name='buf135', index=c0, size=(512, 49)), MemoryDep(name='buf145', index=c0, size=(512,)), MemoryDep(name='buf147', index=c0, size=(25088,)), MemoryDep(name='buf142', index=c0, size=(512, 49)), MemoryDep(name='buf143', index=c0, size=(512,)), MemoryDep(name='buf135', index=c0, size=(512,)), MemoryDep(name='buf138', index=c0, size=(512,)), MemoryDep(name='buf142', index=c0, size=(512,)), MemoryDep(name='buf136', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf135'),
            SchedulerNode(name='buf142'),
            SchedulerNode(name='buf146'),
            SchedulerNode(name='buf147'),
            SchedulerNode(name='buf136'),
            SchedulerNode(name='buf138'),
            SchedulerNode(name='buf143'),
            SchedulerNode(name='buf145')],
 'unmet_dependencies': {MemoryDep(name='buf132', index=c0, size=(25088,)),
                        MemoryDep(name='buf134', index=c0, size=(512, 49)),
                        MemoryDep(name='buf139', index=c0, size=(25088,)),
                        MemoryDep(name='buf141', index=c0, size=(512, 49))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf153', 'buf150', 'buf149'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 153,
 'min_order': 149,
 'node': None,
 'origins': {add_99: 1, var_mean_18: 2, mul_128: 1, mul_127: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_117', index=c0, size=(512,)), MemoryDep(name='buf148', index=c0, size=(25088,))}, writes={MemoryDep(name='buf149', index=c0, size=(512,)), MemoryDep(name='buf153', index=c0, size=(512,)), MemoryDep(name='buf149', index=c0, size=(512, 49)), MemoryDep(name='buf150', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf147',
                            'buf148',
                            'buf149',
                            'buf15',
                            'buf150',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf149'),
            SchedulerNode(name='buf150'),
            SchedulerNode(name='buf153')],
 'unmet_dependencies': {MemoryDep(name='buf148', index=c0, size=(25088,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf151', 'buf152', 'buf154', 'buf155'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 155,
 'min_order': 151,
 'node': None,
 'origins': {sub_18: 1,
             mul_130: 1,
             var_mean_18: 3,
             add_100: 1,
             rsqrt_18: 2,
             add_98: 2,
             mul_126: 1,
             squeeze_55: 1,
             mul_132: 1,
             mul_129: 1,
             add_101: 1,
             mul_131: 1,
             relu_15: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf148', index=c0, size=(25088,)), MemoryDep(name='primals_57', index=c0, size=(512, 49)), MemoryDep(name='primals_56', index=c0, size=(512, 49)), MemoryDep(name='primals_118', index=c0, size=(512,)), MemoryDep(name='buf150', index=c0, size=(512, 49))}, writes={MemoryDep(name='buf151', index=c0, size=(512,)), MemoryDep(name='buf151', index=c0, size=(512, 49)), MemoryDep(name='buf152', index=c0, size=(512,)), MemoryDep(name='buf155', index=c0, size=(25088,)), MemoryDep(name='buf154', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf147',
                            'buf148',
                            'buf149',
                            'buf15',
                            'buf150',
                            'buf151',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf151'),
            SchedulerNode(name='buf155'),
            SchedulerNode(name='buf152'),
            SchedulerNode(name='buf154')],
 'unmet_dependencies': {MemoryDep(name='buf148', index=c0, size=(25088,)),
                        MemoryDep(name='buf150', index=c0, size=(512, 49))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf161', 'buf157', 'buf158'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 161,
 'min_order': 157,
 'node': None,
 'origins': {mul_134: 1, mul_135: 1, var_mean_19: 2, add_104: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf156', index=c0, size=(25088,)), MemoryDep(name='primals_120', index=c0, size=(512,))}, writes={MemoryDep(name='buf157', index=c0, size=(512,)), MemoryDep(name='buf158', index=c0, size=(512,)), MemoryDep(name='buf157', index=c0, size=(512, 49)), MemoryDep(name='buf161', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf147',
                            'buf148',
                            'buf149',
                            'buf15',
                            'buf150',
                            'buf151',
                            'buf155',
                            'buf156',
                            'buf157',
                            'buf158',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf157'),
            SchedulerNode(name='buf158'),
            SchedulerNode(name='buf161')],
 'unmet_dependencies': {MemoryDep(name='buf156', index=c0, size=(25088,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf159',
                       'buf160',
                       'buf162',
                       'buf163',
                       'buf164',
                       'buf167'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 167,
 'min_order': 159,
 'node': None,
 'origins': {le: 1,
             relu_16: 1,
             add_107: 1,
             mul_139: 1,
             mul_136: 1,
             add_106: 1,
             mul_138: 1,
             mul_137: 1,
             mean: 1,
             add_105: 1,
             sub_19: 1,
             mul_133: 1,
             var_mean_19: 3,
             add_103: 2,
             squeeze_58: 1,
             rsqrt_19: 2},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf147', index=c0, size=(25088,)), MemoryDep(name='buf156', index=c0, size=(25088,)), MemoryDep(name='primals_60', index=c0, size=(512, 49)), MemoryDep(name='primals_59', index=c0, size=(512, 49)), MemoryDep(name='primals_121', index=c0, size=(512,)), MemoryDep(name='buf158', index=c0, size=(512, 49))}, writes={MemoryDep(name='buf160', index=c0, size=(512,)), MemoryDep(name='buf164', index=c0, size=(512, 49)), MemoryDep(name='buf159', index=c0, size=(512,)), MemoryDep(name='buf163', index=c0, size=(25088,)), MemoryDep(name='buf164', index=c0, size=(512,)), MemoryDep(name='buf159', index=c0, size=(512, 49)), MemoryDep(name='buf162', index=c0, size=(512,)), MemoryDep(name='buf167', index=c0, size=(25088,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf147',
                            'buf148',
                            'buf149',
                            'buf15',
                            'buf150',
                            'buf151',
                            'buf155',
                            'buf156',
                            'buf157',
                            'buf158',
                            'buf159',
                            'buf163',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf159'),
            SchedulerNode(name='buf163'),
            SchedulerNode(name='buf167'),
            SchedulerNode(name='buf164'),
            SchedulerNode(name='buf160'),
            SchedulerNode(name='buf162')],
 'unmet_dependencies': {MemoryDep(name='buf147', index=c0, size=(25088,)),
                        MemoryDep(name='buf156', index=c0, size=(25088,)),
                        MemoryDep(name='buf158', index=c0, size=(512, 49))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf159',
                       'buf160',
                       'buf162',
                       'buf163',
                       'buf164',
                       'buf165',
                       'buf167'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 167,
 'min_order': 159,
 'node': None,
 'origins': {le: 1,
             view: 1,
             relu_16: 1,
             add_107: 1,
             mul_139: 1,
             mul_136: 1,
             add_106: 1,
             mul_138: 1,
             mul_137: 1,
             mean: 2,
             add_105: 1,
             sub_19: 1,
             mul_133: 1,
             var_mean_19: 3,
             add_103: 2,
             squeeze_58: 1,
             rsqrt_19: 2},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf147', index=c0, size=(25088,)), MemoryDep(name='buf156', index=c0, size=(25088,)), MemoryDep(name='primals_60', index=c0, size=(512, 49)), MemoryDep(name='primals_59', index=c0, size=(512, 49)), MemoryDep(name='primals_121', index=c0, size=(512,)), MemoryDep(name='buf158', index=c0, size=(512, 49))}, writes={MemoryDep(name='buf165', index=c0, size=(512,)), MemoryDep(name='buf159', index=c0, size=(512, 49)), MemoryDep(name='buf164', index=c0, size=(512, 49)), MemoryDep(name='buf167', index=c0, size=(25088,)), MemoryDep(name='buf160', index=c0, size=(512,)), MemoryDep(name='buf159', index=c0, size=(512,)), MemoryDep(name='buf163', index=c0, size=(25088,)), MemoryDep(name='buf162', index=c0, size=(512,)), MemoryDep(name='buf164', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf147',
                            'buf148',
                            'buf149',
                            'buf15',
                            'buf150',
                            'buf151',
                            'buf155',
                            'buf156',
                            'buf157',
                            'buf158',
                            'buf159',
                            'buf163',
                            'buf164',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf159'),
            SchedulerNode(name='buf163'),
            SchedulerNode(name='buf167'),
            SchedulerNode(name='buf164'),
            SchedulerNode(name='buf160'),
            SchedulerNode(name='buf162'),
            SchedulerNode(name='buf165')],
 'unmet_dependencies': {MemoryDep(name='buf147', index=c0, size=(25088,)),
                        MemoryDep(name='buf156', index=c0, size=(25088,)),
                        MemoryDep(name='buf158', index=c0, size=(512, 49))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf89', 'buf85', 'buf86'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'max_order': 89,
 'min_order': 85,
 'node': None,
 'origins': {var_mean_10: 2, mul_72: 1, add_56: 1, mul_71: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf84', index=c0, size=(50176,)), MemoryDep(name='primals_93', index=c0, size=(256,))}, writes={MemoryDep(name='buf86', index=c0, size=(256,)), MemoryDep(name='buf89', index=c0, size=(256,)), MemoryDep(name='buf85', index=c0, size=(256,)), MemoryDep(name='buf85', index=c0, size=(256, 196))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf85'),
            SchedulerNode(name='buf86'),
            SchedulerNode(name='buf89')],
 'unmet_dependencies': {MemoryDep(name='buf84', index=c0, size=(50176,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf88', 'buf91', 'buf90', 'buf87'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'max_order': 91,
 'min_order': 87,
 'node': None,
 'origins': {var_mean_10: 3,
             add_55: 2,
             sub_10: 1,
             mul_74: 1,
             mul_70: 1,
             add_57: 1,
             rsqrt_10: 2,
             mul_75: 1,
             squeeze_31: 1,
             mul_73: 1,
             relu_9: 1,
             add_58: 1,
             mul_76: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_32', index=c0, size=(256, 196)), MemoryDep(name='buf84', index=c0, size=(50176,)), MemoryDep(name='primals_33', index=c0, size=(256, 196)), MemoryDep(name='buf86', index=c0, size=(256, 196)), MemoryDep(name='primals_94', index=c0, size=(256,))}, writes={MemoryDep(name='buf88', index=c0, size=(256,)), MemoryDep(name='buf90', index=c0, size=(256,)), MemoryDep(name='buf87', index=c0, size=(256,)), MemoryDep(name='buf91', index=c0, size=(50176,)), MemoryDep(name='buf87', index=c0, size=(256, 196))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf87'),
            SchedulerNode(name='buf91'),
            SchedulerNode(name='buf88'),
            SchedulerNode(name='buf90')],
 'unmet_dependencies': {MemoryDep(name='buf84', index=c0, size=(50176,)),
                        MemoryDep(name='buf86', index=c0, size=(256, 196))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf94', 'buf93', 'buf97'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'max_order': 97,
 'min_order': 93,
 'node': None,
 'origins': {add_61: 1, mul_79: 1, var_mean_11: 2, mul_78: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_96', index=c0, size=(256,)), MemoryDep(name='buf92', index=c0, size=(50176,))}, writes={MemoryDep(name='buf94', index=c0, size=(256,)), MemoryDep(name='buf97', index=c0, size=(256,)), MemoryDep(name='buf93', index=c0, size=(256,)), MemoryDep(name='buf93', index=c0, size=(256, 196))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf93'),
            SchedulerNode(name='buf94'),
            SchedulerNode(name='buf97')],
 'unmet_dependencies': {MemoryDep(name='buf92', index=c0, size=(50176,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf102', 'buf96', 'buf106', 'buf95', 'buf98', 'buf107'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'max_order': 107,
 'min_order': 95,
 'node': None,
 'origins': {mul_90: 1,
             add_68: 1,
             relu_10: 1,
             add_69: 1,
             mul_81: 1,
             sub_11: 1,
             add_60: 2,
             mul_77: 1,
             var_mean_11: 3,
             add_65: 1,
             squeeze_34: 1,
             mul_82: 1,
             add_62: 1,
             rsqrt_11: 2,
             mul_84: 1,
             mul_83: 1,
             add_63: 1,
             mul_80: 1,
             rsqrt_12: 1,
             sub_12: 1,
             var_mean_12: 2},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_97', index=c0, size=(256,)), MemoryDep(name='primals_39', index=c0, size=(256, 196)), MemoryDep(name='buf99', index=c0, size=(50176,)), MemoryDep(name='primals_36', index=c0, size=(256, 196)), MemoryDep(name='buf101', index=c0, size=(256, 196)), MemoryDep(name='buf92', index=c0, size=(50176,)), MemoryDep(name='buf94', index=c0, size=(256, 196)), MemoryDep(name='primals_35', index=c0, size=(256, 196)), MemoryDep(name='primals_38', index=c0, size=(256, 196))}, writes={MemoryDep(name='buf98', index=c0, size=(256,)), MemoryDep(name='buf107', index=c0, size=(50176,)), MemoryDep(name='buf102', index=c0, size=(256,)), MemoryDep(name='buf96', index=c0, size=(256,)), MemoryDep(name='buf102', index=c0, size=(256, 196)), MemoryDep(name='buf95', index=c0, size=(256,)), MemoryDep(name='buf95', index=c0, size=(256, 196)), MemoryDep(name='buf106', index=c0, size=(50176,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf95'),
            SchedulerNode(name='buf102'),
            SchedulerNode(name='buf106'),
            SchedulerNode(name='buf107'),
            SchedulerNode(name='buf96'),
            SchedulerNode(name='buf98')],
 'unmet_dependencies': {MemoryDep(name='buf101', index=c0, size=(256, 196)),
                        MemoryDep(name='buf92', index=c0, size=(50176,)),
                        MemoryDep(name='buf94', index=c0, size=(256, 196)),
                        MemoryDep(name='buf99', index=c0, size=(50176,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf104', 'buf101', 'buf100'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'max_order': 104,
 'min_order': 100,
 'node': None,
 'origins': {mul_85: 1, add_66: 1, mul_86: 1, var_mean_12: 2},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_99', index=c0, size=(256,)), MemoryDep(name='buf99', index=c0, size=(50176,))}, writes={MemoryDep(name='buf100', index=c0, size=(256, 196)), MemoryDep(name='buf104', index=c0, size=(256,)), MemoryDep(name='buf101', index=c0, size=(256,)), MemoryDep(name='buf100', index=c0, size=(256,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf9',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf100'),
            SchedulerNode(name='buf101'),
            SchedulerNode(name='buf104')],
 'unmet_dependencies': {MemoryDep(name='buf99', index=c0, size=(50176,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf102',
                       'buf103',
                       'buf105',
                       'buf106',
                       'buf107',
                       'buf95',
                       'buf96',
                       'buf98'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'max_order': 107,
 'min_order': 95,
 'node': None,
 'origins': {add_67: 1,
             mul_88: 1,
             squeeze_37: 1,
             mul_89: 1,
             mul_87: 1,
             mul_90: 1,
             add_68: 1,
             relu_10: 1,
             add_69: 1,
             mul_81: 1,
             sub_11: 1,
             add_60: 2,
             mul_77: 1,
             var_mean_11: 3,
             add_65: 2,
             squeeze_34: 1,
             mul_82: 1,
             add_62: 1,
             rsqrt_11: 2,
             mul_84: 1,
             mul_83: 1,
             add_63: 1,
             mul_80: 1,
             rsqrt_12: 2,
             sub_12: 1,
             var_mean_12: 3},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_97', index=c0, size=(256,)), MemoryDep(name='primals_100', index=c0, size=(256,)), MemoryDep(name='primals_39', index=c0, size=(256, 196)), MemoryDep(name='buf99', index=c0, size=(50176,)), MemoryDep(name='primals_36', index=c0, size=(256, 196)), MemoryDep(name='buf101', index=c0, size=(256, 196)), MemoryDep(name='buf92', index=c0, size=(50176,)), MemoryDep(name='buf94', index=c0, size=(256, 196)), MemoryDep(name='primals_35', index=c0, size=(256, 196)), MemoryDep(name='primals_38', index=c0, size=(256, 196))}, writes={MemoryDep(name='buf107', index=c0, size=(50176,)), MemoryDep(name='buf102', index=c0, size=(256,)), MemoryDep(name='buf95', index=c0, size=(256,)), MemoryDep(name='buf106', index=c0, size=(50176,)), MemoryDep(name='buf103', index=c0, size=(256,)), MemoryDep(name='buf105', index=c0, size=(256,)), MemoryDep(name='buf98', index=c0, size=(256,)), MemoryDep(name='buf96', index=c0, size=(256,)), MemoryDep(name='buf102', index=c0, size=(256, 196)), MemoryDep(name='buf95', index=c0, size=(256, 196))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf95'),
            SchedulerNode(name='buf102'),
            SchedulerNode(name='buf106'),
            SchedulerNode(name='buf107'),
            SchedulerNode(name='buf96'),
            SchedulerNode(name='buf98'),
            SchedulerNode(name='buf103'),
            SchedulerNode(name='buf105')],
 'unmet_dependencies': {MemoryDep(name='buf101', index=c0, size=(256, 196)),
                        MemoryDep(name='buf92', index=c0, size=(50176,)),
                        MemoryDep(name='buf94', index=c0, size=(256, 196)),
                        MemoryDep(name='buf99', index=c0, size=(50176,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf109', 'buf110', 'buf113'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'max_order': 113,
 'min_order': 109,
 'node': None,
 'origins': {add_72: 1, mul_93: 1, var_mean_13: 2, mul_92: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf108', index=c0, size=(50176,)), MemoryDep(name='primals_102', index=c0, size=(256,))}, writes={MemoryDep(name='buf110', index=c0, size=(256,)), MemoryDep(name='buf109', index=c0, size=(256,)), MemoryDep(name='buf109', index=c0, size=(256, 196)), MemoryDep(name='buf113', index=c0, size=(256,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf109'),
            SchedulerNode(name='buf110'),
            SchedulerNode(name='buf113')],
 'unmet_dependencies': {MemoryDep(name='buf108', index=c0, size=(50176,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf114', 'buf112', 'buf115', 'buf111'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'max_order': 115,
 'min_order': 111,
 'node': None,
 'origins': {sub_13: 1,
             mul_95: 1,
             add_71: 2,
             var_mean_13: 3,
             rsqrt_13: 2,
             add_73: 1,
             squeeze_40: 1,
             mul_91: 1,
             mul_96: 1,
             mul_94: 1,
             mul_97: 1,
             add_74: 1,
             relu_11: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf108', index=c0, size=(50176,)), MemoryDep(name='buf110', index=c0, size=(256, 196)), MemoryDep(name='primals_42', index=c0, size=(256, 196)), MemoryDep(name='primals_103', index=c0, size=(256,)), MemoryDep(name='primals_41', index=c0, size=(256, 196))}, writes={MemoryDep(name='buf114', index=c0, size=(256,)), MemoryDep(name='buf111', index=c0, size=(256,)), MemoryDep(name='buf111', index=c0, size=(256, 196)), MemoryDep(name='buf115', index=c0, size=(50176,)), MemoryDep(name='buf112', index=c0, size=(256,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf111'),
            SchedulerNode(name='buf115'),
            SchedulerNode(name='buf112'),
            SchedulerNode(name='buf114')],
 'unmet_dependencies': {MemoryDep(name='buf108', index=c0, size=(50176,)),
                        MemoryDep(name='buf110', index=c0, size=(256, 196))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf118', 'buf121', 'buf117'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'max_order': 121,
 'min_order': 117,
 'node': None,
 'origins': {var_mean_14: 2, mul_99: 1, add_77: 1, mul_100: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf116', index=c0, size=(50176,)), MemoryDep(name='primals_105', index=c0, size=(256,))}, writes={MemoryDep(name='buf117', index=c0, size=(256,)), MemoryDep(name='buf118', index=c0, size=(256,)), MemoryDep(name='buf117', index=c0, size=(256, 196)), MemoryDep(name='buf121', index=c0, size=(256,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf117'),
            SchedulerNode(name='buf118'),
            SchedulerNode(name='buf121')],
 'unmet_dependencies': {MemoryDep(name='buf116', index=c0, size=(50176,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf119', 'buf123', 'buf120', 'buf122'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'max_order': 123,
 'min_order': 119,
 'node': None,
 'origins': {add_79: 1,
             mul_104: 1,
             add_80: 1,
             relu_12: 1,
             mul_103: 1,
             sub_14: 1,
             var_mean_14: 3,
             mul_101: 1,
             add_76: 2,
             squeeze_43: 1,
             rsqrt_14: 2,
             mul_98: 1,
             add_78: 1,
             mul_102: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf107', index=c0, size=(50176,)), MemoryDep(name='primals_106', index=c0, size=(256,)), MemoryDep(name='primals_45', index=c0, size=(256, 196)), MemoryDep(name='buf118', index=c0, size=(256, 196)), MemoryDep(name='primals_44', index=c0, size=(256, 196)), MemoryDep(name='buf116', index=c0, size=(50176,))}, writes={MemoryDep(name='buf119', index=c0, size=(256,)), MemoryDep(name='buf119', index=c0, size=(256, 196)), MemoryDep(name='buf123', index=c0, size=(50176,)), MemoryDep(name='buf120', index=c0, size=(256,)), MemoryDep(name='buf122', index=c0, size=(256,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf119'),
            SchedulerNode(name='buf123'),
            SchedulerNode(name='buf120'),
            SchedulerNode(name='buf122')],
 'unmet_dependencies': {MemoryDep(name='buf107', index=c0, size=(50176,)),
                        MemoryDep(name='buf116', index=c0, size=(50176,)),
                        MemoryDep(name='buf118', index=c0, size=(256, 196))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf46', 'buf49', 'buf45'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'max_order': 49,
 'min_order': 45,
 'node': None,
 'origins': {mul_37: 1, add_29: 1, mul_36: 1, var_mean_5: 2},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf44', index=c0, size=(100352,)), MemoryDep(name='primals_78', index=c0, size=(128,))}, writes={MemoryDep(name='buf45', index=c0, size=(128,)), MemoryDep(name='buf45', index=c0, size=(128, 784)), MemoryDep(name='buf49', index=c0, size=(128,)), MemoryDep(name='buf46', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf45'),
            SchedulerNode(name='buf46'),
            SchedulerNode(name='buf49')],
 'unmet_dependencies': {MemoryDep(name='buf44', index=c0, size=(100352,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf50', 'buf51', 'buf48', 'buf47'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'max_order': 51,
 'min_order': 47,
 'node': None,
 'origins': {relu_5: 1,
             mul_38: 1,
             squeeze_16: 1,
             mul_39: 1,
             mul_35: 1,
             mul_41: 1,
             add_31: 1,
             add_30: 1,
             add_28: 2,
             mul_40: 1,
             rsqrt_5: 2,
             sub_5: 1,
             var_mean_5: 3},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_17', index=c0, size=(128, 784)), MemoryDep(name='buf44', index=c0, size=(100352,)), MemoryDep(name='buf46', index=c0, size=(128, 784)), MemoryDep(name='primals_79', index=c0, size=(128,)), MemoryDep(name='primals_18', index=c0, size=(128, 784))}, writes={MemoryDep(name='buf47', index=c0, size=(128, 784)), MemoryDep(name='buf50', index=c0, size=(128,)), MemoryDep(name='buf48', index=c0, size=(128,)), MemoryDep(name='buf51', index=c0, size=(100352,)), MemoryDep(name='buf47', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf47'),
            SchedulerNode(name='buf51'),
            SchedulerNode(name='buf48'),
            SchedulerNode(name='buf50')],
 'unmet_dependencies': {MemoryDep(name='buf44', index=c0, size=(100352,)),
                        MemoryDep(name='buf46', index=c0, size=(128, 784))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf54', 'buf57', 'buf53'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'max_order': 57,
 'min_order': 53,
 'node': None,
 'origins': {add_34: 1, mul_44: 1, var_mean_6: 2, mul_43: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf52', index=c0, size=(100352,)), MemoryDep(name='primals_81', index=c0, size=(128,))}, writes={MemoryDep(name='buf57', index=c0, size=(128,)), MemoryDep(name='buf53', index=c0, size=(128,)), MemoryDep(name='buf53', index=c0, size=(128, 784)), MemoryDep(name='buf54', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf53'),
            SchedulerNode(name='buf54'),
            SchedulerNode(name='buf57')],
 'unmet_dependencies': {MemoryDep(name='buf52', index=c0, size=(100352,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf56', 'buf66', 'buf55', 'buf58', 'buf67', 'buf62'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'max_order': 67,
 'min_order': 55,
 'node': None,
 'origins': {rsqrt_7: 1,
             add_38: 1,
             var_mean_7: 2,
             mul_49: 1,
             sub_7: 1,
             add_35: 1,
             mul_42: 1,
             rsqrt_6: 2,
             sub_6: 1,
             var_mean_6: 3,
             squeeze_19: 1,
             mul_48: 1,
             add_36: 1,
             mul_47: 1,
             add_33: 2,
             mul_45: 1,
             mul_46: 1,
             add_41: 1,
             mul_55: 1,
             relu_6: 1,
             add_42: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_20', index=c0, size=(128, 784)), MemoryDep(name='buf59', index=c0, size=(100352,)), MemoryDep(name='primals_82', index=c0, size=(128,)), MemoryDep(name='primals_23', index=c0, size=(128, 784)), MemoryDep(name='primals_21', index=c0, size=(128, 784)), MemoryDep(name='buf54', index=c0, size=(128, 784)), MemoryDep(name='buf52', index=c0, size=(100352,)), MemoryDep(name='primals_24', index=c0, size=(128, 784)), MemoryDep(name='buf61', index=c0, size=(128, 784))}, writes={MemoryDep(name='buf58', index=c0, size=(128,)), MemoryDep(name='buf55', index=c0, size=(128,)), MemoryDep(name='buf55', index=c0, size=(128, 784)), MemoryDep(name='buf66', index=c0, size=(100352,)), MemoryDep(name='buf56', index=c0, size=(128,)), MemoryDep(name='buf62', index=c0, size=(128,)), MemoryDep(name='buf62', index=c0, size=(128, 784)), MemoryDep(name='buf67', index=c0, size=(100352,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf55'),
            SchedulerNode(name='buf62'),
            SchedulerNode(name='buf66'),
            SchedulerNode(name='buf67'),
            SchedulerNode(name='buf56'),
            SchedulerNode(name='buf58')],
 'unmet_dependencies': {MemoryDep(name='buf52', index=c0, size=(100352,)),
                        MemoryDep(name='buf54', index=c0, size=(128, 784)),
                        MemoryDep(name='buf59', index=c0, size=(100352,)),
                        MemoryDep(name='buf61', index=c0, size=(128, 784))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf60', 'buf61', 'buf64'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'max_order': 64,
 'min_order': 60,
 'node': None,
 'origins': {var_mean_7: 2, mul_50: 1, mul_51: 1, add_39: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_84', index=c0, size=(128,)), MemoryDep(name='buf59', index=c0, size=(100352,))}, writes={MemoryDep(name='buf61', index=c0, size=(128,)), MemoryDep(name='buf60', index=c0, size=(128,)), MemoryDep(name='buf60', index=c0, size=(128, 784)), MemoryDep(name='buf64', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf5',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf60'),
            SchedulerNode(name='buf61'),
            SchedulerNode(name='buf64')],
 'unmet_dependencies': {MemoryDep(name='buf59', index=c0, size=(100352,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf55',
                       'buf56',
                       'buf58',
                       'buf62',
                       'buf63',
                       'buf65',
                       'buf66',
                       'buf67'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'max_order': 67,
 'min_order': 55,
 'node': None,
 'origins': {rsqrt_7: 2,
             add_38: 2,
             var_mean_7: 3,
             squeeze_22: 1,
             mul_49: 1,
             sub_7: 1,
             add_35: 1,
             mul_42: 1,
             rsqrt_6: 2,
             sub_6: 1,
             var_mean_6: 3,
             squeeze_19: 1,
             mul_48: 1,
             add_36: 1,
             mul_47: 1,
             add_33: 2,
             mul_45: 1,
             mul_46: 1,
             mul_52: 1,
             add_41: 1,
             mul_55: 1,
             mul_53: 1,
             mul_54: 1,
             add_40: 1,
             relu_6: 1,
             add_42: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_20', index=c0, size=(128, 784)), MemoryDep(name='buf59', index=c0, size=(100352,)), MemoryDep(name='primals_82', index=c0, size=(128,)), MemoryDep(name='primals_23', index=c0, size=(128, 784)), MemoryDep(name='primals_85', index=c0, size=(128,)), MemoryDep(name='primals_21', index=c0, size=(128, 784)), MemoryDep(name='buf54', index=c0, size=(128, 784)), MemoryDep(name='buf52', index=c0, size=(100352,)), MemoryDep(name='primals_24', index=c0, size=(128, 784)), MemoryDep(name='buf61', index=c0, size=(128, 784))}, writes={MemoryDep(name='buf58', index=c0, size=(128,)), MemoryDep(name='buf66', index=c0, size=(100352,)), MemoryDep(name='buf56', index=c0, size=(128,)), MemoryDep(name='buf62', index=c0, size=(128,)), MemoryDep(name='buf62', index=c0, size=(128, 784)), MemoryDep(name='buf65', index=c0, size=(128,)), MemoryDep(name='buf55', index=c0, size=(128,)), MemoryDep(name='buf55', index=c0, size=(128, 784)), MemoryDep(name='buf63', index=c0, size=(128,)), MemoryDep(name='buf67', index=c0, size=(100352,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf55'),
            SchedulerNode(name='buf62'),
            SchedulerNode(name='buf66'),
            SchedulerNode(name='buf67'),
            SchedulerNode(name='buf56'),
            SchedulerNode(name='buf58'),
            SchedulerNode(name='buf63'),
            SchedulerNode(name='buf65')],
 'unmet_dependencies': {MemoryDep(name='buf52', index=c0, size=(100352,)),
                        MemoryDep(name='buf54', index=c0, size=(128, 784)),
                        MemoryDep(name='buf59', index=c0, size=(100352,)),
                        MemoryDep(name='buf61', index=c0, size=(128, 784))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf69', 'buf73', 'buf70'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'max_order': 73,
 'min_order': 69,
 'node': None,
 'origins': {add_45: 1, mul_58: 1, var_mean_8: 2, mul_57: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_87', index=c0, size=(128,)), MemoryDep(name='buf68', index=c0, size=(100352,))}, writes={MemoryDep(name='buf73', index=c0, size=(128,)), MemoryDep(name='buf70', index=c0, size=(128,)), MemoryDep(name='buf69', index=c0, size=(128,)), MemoryDep(name='buf69', index=c0, size=(128, 784))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf69'),
            SchedulerNode(name='buf70'),
            SchedulerNode(name='buf73')],
 'unmet_dependencies': {MemoryDep(name='buf68', index=c0, size=(100352,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf71', 'buf72', 'buf74', 'buf75'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'max_order': 75,
 'min_order': 71,
 'node': None,
 'origins': {sub_8: 1,
             mul_60: 1,
             add_44: 2,
             var_mean_8: 3,
             add_46: 1,
             rsqrt_8: 2,
             mul_61: 1,
             squeeze_25: 1,
             mul_56: 1,
             relu_7: 1,
             add_47: 1,
             mul_62: 1,
             mul_59: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_88', index=c0, size=(128,)), MemoryDep(name='primals_27', index=c0, size=(128, 784)), MemoryDep(name='buf70', index=c0, size=(128, 784)), MemoryDep(name='buf68', index=c0, size=(100352,)), MemoryDep(name='primals_26', index=c0, size=(128, 784))}, writes={MemoryDep(name='buf75', index=c0, size=(100352,)), MemoryDep(name='buf71', index=c0, size=(128,)), MemoryDep(name='buf74', index=c0, size=(128,)), MemoryDep(name='buf72', index=c0, size=(128,)), MemoryDep(name='buf71', index=c0, size=(128, 784))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf71'),
            SchedulerNode(name='buf75'),
            SchedulerNode(name='buf72'),
            SchedulerNode(name='buf74')],
 'unmet_dependencies': {MemoryDep(name='buf68', index=c0, size=(100352,)),
                        MemoryDep(name='buf70', index=c0, size=(128, 784))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf77', 'buf78', 'buf81'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'max_order': 81,
 'min_order': 77,
 'node': None,
 'origins': {add_50: 1, mul_64: 1, mul_65: 1, var_mean_9: 2},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_90', index=c0, size=(128,)), MemoryDep(name='buf76', index=c0, size=(100352,))}, writes={MemoryDep(name='buf81', index=c0, size=(128,)), MemoryDep(name='buf77', index=c0, size=(128,)), MemoryDep(name='buf77', index=c0, size=(128, 784)), MemoryDep(name='buf78', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf77'),
            SchedulerNode(name='buf78'),
            SchedulerNode(name='buf81')],
 'unmet_dependencies': {MemoryDep(name='buf76', index=c0, size=(100352,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf79', 'buf83', 'buf82', 'buf80'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'max_order': 83,
 'min_order': 79,
 'node': None,
 'origins': {relu_8: 1,
             add_53: 1,
             mul_69: 1,
             squeeze_28: 1,
             mul_67: 1,
             add_52: 1,
             mul_66: 1,
             mul_68: 1,
             mul_63: 1,
             add_49: 2,
             add_51: 1,
             rsqrt_9: 2,
             var_mean_9: 3,
             sub_9: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_30', index=c0, size=(128, 784)), MemoryDep(name='primals_91', index=c0, size=(128,)), MemoryDep(name='primals_29', index=c0, size=(128, 784)), MemoryDep(name='buf76', index=c0, size=(100352,)), MemoryDep(name='buf67', index=c0, size=(100352,)), MemoryDep(name='buf78', index=c0, size=(128, 784))}, writes={MemoryDep(name='buf79', index=c0, size=(128, 784)), MemoryDep(name='buf80', index=c0, size=(128,)), MemoryDep(name='buf82', index=c0, size=(128,)), MemoryDep(name='buf83', index=c0, size=(100352,)), MemoryDep(name='buf79', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf79'),
            SchedulerNode(name='buf83'),
            SchedulerNode(name='buf80'),
            SchedulerNode(name='buf82')],
 'unmet_dependencies': {MemoryDep(name='buf67', index=c0, size=(100352,)),
                        MemoryDep(name='buf76', index=c0, size=(100352,)),
                        MemoryDep(name='buf78', index=c0, size=(128, 784))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf3', 'buf2', 'buf7'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 2)),
 'inverse_users': [],
 'max_order': 7,
 'min_order': 2,
 'node': None,
 'origins': {mul_2: 1, mul_1: 1, add_2: 1, var_mean: 2},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_63', index=c0, size=(64,)), MemoryDep(name='buf1', index=c0, size=(128,))}, writes={MemoryDep(name='buf3', index=c0, size=(64,)), MemoryDep(name='buf2', index=c0, size=(64, 2)), MemoryDep(name='buf2', index=c0, size=(64,)), MemoryDep(name='buf7', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf3', 'buf1', 'buf2', 'buf0'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf2'),
            SchedulerNode(name='buf3'),
            SchedulerNode(name='buf7')],
 'unmet_dependencies': {MemoryDep(name='buf1', index=c0, size=(128,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf8', 'buf6', 'buf5'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 2)),
 'inverse_users': [],
 'max_order': 8,
 'min_order': 5,
 'node': None,
 'origins': {mul_3: 1,
             add_3: 1,
             mul_4: 1,
             squeeze_1: 1,
             mul_5: 1,
             add_1: 1,
             rsqrt: 1,
             var_mean: 2},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf4', index=c0, size=(128,)), MemoryDep(name='primals_64', index=c0, size=(64,))}, writes={MemoryDep(name='buf5', index=c0, size=(64,)), MemoryDep(name='buf8', index=c0, size=(64,)), MemoryDep(name='buf5', index=c0, size=(64, 2)), MemoryDep(name='buf6', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf5', 'buf3', 'buf1', 'buf2', 'buf4', 'buf0'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf5'),
            SchedulerNode(name='buf6'),
            SchedulerNode(name='buf8')],
 'unmet_dependencies': {MemoryDep(name='buf4', index=c0, size=(128,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf13', 'buf14', 'buf17'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 3136)),
 'inverse_users': [],
 'max_order': 17,
 'min_order': 13,
 'node': None,
 'origins': {mul_8: 1, mul_9: 1, add_7: 1, var_mean_1: 2},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_66', index=c0, size=(64,)), MemoryDep(name='buf12', index=c0, size=(200704,))}, writes={MemoryDep(name='buf14', index=c0, size=(64,)), MemoryDep(name='buf13', index=c0, size=(64, 3136)), MemoryDep(name='buf17', index=c0, size=(64,)), MemoryDep(name='buf13', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf2',
                            'buf3',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf13'),
            SchedulerNode(name='buf14'),
            SchedulerNode(name='buf17')],
 'unmet_dependencies': {MemoryDep(name='buf12', index=c0, size=(200704,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf16', 'buf19', 'buf18', 'buf15'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 3136)),
 'inverse_users': [],
 'max_order': 19,
 'min_order': 15,
 'node': None,
 'origins': {mul_12: 1,
             add_9: 1,
             mul_11: 1,
             mul_10: 1,
             squeeze_4: 1,
             mul_13: 1,
             relu_1: 1,
             add_8: 1,
             rsqrt_1: 2,
             add_6: 2,
             var_mean_1: 3,
             sub_1: 1,
             mul_7: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf14', index=c0, size=(64, 3136)), MemoryDep(name='primals_5', index=c0, size=(64, 3136)), MemoryDep(name='primals_6', index=c0, size=(64, 3136)), MemoryDep(name='primals_67', index=c0, size=(64,)), MemoryDep(name='buf12', index=c0, size=(200704,))}, writes={MemoryDep(name='buf15', index=c0, size=(64,)), MemoryDep(name='buf15', index=c0, size=(64, 3136)), MemoryDep(name='buf16', index=c0, size=(64,)), MemoryDep(name='buf19', index=c0, size=(200704,)), MemoryDep(name='buf18', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf2',
                            'buf3',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf15'),
            SchedulerNode(name='buf19'),
            SchedulerNode(name='buf16'),
            SchedulerNode(name='buf18')],
 'unmet_dependencies': {MemoryDep(name='buf12', index=c0, size=(200704,)),
                        MemoryDep(name='buf14', index=c0, size=(64, 3136))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf22', 'buf21', 'buf25'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 3136)),
 'inverse_users': [],
 'max_order': 25,
 'min_order': 21,
 'node': None,
 'origins': {mul_16: 1, var_mean_2: 2, mul_15: 1, add_12: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf20', index=c0, size=(200704,)), MemoryDep(name='primals_69', index=c0, size=(64,))}, writes={MemoryDep(name='buf25', index=c0, size=(64,)), MemoryDep(name='buf21', index=c0, size=(64, 3136)), MemoryDep(name='buf21', index=c0, size=(64,)), MemoryDep(name='buf22', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf3',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf21'),
            SchedulerNode(name='buf22'),
            SchedulerNode(name='buf25')],
 'unmet_dependencies': {MemoryDep(name='buf20', index=c0, size=(200704,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf26', 'buf24', 'buf27', 'buf23'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 3136)),
 'inverse_users': [],
 'max_order': 27,
 'min_order': 23,
 'node': None,
 'origins': {add_13: 1,
             mul_18: 1,
             add_15: 1,
             mul_19: 1,
             mul_20: 1,
             relu_2: 1,
             add_14: 1,
             mul_14: 1,
             sub_2: 1,
             add_11: 2,
             var_mean_2: 3,
             rsqrt_2: 2,
             mul_17: 1,
             squeeze_7: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_70', index=c0, size=(64,)), MemoryDep(name='buf20', index=c0, size=(200704,)), MemoryDep(name='primals_9', index=c0, size=(64, 3136)), MemoryDep(name='buf10', index=c0, size=(200704,)), MemoryDep(name='buf22', index=c0, size=(64, 3136)), MemoryDep(name='primals_8', index=c0, size=(64, 3136))}, writes={MemoryDep(name='buf27', index=c0, size=(200704,)), MemoryDep(name='buf24', index=c0, size=(64,)), MemoryDep(name='buf23', index=c0, size=(64, 3136)), MemoryDep(name='buf26', index=c0, size=(64,)), MemoryDep(name='buf23', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf3',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf23'),
            SchedulerNode(name='buf27'),
            SchedulerNode(name='buf24'),
            SchedulerNode(name='buf26')],
 'unmet_dependencies': {MemoryDep(name='buf10', index=c0, size=(200704,)),
                        MemoryDep(name='buf20', index=c0, size=(200704,)),
                        MemoryDep(name='buf22', index=c0, size=(64, 3136))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf29', 'buf30', 'buf33'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 3136)),
 'inverse_users': [],
 'max_order': 33,
 'min_order': 29,
 'node': None,
 'origins': {mul_23: 1, mul_22: 1, add_18: 1, var_mean_3: 2},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_72', index=c0, size=(64,)), MemoryDep(name='buf28', index=c0, size=(200704,))}, writes={MemoryDep(name='buf29', index=c0, size=(64,)), MemoryDep(name='buf30', index=c0, size=(64,)), MemoryDep(name='buf33', index=c0, size=(64,)), MemoryDep(name='buf29', index=c0, size=(64, 3136))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf29'),
            SchedulerNode(name='buf30'),
            SchedulerNode(name='buf33')],
 'unmet_dependencies': {MemoryDep(name='buf28', index=c0, size=(200704,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf31', 'buf35', 'buf32', 'buf34'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 3136)),
 'inverse_users': [],
 'max_order': 35,
 'min_order': 31,
 'node': None,
 'origins': {relu_3: 1,
             add_20: 1,
             mul_27: 1,
             mul_25: 1,
             mul_26: 1,
             mul_24: 1,
             mul_21: 1,
             add_17: 2,
             add_19: 1,
             var_mean_3: 3,
             squeeze_10: 1,
             rsqrt_3: 2,
             sub_3: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf28', index=c0, size=(200704,)), MemoryDep(name='primals_11', index=c0, size=(64, 3136)), MemoryDep(name='primals_12', index=c0, size=(64, 3136)), MemoryDep(name='primals_73', index=c0, size=(64,)), MemoryDep(name='buf30', index=c0, size=(64, 3136))}, writes={MemoryDep(name='buf31', index=c0, size=(64, 3136)), MemoryDep(name='buf35', index=c0, size=(200704,)), MemoryDep(name='buf32', index=c0, size=(64,)), MemoryDep(name='buf31', index=c0, size=(64,)), MemoryDep(name='buf34', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf31'),
            SchedulerNode(name='buf35'),
            SchedulerNode(name='buf32'),
            SchedulerNode(name='buf34')],
 'unmet_dependencies': {MemoryDep(name='buf28', index=c0, size=(200704,)),
                        MemoryDep(name='buf30', index=c0, size=(64, 3136))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf38', 'buf41', 'buf37'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 3136)),
 'inverse_users': [],
 'max_order': 41,
 'min_order': 37,
 'node': None,
 'origins': {mul_29: 1, var_mean_4: 2, mul_30: 1, add_23: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf36', index=c0, size=(200704,)), MemoryDep(name='primals_75', index=c0, size=(64,))}, writes={MemoryDep(name='buf41', index=c0, size=(64,)), MemoryDep(name='buf38', index=c0, size=(64,)), MemoryDep(name='buf37', index=c0, size=(64, 3136)), MemoryDep(name='buf37', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf37'),
            SchedulerNode(name='buf38'),
            SchedulerNode(name='buf41')],
 'unmet_dependencies': {MemoryDep(name='buf36', index=c0, size=(200704,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf39', 'buf40', 'buf43', 'buf42'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 3136)),
 'inverse_users': [],
 'max_order': 43,
 'min_order': 39,
 'node': None,
 'origins': {add_25: 1,
             squeeze_13: 1,
             add_26: 1,
             mul_32: 1,
             add_24: 1,
             rsqrt_4: 2,
             mul_34: 1,
             mul_33: 1,
             mul_31: 1,
             relu_4: 1,
             var_mean_4: 3,
             add_22: 2,
             mul_28: 1,
             sub_4: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf27', index=c0, size=(200704,)), MemoryDep(name='primals_76', index=c0, size=(64,)), MemoryDep(name='buf38', index=c0, size=(64, 3136)), MemoryDep(name='primals_15', index=c0, size=(64, 3136)), MemoryDep(name='buf36', index=c0, size=(200704,)), MemoryDep(name='primals_14', index=c0, size=(64, 3136))}, writes={MemoryDep(name='buf39', index=c0, size=(64,)), MemoryDep(name='buf40', index=c0, size=(64,)), MemoryDep(name='buf39', index=c0, size=(64, 3136)), MemoryDep(name='buf43', index=c0, size=(200704,)), MemoryDep(name='buf42', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf39'),
            SchedulerNode(name='buf43'),
            SchedulerNode(name='buf40'),
            SchedulerNode(name='buf42')],
 'unmet_dependencies': {MemoryDep(name='buf27', index=c0, size=(200704,)),
                        MemoryDep(name='buf36', index=c0, size=(200704,)),
                        MemoryDep(name='buf38', index=c0, size=(64, 3136))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf13',
                       'buf14',
                       'buf15',
                       'buf16',
                       'buf17',
                       'buf18',
                       'buf19'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 3136)),
 'inverse_users': [],
 'max_order': 19,
 'min_order': 13,
 'node': None,
 'origins': {mul_8: 1,
             mul_12: 1,
             add_9: 1,
             mul_11: 1,
             mul_10: 1,
             squeeze_4: 1,
             mul_13: 1,
             relu_1: 1,
             mul_9: 1,
             add_7: 1,
             add_8: 1,
             rsqrt_1: 2,
             add_6: 2,
             var_mean_1: 5,
             sub_1: 1,
             mul_7: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf14', index=c0, size=(64, 3136)), MemoryDep(name='primals_66', index=c0, size=(64,)), MemoryDep(name='primals_5', index=c0, size=(64, 3136)), MemoryDep(name='primals_6', index=c0, size=(64, 3136)), MemoryDep(name='primals_67', index=c0, size=(64,)), MemoryDep(name='buf12', index=c0, size=(200704,))}, writes={MemoryDep(name='buf15', index=c0, size=(64,)), MemoryDep(name='buf17', index=c0, size=(64,)), MemoryDep(name='buf19', index=c0, size=(200704,)), MemoryDep(name='buf18', index=c0, size=(64,)), MemoryDep(name='buf14', index=c0, size=(64,)), MemoryDep(name='buf13', index=c0, size=(64, 3136)), MemoryDep(name='buf16', index=c0, size=(64,)), MemoryDep(name='buf15', index=c0, size=(64, 3136)), MemoryDep(name='buf13', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf2',
                            'buf3',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf13'),
            SchedulerNode(name='buf14'),
            SchedulerNode(name='buf17'),
            SchedulerNode(name='buf15'),
            SchedulerNode(name='buf19'),
            SchedulerNode(name='buf16'),
            SchedulerNode(name='buf18')],
 'unmet_dependencies': {MemoryDep(name='buf12', index=c0, size=(200704,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf21',
                       'buf22',
                       'buf23',
                       'buf24',
                       'buf25',
                       'buf26',
                       'buf27'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 3136)),
 'inverse_users': [],
 'max_order': 27,
 'min_order': 21,
 'node': None,
 'origins': {add_13: 1,
             mul_18: 1,
             add_15: 1,
             mul_19: 1,
             mul_20: 1,
             relu_2: 1,
             add_14: 1,
             mul_16: 1,
             mul_14: 1,
             sub_2: 1,
             add_11: 2,
             var_mean_2: 5,
             mul_15: 1,
             add_12: 1,
             rsqrt_2: 2,
             mul_17: 1,
             squeeze_7: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_70', index=c0, size=(64,)), MemoryDep(name='buf20', index=c0, size=(200704,)), MemoryDep(name='primals_69', index=c0, size=(64,)), MemoryDep(name='primals_9', index=c0, size=(64, 3136)), MemoryDep(name='buf10', index=c0, size=(200704,)), MemoryDep(name='buf22', index=c0, size=(64, 3136)), MemoryDep(name='primals_8', index=c0, size=(64, 3136))}, writes={MemoryDep(name='buf27', index=c0, size=(200704,)), MemoryDep(name='buf21', index=c0, size=(64, 3136)), MemoryDep(name='buf24', index=c0, size=(64,)), MemoryDep(name='buf25', index=c0, size=(64,)), MemoryDep(name='buf22', index=c0, size=(64,)), MemoryDep(name='buf21', index=c0, size=(64,)), MemoryDep(name='buf23', index=c0, size=(64, 3136)), MemoryDep(name='buf26', index=c0, size=(64,)), MemoryDep(name='buf23', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf3',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf21'),
            SchedulerNode(name='buf22'),
            SchedulerNode(name='buf25'),
            SchedulerNode(name='buf23'),
            SchedulerNode(name='buf27'),
            SchedulerNode(name='buf24'),
            SchedulerNode(name='buf26')],
 'unmet_dependencies': {MemoryDep(name='buf10', index=c0, size=(200704,)),
                        MemoryDep(name='buf20', index=c0, size=(200704,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf29',
                       'buf30',
                       'buf31',
                       'buf32',
                       'buf33',
                       'buf34',
                       'buf35'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 3136)),
 'inverse_users': [],
 'max_order': 35,
 'min_order': 29,
 'node': None,
 'origins': {relu_3: 1,
             add_20: 1,
             mul_27: 1,
             mul_25: 1,
             mul_23: 1,
             mul_26: 1,
             mul_22: 1,
             mul_24: 1,
             mul_21: 1,
             add_17: 2,
             add_18: 1,
             add_19: 1,
             var_mean_3: 5,
             squeeze_10: 1,
             rsqrt_3: 2,
             sub_3: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf28', index=c0, size=(200704,)), MemoryDep(name='primals_11', index=c0, size=(64, 3136)), MemoryDep(name='primals_12', index=c0, size=(64, 3136)), MemoryDep(name='primals_73', index=c0, size=(64,)), MemoryDep(name='primals_72', index=c0, size=(64,)), MemoryDep(name='buf30', index=c0, size=(64, 3136))}, writes={MemoryDep(name='buf31', index=c0, size=(64, 3136)), MemoryDep(name='buf35', index=c0, size=(200704,)), MemoryDep(name='buf30', index=c0, size=(64,)), MemoryDep(name='buf29', index=c0, size=(64,)), MemoryDep(name='buf32', index=c0, size=(64,)), MemoryDep(name='buf31', index=c0, size=(64,)), MemoryDep(name='buf34', index=c0, size=(64,)), MemoryDep(name='buf33', index=c0, size=(64,)), MemoryDep(name='buf29', index=c0, size=(64, 3136))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf29'),
            SchedulerNode(name='buf30'),
            SchedulerNode(name='buf33'),
            SchedulerNode(name='buf31'),
            SchedulerNode(name='buf35'),
            SchedulerNode(name='buf32'),
            SchedulerNode(name='buf34')],
 'unmet_dependencies': {MemoryDep(name='buf28', index=c0, size=(200704,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf37',
                       'buf38',
                       'buf39',
                       'buf40',
                       'buf41',
                       'buf42',
                       'buf43'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 3136)),
 'inverse_users': [],
 'max_order': 43,
 'min_order': 37,
 'node': None,
 'origins': {add_25: 1,
             squeeze_13: 1,
             add_26: 1,
             mul_32: 1,
             add_24: 1,
             mul_29: 1,
             rsqrt_4: 2,
             mul_34: 1,
             mul_33: 1,
             mul_31: 1,
             relu_4: 1,
             var_mean_4: 5,
             add_22: 2,
             mul_30: 1,
             mul_28: 1,
             sub_4: 1,
             add_23: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf27', index=c0, size=(200704,)), MemoryDep(name='primals_75', index=c0, size=(64,)), MemoryDep(name='primals_76', index=c0, size=(64,)), MemoryDep(name='buf38', index=c0, size=(64, 3136)), MemoryDep(name='primals_15', index=c0, size=(64, 3136)), MemoryDep(name='buf36', index=c0, size=(200704,)), MemoryDep(name='primals_14', index=c0, size=(64, 3136))}, writes={MemoryDep(name='buf41', index=c0, size=(64,)), MemoryDep(name='buf39', index=c0, size=(64,)), MemoryDep(name='buf38', index=c0, size=(64,)), MemoryDep(name='buf37', index=c0, size=(64, 3136)), MemoryDep(name='buf43', index=c0, size=(200704,)), MemoryDep(name='buf37', index=c0, size=(64,)), MemoryDep(name='buf40', index=c0, size=(64,)), MemoryDep(name='buf39', index=c0, size=(64, 3136)), MemoryDep(name='buf42', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf37'),
            SchedulerNode(name='buf38'),
            SchedulerNode(name='buf41'),
            SchedulerNode(name='buf39'),
            SchedulerNode(name='buf43'),
            SchedulerNode(name='buf40'),
            SchedulerNode(name='buf42')],
 'unmet_dependencies': {MemoryDep(name='buf27', index=c0, size=(200704,)),
                        MemoryDep(name='buf36', index=c0, size=(200704,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf45',
                       'buf46',
                       'buf47',
                       'buf48',
                       'buf49',
                       'buf50',
                       'buf51'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'max_order': 51,
 'min_order': 45,
 'node': None,
 'origins': {relu_5: 1,
             mul_38: 1,
             squeeze_16: 1,
             mul_39: 1,
             mul_35: 1,
             mul_41: 1,
             add_31: 1,
             add_30: 1,
             add_28: 2,
             mul_37: 1,
             mul_40: 1,
             add_29: 1,
             rsqrt_5: 2,
             sub_5: 1,
             mul_36: 1,
             var_mean_5: 5},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_17', index=c0, size=(128, 784)), MemoryDep(name='buf44', index=c0, size=(100352,)), MemoryDep(name='buf46', index=c0, size=(128, 784)), MemoryDep(name='primals_78', index=c0, size=(128,)), MemoryDep(name='primals_79', index=c0, size=(128,)), MemoryDep(name='primals_18', index=c0, size=(128, 784))}, writes={MemoryDep(name='buf45', index=c0, size=(128,)), MemoryDep(name='buf47', index=c0, size=(128, 784)), MemoryDep(name='buf50', index=c0, size=(128,)), MemoryDep(name='buf46', index=c0, size=(128,)), MemoryDep(name='buf48', index=c0, size=(128,)), MemoryDep(name='buf51', index=c0, size=(100352,)), MemoryDep(name='buf49', index=c0, size=(128,)), MemoryDep(name='buf45', index=c0, size=(128, 784)), MemoryDep(name='buf47', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf45'),
            SchedulerNode(name='buf46'),
            SchedulerNode(name='buf49'),
            SchedulerNode(name='buf47'),
            SchedulerNode(name='buf51'),
            SchedulerNode(name='buf48'),
            SchedulerNode(name='buf50')],
 'unmet_dependencies': {MemoryDep(name='buf44', index=c0, size=(100352,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf69',
                       'buf70',
                       'buf71',
                       'buf72',
                       'buf73',
                       'buf74',
                       'buf75'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'max_order': 75,
 'min_order': 69,
 'node': None,
 'origins': {sub_8: 1,
             mul_60: 1,
             add_45: 1,
             add_44: 2,
             mul_58: 1,
             var_mean_8: 5,
             add_46: 1,
             rsqrt_8: 2,
             mul_61: 1,
             squeeze_25: 1,
             mul_57: 1,
             mul_56: 1,
             relu_7: 1,
             add_47: 1,
             mul_62: 1,
             mul_59: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_88', index=c0, size=(128,)), MemoryDep(name='primals_27', index=c0, size=(128, 784)), MemoryDep(name='primals_87', index=c0, size=(128,)), MemoryDep(name='buf70', index=c0, size=(128, 784)), MemoryDep(name='buf68', index=c0, size=(100352,)), MemoryDep(name='primals_26', index=c0, size=(128, 784))}, writes={MemoryDep(name='buf71', index=c0, size=(128,)), MemoryDep(name='buf74', index=c0, size=(128,)), MemoryDep(name='buf73', index=c0, size=(128,)), MemoryDep(name='buf75', index=c0, size=(100352,)), MemoryDep(name='buf70', index=c0, size=(128,)), MemoryDep(name='buf69', index=c0, size=(128, 784)), MemoryDep(name='buf72', index=c0, size=(128,)), MemoryDep(name='buf69', index=c0, size=(128,)), MemoryDep(name='buf71', index=c0, size=(128, 784))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf69'),
            SchedulerNode(name='buf70'),
            SchedulerNode(name='buf73'),
            SchedulerNode(name='buf71'),
            SchedulerNode(name='buf75'),
            SchedulerNode(name='buf72'),
            SchedulerNode(name='buf74')],
 'unmet_dependencies': {MemoryDep(name='buf68', index=c0, size=(100352,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf77',
                       'buf78',
                       'buf79',
                       'buf80',
                       'buf81',
                       'buf82',
                       'buf83'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'max_order': 83,
 'min_order': 77,
 'node': None,
 'origins': {relu_8: 1,
             add_53: 1,
             mul_69: 1,
             squeeze_28: 1,
             mul_67: 1,
             add_52: 1,
             mul_66: 1,
             add_50: 1,
             mul_68: 1,
             mul_63: 1,
             add_49: 2,
             mul_64: 1,
             add_51: 1,
             rsqrt_9: 2,
             mul_65: 1,
             var_mean_9: 5,
             sub_9: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_30', index=c0, size=(128, 784)), MemoryDep(name='primals_91', index=c0, size=(128,)), MemoryDep(name='primals_29', index=c0, size=(128, 784)), MemoryDep(name='buf76', index=c0, size=(100352,)), MemoryDep(name='primals_90', index=c0, size=(128,)), MemoryDep(name='buf67', index=c0, size=(100352,)), MemoryDep(name='buf78', index=c0, size=(128, 784))}, writes={MemoryDep(name='buf79', index=c0, size=(128, 784)), MemoryDep(name='buf80', index=c0, size=(128,)), MemoryDep(name='buf82', index=c0, size=(128,)), MemoryDep(name='buf77', index=c0, size=(128,)), MemoryDep(name='buf77', index=c0, size=(128, 784)), MemoryDep(name='buf81', index=c0, size=(128,)), MemoryDep(name='buf83', index=c0, size=(100352,)), MemoryDep(name='buf78', index=c0, size=(128,)), MemoryDep(name='buf79', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf77'),
            SchedulerNode(name='buf78'),
            SchedulerNode(name='buf81'),
            SchedulerNode(name='buf79'),
            SchedulerNode(name='buf83'),
            SchedulerNode(name='buf80'),
            SchedulerNode(name='buf82')],
 'unmet_dependencies': {MemoryDep(name='buf67', index=c0, size=(100352,)),
                        MemoryDep(name='buf76', index=c0, size=(100352,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf55',
                       'buf56',
                       'buf58',
                       'buf60',
                       'buf61',
                       'buf62',
                       'buf63',
                       'buf64',
                       'buf65',
                       'buf66',
                       'buf67'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'max_order': 67,
 'min_order': 55,
 'node': None,
 'origins': {rsqrt_7: 2,
             add_38: 2,
             var_mean_7: 5,
             squeeze_22: 1,
             mul_49: 1,
             mul_50: 1,
             sub_7: 1,
             add_35: 1,
             mul_42: 1,
             rsqrt_6: 2,
             sub_6: 1,
             var_mean_6: 3,
             squeeze_19: 1,
             mul_48: 1,
             add_36: 1,
             mul_47: 1,
             add_33: 2,
             mul_45: 1,
             mul_46: 1,
             mul_52: 1,
             add_41: 1,
             mul_55: 1,
             mul_51: 1,
             mul_53: 1,
             mul_54: 1,
             add_40: 1,
             relu_6: 1,
             add_39: 1,
             add_42: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_20', index=c0, size=(128, 784)), MemoryDep(name='buf59', index=c0, size=(100352,)), MemoryDep(name='primals_82', index=c0, size=(128,)), MemoryDep(name='primals_23', index=c0, size=(128, 784)), MemoryDep(name='primals_84', index=c0, size=(128,)), MemoryDep(name='primals_85', index=c0, size=(128,)), MemoryDep(name='primals_21', index=c0, size=(128, 784)), MemoryDep(name='buf54', index=c0, size=(128, 784)), MemoryDep(name='buf52', index=c0, size=(100352,)), MemoryDep(name='primals_24', index=c0, size=(128, 784)), MemoryDep(name='buf61', index=c0, size=(128, 784))}, writes={MemoryDep(name='buf58', index=c0, size=(128,)), MemoryDep(name='buf64', index=c0, size=(128,)), MemoryDep(name='buf66', index=c0, size=(100352,)), MemoryDep(name='buf56', index=c0, size=(128,)), MemoryDep(name='buf62', index=c0, size=(128,)), MemoryDep(name='buf62', index=c0, size=(128, 784)), MemoryDep(name='buf65', index=c0, size=(128,)), MemoryDep(name='buf55', index=c0, size=(128,)), MemoryDep(name='buf55', index=c0, size=(128, 784)), MemoryDep(name='buf61', index=c0, size=(128,)), MemoryDep(name='buf60', index=c0, size=(128,)), MemoryDep(name='buf60', index=c0, size=(128, 784)), MemoryDep(name='buf63', index=c0, size=(128,)), MemoryDep(name='buf67', index=c0, size=(100352,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf60'),
            SchedulerNode(name='buf61'),
            SchedulerNode(name='buf64'),
            SchedulerNode(name='buf55'),
            SchedulerNode(name='buf62'),
            SchedulerNode(name='buf66'),
            SchedulerNode(name='buf67'),
            SchedulerNode(name='buf56'),
            SchedulerNode(name='buf58'),
            SchedulerNode(name='buf63'),
            SchedulerNode(name='buf65')],
 'unmet_dependencies': {MemoryDep(name='buf52', index=c0, size=(100352,)),
                        MemoryDep(name='buf54', index=c0, size=(128, 784)),
                        MemoryDep(name='buf59', index=c0, size=(100352,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf53',
                       'buf54',
                       'buf55',
                       'buf56',
                       'buf57',
                       'buf58',
                       'buf60',
                       'buf61',
                       'buf62',
                       'buf63',
                       'buf64',
                       'buf65',
                       'buf66',
                       'buf67'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'max_order': 67,
 'min_order': 53,
 'node': None,
 'origins': {rsqrt_7: 2,
             add_38: 2,
             var_mean_7: 5,
             squeeze_22: 1,
             mul_49: 1,
             mul_50: 1,
             sub_7: 1,
             add_35: 1,
             mul_42: 1,
             add_34: 1,
             rsqrt_6: 2,
             sub_6: 1,
             mul_44: 1,
             var_mean_6: 5,
             squeeze_19: 1,
             mul_48: 1,
             mul_43: 1,
             add_36: 1,
             mul_47: 1,
             add_33: 2,
             mul_45: 1,
             mul_46: 1,
             mul_52: 1,
             add_41: 1,
             mul_55: 1,
             mul_51: 1,
             mul_53: 1,
             mul_54: 1,
             add_40: 1,
             relu_6: 1,
             add_39: 1,
             add_42: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_20', index=c0, size=(128, 784)), MemoryDep(name='buf59', index=c0, size=(100352,)), MemoryDep(name='primals_82', index=c0, size=(128,)), MemoryDep(name='primals_23', index=c0, size=(128, 784)), MemoryDep(name='primals_84', index=c0, size=(128,)), MemoryDep(name='primals_81', index=c0, size=(128,)), MemoryDep(name='primals_85', index=c0, size=(128,)), MemoryDep(name='primals_21', index=c0, size=(128, 784)), MemoryDep(name='buf54', index=c0, size=(128, 784)), MemoryDep(name='buf52', index=c0, size=(100352,)), MemoryDep(name='primals_24', index=c0, size=(128, 784)), MemoryDep(name='buf61', index=c0, size=(128, 784))}, writes={MemoryDep(name='buf53', index=c0, size=(128,)), MemoryDep(name='buf62', index=c0, size=(128, 784)), MemoryDep(name='buf55', index=c0, size=(128, 784)), MemoryDep(name='buf60', index=c0, size=(128,)), MemoryDep(name='buf63', index=c0, size=(128,)), MemoryDep(name='buf67', index=c0, size=(100352,)), MemoryDep(name='buf58', index=c0, size=(128,)), MemoryDep(name='buf64', index=c0, size=(128,)), MemoryDep(name='buf57', index=c0, size=(128,)), MemoryDep(name='buf53', index=c0, size=(128, 784)), MemoryDep(name='buf66', index=c0, size=(100352,)), MemoryDep(name='buf56', index=c0, size=(128,)), MemoryDep(name='buf62', index=c0, size=(128,)), MemoryDep(name='buf54', index=c0, size=(128,)), MemoryDep(name='buf65', index=c0, size=(128,)), MemoryDep(name='buf55', index=c0, size=(128,)), MemoryDep(name='buf61', index=c0, size=(128,)), MemoryDep(name='buf60', index=c0, size=(128, 784))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf53'),
            SchedulerNode(name='buf54'),
            SchedulerNode(name='buf57'),
            SchedulerNode(name='buf60'),
            SchedulerNode(name='buf61'),
            SchedulerNode(name='buf64'),
            SchedulerNode(name='buf55'),
            SchedulerNode(name='buf62'),
            SchedulerNode(name='buf66'),
            SchedulerNode(name='buf67'),
            SchedulerNode(name='buf56'),
            SchedulerNode(name='buf58'),
            SchedulerNode(name='buf63'),
            SchedulerNode(name='buf65')],
 'unmet_dependencies': {MemoryDep(name='buf52', index=c0, size=(100352,)),
                        MemoryDep(name='buf59', index=c0, size=(100352,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf85',
                       'buf86',
                       'buf87',
                       'buf88',
                       'buf89',
                       'buf90',
                       'buf91'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'max_order': 91,
 'min_order': 85,
 'node': None,
 'origins': {var_mean_10: 5,
             add_55: 2,
             sub_10: 1,
             mul_72: 1,
             add_56: 1,
             mul_74: 1,
             mul_70: 1,
             add_57: 1,
             rsqrt_10: 2,
             mul_71: 1,
             mul_75: 1,
             squeeze_31: 1,
             mul_73: 1,
             relu_9: 1,
             add_58: 1,
             mul_76: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_32', index=c0, size=(256, 196)), MemoryDep(name='buf84', index=c0, size=(50176,)), MemoryDep(name='primals_33', index=c0, size=(256, 196)), MemoryDep(name='buf86', index=c0, size=(256, 196)), MemoryDep(name='primals_94', index=c0, size=(256,)), MemoryDep(name='primals_93', index=c0, size=(256,))}, writes={MemoryDep(name='buf86', index=c0, size=(256,)), MemoryDep(name='buf88', index=c0, size=(256,)), MemoryDep(name='buf87', index=c0, size=(256,)), MemoryDep(name='buf85', index=c0, size=(256,)), MemoryDep(name='buf89', index=c0, size=(256,)), MemoryDep(name='buf90', index=c0, size=(256,)), MemoryDep(name='buf91', index=c0, size=(50176,)), MemoryDep(name='buf87', index=c0, size=(256, 196)), MemoryDep(name='buf85', index=c0, size=(256, 196))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf85'),
            SchedulerNode(name='buf86'),
            SchedulerNode(name='buf89'),
            SchedulerNode(name='buf87'),
            SchedulerNode(name='buf91'),
            SchedulerNode(name='buf88'),
            SchedulerNode(name='buf90')],
 'unmet_dependencies': {MemoryDep(name='buf84', index=c0, size=(50176,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf109',
                       'buf110',
                       'buf111',
                       'buf112',
                       'buf113',
                       'buf114',
                       'buf115'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'max_order': 115,
 'min_order': 109,
 'node': None,
 'origins': {sub_13: 1,
             mul_95: 1,
             add_72: 1,
             mul_93: 1,
             add_71: 2,
             var_mean_13: 5,
             rsqrt_13: 2,
             add_73: 1,
             mul_92: 1,
             squeeze_40: 1,
             mul_91: 1,
             mul_96: 1,
             mul_94: 1,
             mul_97: 1,
             add_74: 1,
             relu_11: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf108', index=c0, size=(50176,)), MemoryDep(name='buf110', index=c0, size=(256, 196)), MemoryDep(name='primals_42', index=c0, size=(256, 196)), MemoryDep(name='primals_103', index=c0, size=(256,)), MemoryDep(name='primals_102', index=c0, size=(256,)), MemoryDep(name='primals_41', index=c0, size=(256, 196))}, writes={MemoryDep(name='buf114', index=c0, size=(256,)), MemoryDep(name='buf109', index=c0, size=(256, 196)), MemoryDep(name='buf111', index=c0, size=(256, 196)), MemoryDep(name='buf112', index=c0, size=(256,)), MemoryDep(name='buf110', index=c0, size=(256,)), MemoryDep(name='buf109', index=c0, size=(256,)), MemoryDep(name='buf113', index=c0, size=(256,)), MemoryDep(name='buf111', index=c0, size=(256,)), MemoryDep(name='buf115', index=c0, size=(50176,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf109'),
            SchedulerNode(name='buf110'),
            SchedulerNode(name='buf113'),
            SchedulerNode(name='buf111'),
            SchedulerNode(name='buf115'),
            SchedulerNode(name='buf112'),
            SchedulerNode(name='buf114')],
 'unmet_dependencies': {MemoryDep(name='buf108', index=c0, size=(50176,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf117',
                       'buf118',
                       'buf119',
                       'buf120',
                       'buf121',
                       'buf122',
                       'buf123'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'max_order': 123,
 'min_order': 117,
 'node': None,
 'origins': {add_79: 1,
             mul_104: 1,
             add_80: 1,
             relu_12: 1,
             mul_103: 1,
             sub_14: 1,
             var_mean_14: 5,
             mul_101: 1,
             add_76: 2,
             squeeze_43: 1,
             mul_99: 1,
             rsqrt_14: 2,
             mul_98: 1,
             add_78: 1,
             mul_102: 1,
             add_77: 1,
             mul_100: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_105', index=c0, size=(256,)), MemoryDep(name='buf107', index=c0, size=(50176,)), MemoryDep(name='primals_106', index=c0, size=(256,)), MemoryDep(name='buf118', index=c0, size=(256, 196)), MemoryDep(name='primals_45', index=c0, size=(256, 196)), MemoryDep(name='primals_44', index=c0, size=(256, 196)), MemoryDep(name='buf116', index=c0, size=(50176,))}, writes={MemoryDep(name='buf119', index=c0, size=(256,)), MemoryDep(name='buf117', index=c0, size=(256, 196)), MemoryDep(name='buf123', index=c0, size=(50176,)), MemoryDep(name='buf120', index=c0, size=(256,)), MemoryDep(name='buf122', index=c0, size=(256,)), MemoryDep(name='buf117', index=c0, size=(256,)), MemoryDep(name='buf119', index=c0, size=(256, 196)), MemoryDep(name='buf121', index=c0, size=(256,)), MemoryDep(name='buf118', index=c0, size=(256,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf117'),
            SchedulerNode(name='buf118'),
            SchedulerNode(name='buf121'),
            SchedulerNode(name='buf119'),
            SchedulerNode(name='buf123'),
            SchedulerNode(name='buf120'),
            SchedulerNode(name='buf122')],
 'unmet_dependencies': {MemoryDep(name='buf107', index=c0, size=(50176,)),
                        MemoryDep(name='buf116', index=c0, size=(50176,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf100',
                       'buf101',
                       'buf102',
                       'buf103',
                       'buf104',
                       'buf105',
                       'buf106',
                       'buf107',
                       'buf95',
                       'buf96',
                       'buf98'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'max_order': 107,
 'min_order': 95,
 'node': None,
 'origins': {add_67: 1,
             mul_88: 1,
             mul_85: 1,
             squeeze_37: 1,
             mul_89: 1,
             mul_87: 1,
             mul_90: 1,
             add_68: 1,
             add_66: 1,
             mul_86: 1,
             relu_10: 1,
             add_69: 1,
             mul_81: 1,
             sub_11: 1,
             add_60: 2,
             mul_77: 1,
             var_mean_11: 3,
             add_65: 2,
             squeeze_34: 1,
             mul_82: 1,
             add_62: 1,
             rsqrt_11: 2,
             mul_84: 1,
             mul_83: 1,
             add_63: 1,
             mul_80: 1,
             rsqrt_12: 2,
             sub_12: 1,
             var_mean_12: 5},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_97', index=c0, size=(256,)), MemoryDep(name='primals_100', index=c0, size=(256,)), MemoryDep(name='primals_39', index=c0, size=(256, 196)), MemoryDep(name='buf99', index=c0, size=(50176,)), MemoryDep(name='primals_36', index=c0, size=(256, 196)), MemoryDep(name='primals_99', index=c0, size=(256,)), MemoryDep(name='buf101', index=c0, size=(256, 196)), MemoryDep(name='buf92', index=c0, size=(50176,)), MemoryDep(name='buf94', index=c0, size=(256, 196)), MemoryDep(name='primals_35', index=c0, size=(256, 196)), MemoryDep(name='primals_38', index=c0, size=(256, 196))}, writes={MemoryDep(name='buf104', index=c0, size=(256,)), MemoryDep(name='buf102', index=c0, size=(256,)), MemoryDep(name='buf107', index=c0, size=(50176,)), MemoryDep(name='buf100', index=c0, size=(256,)), MemoryDep(name='buf95', index=c0, size=(256,)), MemoryDep(name='buf106', index=c0, size=(50176,)), MemoryDep(name='buf103', index=c0, size=(256,)), MemoryDep(name='buf105', index=c0, size=(256,)), MemoryDep(name='buf98', index=c0, size=(256,)), MemoryDep(name='buf96', index=c0, size=(256,)), MemoryDep(name='buf102', index=c0, size=(256, 196)), MemoryDep(name='buf100', index=c0, size=(256, 196)), MemoryDep(name='buf95', index=c0, size=(256, 196)), MemoryDep(name='buf101', index=c0, size=(256,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf100'),
            SchedulerNode(name='buf101'),
            SchedulerNode(name='buf104'),
            SchedulerNode(name='buf95'),
            SchedulerNode(name='buf102'),
            SchedulerNode(name='buf106'),
            SchedulerNode(name='buf107'),
            SchedulerNode(name='buf96'),
            SchedulerNode(name='buf98'),
            SchedulerNode(name='buf103'),
            SchedulerNode(name='buf105')],
 'unmet_dependencies': {MemoryDep(name='buf92', index=c0, size=(50176,)),
                        MemoryDep(name='buf94', index=c0, size=(256, 196)),
                        MemoryDep(name='buf99', index=c0, size=(50176,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf100',
                       'buf101',
                       'buf102',
                       'buf103',
                       'buf104',
                       'buf105',
                       'buf106',
                       'buf107',
                       'buf93',
                       'buf94',
                       'buf95',
                       'buf96',
                       'buf97',
                       'buf98'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'max_order': 107,
 'min_order': 93,
 'node': None,
 'origins': {add_67: 1,
             mul_88: 1,
             mul_85: 1,
             squeeze_37: 1,
             mul_89: 1,
             mul_87: 1,
             mul_90: 1,
             add_68: 1,
             add_66: 1,
             mul_86: 1,
             relu_10: 1,
             add_69: 1,
             mul_81: 1,
             add_61: 1,
             sub_11: 1,
             mul_79: 1,
             add_60: 2,
             mul_77: 1,
             var_mean_11: 5,
             add_65: 2,
             squeeze_34: 1,
             mul_78: 1,
             mul_82: 1,
             add_62: 1,
             rsqrt_11: 2,
             mul_84: 1,
             mul_83: 1,
             add_63: 1,
             mul_80: 1,
             rsqrt_12: 2,
             sub_12: 1,
             var_mean_12: 5},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_97', index=c0, size=(256,)), MemoryDep(name='primals_100', index=c0, size=(256,)), MemoryDep(name='primals_39', index=c0, size=(256, 196)), MemoryDep(name='primals_96', index=c0, size=(256,)), MemoryDep(name='buf99', index=c0, size=(50176,)), MemoryDep(name='primals_36', index=c0, size=(256, 196)), MemoryDep(name='primals_99', index=c0, size=(256,)), MemoryDep(name='buf101', index=c0, size=(256, 196)), MemoryDep(name='buf92', index=c0, size=(50176,)), MemoryDep(name='buf94', index=c0, size=(256, 196)), MemoryDep(name='primals_35', index=c0, size=(256, 196)), MemoryDep(name='primals_38', index=c0, size=(256, 196))}, writes={MemoryDep(name='buf102', index=c0, size=(256,)), MemoryDep(name='buf95', index=c0, size=(256,)), MemoryDep(name='buf93', index=c0, size=(256,)), MemoryDep(name='buf105', index=c0, size=(256,)), MemoryDep(name='buf100', index=c0, size=(256, 196)), MemoryDep(name='buf101', index=c0, size=(256,)), MemoryDep(name='buf104', index=c0, size=(256,)), MemoryDep(name='buf107', index=c0, size=(50176,)), MemoryDep(name='buf100', index=c0, size=(256,)), MemoryDep(name='buf94', index=c0, size=(256,)), MemoryDep(name='buf97', index=c0, size=(256,)), MemoryDep(name='buf106', index=c0, size=(50176,)), MemoryDep(name='buf103', index=c0, size=(256,)), MemoryDep(name='buf98', index=c0, size=(256,)), MemoryDep(name='buf96', index=c0, size=(256,)), MemoryDep(name='buf102', index=c0, size=(256, 196)), MemoryDep(name='buf95', index=c0, size=(256, 196)), MemoryDep(name='buf93', index=c0, size=(256, 196))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf93'),
            SchedulerNode(name='buf94'),
            SchedulerNode(name='buf97'),
            SchedulerNode(name='buf100'),
            SchedulerNode(name='buf101'),
            SchedulerNode(name='buf104'),
            SchedulerNode(name='buf95'),
            SchedulerNode(name='buf102'),
            SchedulerNode(name='buf106'),
            SchedulerNode(name='buf107'),
            SchedulerNode(name='buf96'),
            SchedulerNode(name='buf98'),
            SchedulerNode(name='buf103'),
            SchedulerNode(name='buf105')],
 'unmet_dependencies': {MemoryDep(name='buf92', index=c0, size=(50176,)),
                        MemoryDep(name='buf99', index=c0, size=(50176,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf125',
                       'buf126',
                       'buf127',
                       'buf128',
                       'buf129',
                       'buf130',
                       'buf131'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 131,
 'min_order': 125,
 'node': None,
 'origins': {add_83: 1,
             mul_109: 1,
             sub_15: 1,
             add_82: 2,
             mul_107: 1,
             var_mean_15: 5,
             add_84: 1,
             rsqrt_15: 2,
             mul_110: 1,
             squeeze_46: 1,
             mul_106: 1,
             mul_105: 1,
             relu_13: 1,
             add_85: 1,
             mul_111: 1,
             mul_108: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_48', index=c0, size=(512, 49)), MemoryDep(name='buf126', index=c0, size=(512, 49)), MemoryDep(name='primals_47', index=c0, size=(512, 49)), MemoryDep(name='primals_108', index=c0, size=(512,)), MemoryDep(name='buf124', index=c0, size=(25088,)), MemoryDep(name='primals_109', index=c0, size=(512,))}, writes={MemoryDep(name='buf125', index=c0, size=(512,)), MemoryDep(name='buf127', index=c0, size=(512,)), MemoryDep(name='buf131', index=c0, size=(25088,)), MemoryDep(name='buf129', index=c0, size=(512,)), MemoryDep(name='buf126', index=c0, size=(512,)), MemoryDep(name='buf125', index=c0, size=(512, 49)), MemoryDep(name='buf127', index=c0, size=(512, 49)), MemoryDep(name='buf128', index=c0, size=(512,)), MemoryDep(name='buf130', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf125'),
            SchedulerNode(name='buf126'),
            SchedulerNode(name='buf129'),
            SchedulerNode(name='buf127'),
            SchedulerNode(name='buf131'),
            SchedulerNode(name='buf128'),
            SchedulerNode(name='buf130')],
 'unmet_dependencies': {MemoryDep(name='buf124', index=c0, size=(25088,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf149',
                       'buf150',
                       'buf151',
                       'buf152',
                       'buf153',
                       'buf154',
                       'buf155'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 155,
 'min_order': 149,
 'node': None,
 'origins': {sub_18: 1,
             add_99: 1,
             mul_130: 1,
             var_mean_18: 5,
             add_100: 1,
             rsqrt_18: 2,
             mul_128: 1,
             add_98: 2,
             mul_126: 1,
             squeeze_55: 1,
             mul_132: 1,
             mul_129: 1,
             mul_127: 1,
             add_101: 1,
             mul_131: 1,
             relu_15: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf148', index=c0, size=(25088,)), MemoryDep(name='primals_57', index=c0, size=(512, 49)), MemoryDep(name='primals_117', index=c0, size=(512,)), MemoryDep(name='primals_56', index=c0, size=(512, 49)), MemoryDep(name='primals_118', index=c0, size=(512,)), MemoryDep(name='buf150', index=c0, size=(512, 49))}, writes={MemoryDep(name='buf151', index=c0, size=(512,)), MemoryDep(name='buf149', index=c0, size=(512, 49)), MemoryDep(name='buf150', index=c0, size=(512,)), MemoryDep(name='buf149', index=c0, size=(512,)), MemoryDep(name='buf153', index=c0, size=(512,)), MemoryDep(name='buf151', index=c0, size=(512, 49)), MemoryDep(name='buf152', index=c0, size=(512,)), MemoryDep(name='buf155', index=c0, size=(25088,)), MemoryDep(name='buf154', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf147',
                            'buf148',
                            'buf149',
                            'buf15',
                            'buf150',
                            'buf151',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf149'),
            SchedulerNode(name='buf150'),
            SchedulerNode(name='buf153'),
            SchedulerNode(name='buf151'),
            SchedulerNode(name='buf155'),
            SchedulerNode(name='buf152'),
            SchedulerNode(name='buf154')],
 'unmet_dependencies': {MemoryDep(name='buf148', index=c0, size=(25088,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf135',
                       'buf136',
                       'buf138',
                       'buf140',
                       'buf141',
                       'buf142',
                       'buf143',
                       'buf144',
                       'buf145',
                       'buf146',
                       'buf147'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 147,
 'min_order': 135,
 'node': None,
 'origins': {mul_116: 1,
             sub_16: 1,
             add_92: 2,
             var_mean_16: 3,
             rsqrt_16: 2,
             mul_118: 1,
             add_87: 2,
             var_mean_17: 5,
             mul_112: 1,
             add_89: 1,
             add_90: 1,
             mul_117: 1,
             squeeze_49: 1,
             mul_115: 1,
             mul_123: 1,
             mul_119: 1,
             add_94: 1,
             mul_121: 1,
             rsqrt_17: 2,
             mul_120: 1,
             mul_124: 1,
             squeeze_52: 1,
             mul_122: 1,
             mul_125: 1,
             relu_14: 1,
             add_96: 1,
             add_95: 1,
             sub_17: 1,
             add_93: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_50', index=c0, size=(512, 49)), MemoryDep(name='primals_54', index=c0, size=(512, 49)), MemoryDep(name='buf139', index=c0, size=(25088,)), MemoryDep(name='buf141', index=c0, size=(512, 49)), MemoryDep(name='primals_53', index=c0, size=(512, 49)), MemoryDep(name='primals_115', index=c0, size=(512,)), MemoryDep(name='buf134', index=c0, size=(512, 49)), MemoryDep(name='primals_112', index=c0, size=(512,)), MemoryDep(name='buf132', index=c0, size=(25088,)), MemoryDep(name='primals_114', index=c0, size=(512,)), MemoryDep(name='primals_51', index=c0, size=(512, 49))}, writes={MemoryDep(name='buf146', index=c0, size=(25088,)), MemoryDep(name='buf135', index=c0, size=(512, 49)), MemoryDep(name='buf145', index=c0, size=(512,)), MemoryDep(name='buf147', index=c0, size=(25088,)), MemoryDep(name='buf144', index=c0, size=(512,)), MemoryDep(name='buf142', index=c0, size=(512, 49)), MemoryDep(name='buf143', index=c0, size=(512,)), MemoryDep(name='buf140', index=c0, size=(512, 49)), MemoryDep(name='buf135', index=c0, size=(512,)), MemoryDep(name='buf141', index=c0, size=(512,)), MemoryDep(name='buf138', index=c0, size=(512,)), MemoryDep(name='buf142', index=c0, size=(512,)), MemoryDep(name='buf136', index=c0, size=(512,)), MemoryDep(name='buf140', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf140'),
            SchedulerNode(name='buf141'),
            SchedulerNode(name='buf144'),
            SchedulerNode(name='buf135'),
            SchedulerNode(name='buf142'),
            SchedulerNode(name='buf146'),
            SchedulerNode(name='buf147'),
            SchedulerNode(name='buf136'),
            SchedulerNode(name='buf138'),
            SchedulerNode(name='buf143'),
            SchedulerNode(name='buf145')],
 'unmet_dependencies': {MemoryDep(name='buf132', index=c0, size=(25088,)),
                        MemoryDep(name='buf134', index=c0, size=(512, 49)),
                        MemoryDep(name='buf139', index=c0, size=(25088,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf157',
                       'buf158',
                       'buf159',
                       'buf160',
                       'buf161',
                       'buf162',
                       'buf163',
                       'buf164',
                       'buf165',
                       'buf167'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 167,
 'min_order': 157,
 'node': None,
 'origins': {le: 1,
             view: 1,
             relu_16: 1,
             add_107: 1,
             mul_139: 1,
             mul_136: 1,
             add_106: 1,
             mul_138: 1,
             mul_137: 1,
             mean: 2,
             add_105: 1,
             mul_134: 1,
             mul_135: 1,
             sub_19: 1,
             mul_133: 1,
             var_mean_19: 5,
             add_103: 2,
             add_104: 1,
             squeeze_58: 1,
             rsqrt_19: 2},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf147', index=c0, size=(25088,)), MemoryDep(name='buf156', index=c0, size=(25088,)), MemoryDep(name='primals_120', index=c0, size=(512,)), MemoryDep(name='primals_59', index=c0, size=(512, 49)), MemoryDep(name='primals_60', index=c0, size=(512, 49)), MemoryDep(name='primals_121', index=c0, size=(512,)), MemoryDep(name='buf158', index=c0, size=(512, 49))}, writes={MemoryDep(name='buf165', index=c0, size=(512,)), MemoryDep(name='buf157', index=c0, size=(512,)), MemoryDep(name='buf159', index=c0, size=(512, 49)), MemoryDep(name='buf164', index=c0, size=(512, 49)), MemoryDep(name='buf158', index=c0, size=(512,)), MemoryDep(name='buf167', index=c0, size=(25088,)), MemoryDep(name='buf160', index=c0, size=(512,)), MemoryDep(name='buf157', index=c0, size=(512, 49)), MemoryDep(name='buf159', index=c0, size=(512,)), MemoryDep(name='buf163', index=c0, size=(25088,)), MemoryDep(name='buf161', index=c0, size=(512,)), MemoryDep(name='buf162', index=c0, size=(512,)), MemoryDep(name='buf164', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf147',
                            'buf148',
                            'buf149',
                            'buf15',
                            'buf150',
                            'buf151',
                            'buf155',
                            'buf156',
                            'buf157',
                            'buf158',
                            'buf159',
                            'buf163',
                            'buf164',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf157'),
            SchedulerNode(name='buf158'),
            SchedulerNode(name='buf161'),
            SchedulerNode(name='buf159'),
            SchedulerNode(name='buf163'),
            SchedulerNode(name='buf167'),
            SchedulerNode(name='buf164'),
            SchedulerNode(name='buf160'),
            SchedulerNode(name='buf162'),
            SchedulerNode(name='buf165')],
 'unmet_dependencies': {MemoryDep(name='buf147', index=c0, size=(25088,)),
                        MemoryDep(name='buf156', index=c0, size=(25088,))},
 'users': None}

Done fusedschedulernode-----------------------

Init fusedschedulernode-----------------------
{'__get_names_cache': {'buf133',
                       'buf134',
                       'buf135',
                       'buf136',
                       'buf137',
                       'buf138',
                       'buf140',
                       'buf141',
                       'buf142',
                       'buf143',
                       'buf144',
                       'buf145',
                       'buf146',
                       'buf147'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'max_order': 147,
 'min_order': 133,
 'node': None,
 'origins': {mul_116: 1,
             sub_16: 1,
             add_92: 2,
             var_mean_16: 5,
             mul_114: 1,
             rsqrt_16: 2,
             mul_118: 1,
             add_87: 2,
             add_88: 1,
             var_mean_17: 5,
             mul_112: 1,
             add_89: 1,
             add_90: 1,
             mul_117: 1,
             squeeze_49: 1,
             mul_113: 1,
             mul_115: 1,
             mul_123: 1,
             mul_119: 1,
             add_94: 1,
             mul_121: 1,
             rsqrt_17: 2,
             mul_120: 1,
             mul_124: 1,
             squeeze_52: 1,
             mul_122: 1,
             mul_125: 1,
             relu_14: 1,
             add_96: 1,
             add_95: 1,
             sub_17: 1,
             add_93: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_50', index=c0, size=(512, 49)), MemoryDep(name='primals_54', index=c0, size=(512, 49)), MemoryDep(name='buf139', index=c0, size=(25088,)), MemoryDep(name='buf141', index=c0, size=(512, 49)), MemoryDep(name='primals_111', index=c0, size=(512,)), MemoryDep(name='primals_53', index=c0, size=(512, 49)), MemoryDep(name='primals_115', index=c0, size=(512,)), MemoryDep(name='buf134', index=c0, size=(512, 49)), MemoryDep(name='primals_112', index=c0, size=(512,)), MemoryDep(name='buf132', index=c0, size=(25088,)), MemoryDep(name='primals_114', index=c0, size=(512,)), MemoryDep(name='primals_51', index=c0, size=(512, 49))}, writes={MemoryDep(name='buf135', index=c0, size=(512, 49)), MemoryDep(name='buf147', index=c0, size=(25088,)), MemoryDep(name='buf137', index=c0, size=(512,)), MemoryDep(name='buf140', index=c0, size=(512, 49)), MemoryDep(name='buf141', index=c0, size=(512,)), MemoryDep(name='buf142', index=c0, size=(512,)), MemoryDep(name='buf133', index=c0, size=(512,)), MemoryDep(name='buf146', index=c0, size=(25088,)), MemoryDep(name='buf134', index=c0, size=(512,)), MemoryDep(name='buf145', index=c0, size=(512,)), MemoryDep(name='buf144', index=c0, size=(512,)), MemoryDep(name='buf142', index=c0, size=(512, 49)), MemoryDep(name='buf133', index=c0, size=(512, 49)), MemoryDep(name='buf143', index=c0, size=(512,)), MemoryDep(name='buf135', index=c0, size=(512,)), MemoryDep(name='buf138', index=c0, size=(512,)), MemoryDep(name='buf136', index=c0, size=(512,)), MemoryDep(name='buf140', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf133'),
            SchedulerNode(name='buf134'),
            SchedulerNode(name='buf137'),
            SchedulerNode(name='buf140'),
            SchedulerNode(name='buf141'),
            SchedulerNode(name='buf144'),
            SchedulerNode(name='buf135'),
            SchedulerNode(name='buf142'),
            SchedulerNode(name='buf146'),
            SchedulerNode(name='buf147'),
            SchedulerNode(name='buf136'),
            SchedulerNode(name='buf138'),
            SchedulerNode(name='buf143'),
            SchedulerNode(name='buf145')],
 'unmet_dependencies': {MemoryDep(name='buf132', index=c0, size=(25088,)),
                        MemoryDep(name='buf139', index=c0, size=(25088,))},
 'users': None}

Done fusedschedulernode-----------------------

New nodes after processing-----------------------

Node------
<class 'torch._inductor.scheduler.ExternKernelSchedulerNode'>
{'flops': 236027904,
 'inverse_users': [],
 'last_usage': set(),
 'max_order': 0,
 'min_order': 0,
 'node': ExternKernelAlloc(name='buf0', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 112, 112], stride=[802816, 12544, 112, 1]), inputs=[InputBuffer(name='primals_123', layout=FixedLayout('cuda', torch.float32, size=[1, 3, 224, 224], stride=[150528, 50176, 224, 1])), InputBuffer(name='primals_1', layout=FixedLayout('cuda', torch.float32, size=[64, 3, 7, 7], stride=[147, 49, 7, 1]))], constant_args=(), kwargs={'stride': (2, 2), 'padding': (3, 3), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None}, output_view=None),
 'origins': {convolution},
 'read_writes': ReadWrites(reads={StarDep(name='primals_123'), StarDep(name='primals_1')}, writes={StarDep(name='buf0')}, index_exprs=set(), range_vars=[], var_ranges=None),
 'recursive_predecessors': set(),
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': set(),
 'users': [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf4'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf9'), can_inplace=True),
           NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807db41f0>,
 '_sizes': ([128], [6272]),
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 6272)),
 'inverse_users': [ExternKernelSchedulerNode(name='buf0')],
 'last_usage': set(),
 'max_order': 1,
 'min_order': 1,
 'node': ComputedBuffer(name='buf1', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1, 2], stride=[128, 2, 128, 128, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _, i4 = index
      r0 = rindex
      tmp0 = ops.load(buf0, 112 * ModularIndexing(r0 + 6272 * i4, 112, 112) + 12544 * i1 + ModularIndexing(r0, 1, 112))
      return tmp0
  ,
  ranges=[1, 64, 1, 1, 2],
  reduction_ranges=[6272],
  reduction_type=sum,
  origins={var_mean}
)),
 'origins': {var_mean},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf0', index=c0, size=(802816,))}, writes={MemoryDep(name='buf1', index=c0, size=(128, 6272)), MemoryDep(name='buf1', index=c0, size=(128,))}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict([(d0, 128), (d1, 6272)])),
 'recursive_predecessors': {'buf0'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {MemoryDep(name='buf0', index=c0, size=(802816,))},
 'users': [NodeUser(node=SchedulerNode(name='buf2'), can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.FusedSchedulerNode'>
{'__get_name_cache': 'buf2_buf3_buf7',
 '__get_names_cache': {'buf3', 'buf2', 'buf7'},
 '__is_reduction_cache': True,
 '__is_template_cache': False,
 '__used_buffer_names_cache': {'buf7', 'buf3', 'buf1', 'buf2', 'primals_63'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 2)),
 'inverse_users': [],
 'last_usage': {'buf1', 'buf2', 'primals_63'},
 'max_order': 7,
 'min_order': 2,
 'node': None,
 'origins': {mul_2: 1, mul_1: 1, add_2: 1, var_mean: 2},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_63', index=c0, size=(64,)), MemoryDep(name='buf1', index=c0, size=(128,))}, writes={MemoryDep(name='buf3', index=c0, size=(64,)), MemoryDep(name='buf2', index=c0, size=(64, 2)), MemoryDep(name='buf2', index=c0, size=(64,)), MemoryDep(name='buf7', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf3', 'buf1', 'buf2', 'buf0'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf2'),
            SchedulerNode(name='buf3'),
            SchedulerNode(name='buf7')],
 'unmet_dependencies': {MemoryDep(name='buf1', index=c0, size=(128,))},
 'users': None}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807d6f430>,
 '_sizes': ([64, 2], [6272]),
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 6272)),
 'inverse_users': [ExternKernelSchedulerNode(name='buf0'),
                   SchedulerNode(name='buf3')],
 'last_usage': set(),
 'max_order': 4,
 'min_order': 4,
 'node': ComputedBuffer(name='buf4', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 1, 1, 2], stride=[128, 2, 128, 128, 1]), data=Reduction(
  'cuda',
  torch.float32,
  def inner_fn(index, rindex):
      _, i1, _, _, i4 = index
      r0 = rindex
      tmp0 = ops.load(buf0, 112 * ModularIndexing(r0 + 6272 * i4, 112, 112) + 12544 * i1 + ModularIndexing(r0, 1, 112))
      tmp1 = ops.load(buf3, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.square(tmp2)
      return tmp3
  ,
  ranges=[1, 64, 1, 1, 2],
  reduction_ranges=[6272],
  reduction_type=sum,
  origins={var_mean}
)),
 'origins': {var_mean},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf0', index=c0, size=(802816,)), MemoryDep(name='buf3', index=c0, size=(64, 12544))}, writes={MemoryDep(name='buf4', index=c0, size=(128,)), MemoryDep(name='buf4', index=c0, size=(128, 6272))}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict([(d0, 64), (d1, 2), (d2, 6272)])),
 'recursive_predecessors': {'buf1', 'buf3', 'buf2', 'buf0'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {MemoryDep(name='buf0', index=c0, size=(802816,)),
                        MemoryDep(name='buf3', index=c0, size=(64, 12544))},
 'users': [NodeUser(node=SchedulerNode(name='buf5'), can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.FusedSchedulerNode'>
{'__get_name_cache': 'buf5_buf6_buf8',
 '__get_names_cache': {'buf8', 'buf6', 'buf5'},
 '__is_reduction_cache': True,
 '__is_template_cache': False,
 '__used_buffer_names_cache': {'buf5', 'buf8', 'buf6', 'primals_64', 'buf4'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 2)),
 'inverse_users': [],
 'last_usage': {'primals_64', 'buf4'},
 'max_order': 8,
 'min_order': 5,
 'node': None,
 'origins': {mul_3: 1,
             add_3: 1,
             mul_4: 1,
             squeeze_1: 1,
             mul_5: 1,
             add_1: 1,
             rsqrt: 1,
             var_mean: 2},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf4', index=c0, size=(128,)), MemoryDep(name='primals_64', index=c0, size=(64,))}, writes={MemoryDep(name='buf5', index=c0, size=(64,)), MemoryDep(name='buf8', index=c0, size=(64,)), MemoryDep(name='buf5', index=c0, size=(64, 2)), MemoryDep(name='buf6', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf5', 'buf3', 'buf1', 'buf2', 'buf4', 'buf0'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf5'),
            SchedulerNode(name='buf6'),
            SchedulerNode(name='buf8')],
 'unmet_dependencies': {MemoryDep(name='buf4', index=c0, size=(128,))},
 'users': None}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b085610d940>,
 '_sizes': ([64, 12544], []),
 'flops': 0,
 'group': (device(type='cuda', index=0), (802816, 1)),
 'inverse_users': [ExternKernelSchedulerNode(name='buf0'),
                   SchedulerNode(name='buf3'),
                   SchedulerNode(name='buf5')],
 'last_usage': {'primals_3', 'buf5'},
 'max_order': 9,
 'min_order': 9,
 'node': ComputedBuffer(name='buf9', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 112, 112], stride=[802816, 12544, 112, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf0, i3 + 112 * i2 + 12544 * i1)
      tmp1 = ops.load(buf3, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf5, i1)
      tmp4 = ops.index_expr(12544, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_2, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_3, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.relu(tmp13)
      return tmp14
  ,
  ranges=[1, 64, 112, 112],
  origins={var_mean, add_1, mul_6, rsqrt, add_4, mul, sub, relu}
)),
 'origins': {var_mean, add_1, mul_6, rsqrt, add_4, mul, sub, relu},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_2', index=c0, size=(64, 12544)), MemoryDep(name='primals_3', index=c0, size=(64, 12544)), MemoryDep(name='buf5', index=c0, size=(64, 12544)), MemoryDep(name='buf0', index=c0, size=(802816,)), MemoryDep(name='buf3', index=c0, size=(64, 12544))}, writes={MemoryDep(name='buf9', index=c0, size=(802816,))}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict([(d0, 64), (d1, 12544)])),
 'recursive_predecessors': {'buf5', 'buf3', 'buf1', 'buf2', 'buf4', 'buf0'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {MemoryDep(name='buf0', index=c0, size=(802816,)),
                        MemoryDep(name='buf3', index=c0, size=(64, 12544)),
                        MemoryDep(name='buf5', index=c0, size=(64, 12544))},
 'users': [NodeUser(node=SchedulerNode(name='buf10'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf11'), can_inplace=False),
           NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.FusedSchedulerNode'>
{'__get_name_cache': 'buf10_buf11',
 '__get_names_cache': {'buf11', 'buf10'},
 '__is_template_cache': False,
 '__used_buffer_names_cache': {'buf11', 'buf10', 'buf9'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (200704, 1)),
 'inverse_users': [],
 'last_usage': set(),
 'max_order': 11,
 'min_order': 10,
 'node': None,
 'origins': {getitem_3: 1, getitem_2: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf9', index=224*c0 + 2*c1 - 1, size=(3584, 56)), MemoryDep(name='buf9', index=224*c0 + 2*c1 - 111, size=(3584, 56)), MemoryDep(name='buf9', index=224*c0 + 2*c1 + 112, size=(3584, 56)), MemoryDep(name='buf9', index=224*c0 + 2*c1 - 112, size=(3584, 56)), MemoryDep(name='buf9', index=224*c0 + 2*c1 + 113, size=(3584, 56)), MemoryDep(name='buf9', index=224*c0 + 2*c1 + 111, size=(3584, 56)), MemoryDep(name='buf9', index=224*c0 + 2*c1, size=(3584, 56)), MemoryDep(name='buf9', index=224*c0 + 2*c1 + 1, size=(3584, 56)), MemoryDep(name='buf9', index=224*c0 + 2*c1 - 113, size=(3584, 56))}, writes={MemoryDep(name='buf10', index=c0, size=(200704,)), MemoryDep(name='buf11', index=c0, size=(200704,))}, index_exprs={IndexExprDep(index=224*c1 + 2*c2 + 112, size=(64, 56, 56)), IndexExprDep(index=2*c1, size=(64, 56, 56)), IndexExprDep(index=224*c1 + 2*c2 - 1, size=(64, 56, 56)), IndexExprDep(index=2*c1 + 1, size=(64, 56, 56)), IndexExprDep(index=2*c1, size=(3584, 56)), IndexExprDep(index=224*c1 + 2*c2 + 113, size=(64, 56, 56)), IndexExprDep(index=2*c1 + 1, size=(3584, 56)), IndexExprDep(index=224*c1 + 2*c2 - 113, size=(64, 56, 56)), IndexExprDep(index=2*c1 - 1, size=(64, 56, 56)), IndexExprDep(index=224*c1 + 2*c2, size=(64, 56, 56)), IndexExprDep(index=224*c1 + 2*c2 - 111, size=(64, 56, 56)), IndexExprDep(index=224*c1 + 2*c2 + 111, size=(64, 56, 56)), IndexExprDep(index=2*c1 - 1, size=(3584, 56)), IndexExprDep(index=224*c1 + 2*c2 + 1, size=(64, 56, 56)), IndexExprDep(index=224*c1 + 2*c2 - 112, size=(64, 56, 56))}, range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf2',
                            'buf3',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf10'), SchedulerNode(name='buf11')],
 'unmet_dependencies': {MemoryDep(name='buf9', index=224*c0 + 2*c1 - 113, size=(3584, 56)),
                        MemoryDep(name='buf9', index=224*c0 + 2*c1 - 112, size=(3584, 56)),
                        MemoryDep(name='buf9', index=224*c0 + 2*c1 - 111, size=(3584, 56)),
                        MemoryDep(name='buf9', index=224*c0 + 2*c1 - 1, size=(3584, 56)),
                        MemoryDep(name='buf9', index=224*c0 + 2*c1, size=(3584, 56)),
                        MemoryDep(name='buf9', index=224*c0 + 2*c1 + 1, size=(3584, 56)),
                        MemoryDep(name='buf9', index=224*c0 + 2*c1 + 111, size=(3584, 56)),
                        MemoryDep(name='buf9', index=224*c0 + 2*c1 + 112, size=(3584, 56)),
                        MemoryDep(name='buf9', index=224*c0 + 2*c1 + 113, size=(3584, 56))},
 'users': None}

Node------
<class 'torch._inductor.scheduler.ExternKernelSchedulerNode'>
{'flops': 236027904,
 'inverse_users': [SchedulerNode(name='buf10')],
 'last_usage': set(),
 'max_order': 12,
 'min_order': 12,
 'node': ExternKernelAlloc(name='buf12', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), inputs=[ComputedBuffer(name='buf10', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.index_expr(-1 + 2 * i2, torch.int64)
      tmp1 = ops.index_expr(0, torch.int64)
      tmp2 = tmp0 >= tmp1
      tmp3 = ops.index_expr(-1 + 2 * i2, torch.int64)
      tmp4 = ops.index_expr(112, torch.int64)
      tmp5 = tmp3 < tmp4
      tmp6 = tmp2 & tmp5
      tmp7 = ops.index_expr(-1 + 2 * i3, torch.int64)
      tmp8 = ops.index_expr(0, torch.int64)
      tmp9 = tmp7 >= tmp8
      tmp10 = ops.index_expr(-1 + 2 * i3, torch.int64)
      tmp11 = ops.index_expr(112, torch.int64)
      tmp12 = tmp10 < tmp11
      tmp13 = tmp9 & tmp12
      tmp14 = tmp6 & tmp13
      tmp15 = ops.load(buf9, -113 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp16 = ops.masked(tmp14, tmp15, -inf)
      tmp17 = ops.index_expr(-1 + 2 * i2, torch.int64)
      tmp18 = ops.index_expr(0, torch.int64)
      tmp19 = tmp17 >= tmp18
      tmp20 = ops.index_expr(-1 + 2 * i2, torch.int64)
      tmp21 = ops.index_expr(112, torch.int64)
      tmp22 = tmp20 < tmp21
      tmp23 = tmp19 & tmp22
      tmp24 = ops.index_expr(2 * i3, torch.int64)
      tmp25 = ops.index_expr(0, torch.int64)
      tmp26 = tmp24 >= tmp25
      tmp27 = ops.index_expr(2 * i3, torch.int64)
      tmp28 = ops.index_expr(112, torch.int64)
      tmp29 = tmp27 < tmp28
      tmp30 = tmp26 & tmp29
      tmp31 = tmp23 & tmp30
      tmp32 = ops.load(buf9, -112 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp33 = ops.masked(tmp31, tmp32, -inf)
      tmp34 = ops.maximum(tmp33, tmp16)
      tmp35 = ops.index_expr(-1 + 2 * i2, torch.int64)
      tmp36 = ops.index_expr(0, torch.int64)
      tmp37 = tmp35 >= tmp36
      tmp38 = ops.index_expr(-1 + 2 * i2, torch.int64)
      tmp39 = ops.index_expr(112, torch.int64)
      tmp40 = tmp38 < tmp39
      tmp41 = tmp37 & tmp40
      tmp42 = ops.index_expr(1 + 2 * i3, torch.int64)
      tmp43 = ops.index_expr(0, torch.int64)
      tmp44 = tmp42 >= tmp43
      tmp45 = ops.index_expr(1 + 2 * i3, torch.int64)
      tmp46 = ops.index_expr(112, torch.int64)
      tmp47 = tmp45 < tmp46
      tmp48 = tmp44 & tmp47
      tmp49 = tmp41 & tmp48
      tmp50 = ops.load(buf9, -111 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp51 = ops.masked(tmp49, tmp50, -inf)
      tmp52 = ops.maximum(tmp51, tmp34)
      tmp53 = ops.index_expr(2 * i2, torch.int64)
      tmp54 = ops.index_expr(0, torch.int64)
      tmp55 = tmp53 >= tmp54
      tmp56 = ops.index_expr(2 * i2, torch.int64)
      tmp57 = ops.index_expr(112, torch.int64)
      tmp58 = tmp56 < tmp57
      tmp59 = tmp55 & tmp58
      tmp60 = ops.index_expr(-1 + 2 * i3, torch.int64)
      tmp61 = ops.index_expr(0, torch.int64)
      tmp62 = tmp60 >= tmp61
      tmp63 = ops.index_expr(-1 + 2 * i3, torch.int64)
      tmp64 = ops.index_expr(112, torch.int64)
      tmp65 = tmp63 < tmp64
      tmp66 = tmp62 & tmp65
      tmp67 = tmp59 & tmp66
      tmp68 = ops.load(buf9, -1 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp69 = ops.masked(tmp67, tmp68, -inf)
      tmp70 = ops.maximum(tmp69, tmp52)
      tmp71 = ops.index_expr(2 * i2, torch.int64)
      tmp72 = ops.index_expr(0, torch.int64)
      tmp73 = tmp71 >= tmp72
      tmp74 = ops.index_expr(2 * i2, torch.int64)
      tmp75 = ops.index_expr(112, torch.int64)
      tmp76 = tmp74 < tmp75
      tmp77 = tmp73 & tmp76
      tmp78 = ops.index_expr(2 * i3, torch.int64)
      tmp79 = ops.index_expr(0, torch.int64)
      tmp80 = tmp78 >= tmp79
      tmp81 = ops.index_expr(2 * i3, torch.int64)
      tmp82 = ops.index_expr(112, torch.int64)
      tmp83 = tmp81 < tmp82
      tmp84 = tmp80 & tmp83
      tmp85 = tmp77 & tmp84
      tmp86 = ops.load(buf9, 2 * i3 + 224 * i2 + 12544 * i1)
      tmp87 = ops.masked(tmp85, tmp86, -inf)
      tmp88 = ops.maximum(tmp87, tmp70)
      tmp89 = ops.index_expr(2 * i2, torch.int64)
      tmp90 = ops.index_expr(0, torch.int64)
      tmp91 = tmp89 >= tmp90
      tmp92 = ops.index_expr(2 * i2, torch.int64)
      tmp93 = ops.index_expr(112, torch.int64)
      tmp94 = tmp92 < tmp93
      tmp95 = tmp91 & tmp94
      tmp96 = ops.index_expr(1 + 2 * i3, torch.int64)
      tmp97 = ops.index_expr(0, torch.int64)
      tmp98 = tmp96 >= tmp97
      tmp99 = ops.index_expr(1 + 2 * i3, torch.int64)
      tmp100 = ops.index_expr(112, torch.int64)
      tmp101 = tmp99 < tmp100
      tmp102 = tmp98 & tmp101
      tmp103 = tmp95 & tmp102
      tmp104 = ops.load(buf9, 1 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp105 = ops.masked(tmp103, tmp104, -inf)
      tmp106 = ops.maximum(tmp105, tmp88)
      tmp107 = ops.index_expr(1 + 2 * i2, torch.int64)
      tmp108 = ops.index_expr(0, torch.int64)
      tmp109 = tmp107 >= tmp108
      tmp110 = ops.index_expr(1 + 2 * i2, torch.int64)
      tmp111 = ops.index_expr(112, torch.int64)
      tmp112 = tmp110 < tmp111
      tmp113 = tmp109 & tmp112
      tmp114 = ops.index_expr(-1 + 2 * i3, torch.int64)
      tmp115 = ops.index_expr(0, torch.int64)
      tmp116 = tmp114 >= tmp115
      tmp117 = ops.index_expr(-1 + 2 * i3, torch.int64)
      tmp118 = ops.index_expr(112, torch.int64)
      tmp119 = tmp117 < tmp118
      tmp120 = tmp116 & tmp119
      tmp121 = tmp113 & tmp120
      tmp122 = ops.load(buf9, 111 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp123 = ops.masked(tmp121, tmp122, -inf)
      tmp124 = ops.maximum(tmp123, tmp106)
      tmp125 = ops.index_expr(1 + 2 * i2, torch.int64)
      tmp126 = ops.index_expr(0, torch.int64)
      tmp127 = tmp125 >= tmp126
      tmp128 = ops.index_expr(1 + 2 * i2, torch.int64)
      tmp129 = ops.index_expr(112, torch.int64)
      tmp130 = tmp128 < tmp129
      tmp131 = tmp127 & tmp130
      tmp132 = ops.index_expr(2 * i3, torch.int64)
      tmp133 = ops.index_expr(0, torch.int64)
      tmp134 = tmp132 >= tmp133
      tmp135 = ops.index_expr(2 * i3, torch.int64)
      tmp136 = ops.index_expr(112, torch.int64)
      tmp137 = tmp135 < tmp136
      tmp138 = tmp134 & tmp137
      tmp139 = tmp131 & tmp138
      tmp140 = ops.load(buf9, 112 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp141 = ops.masked(tmp139, tmp140, -inf)
      tmp142 = ops.maximum(tmp141, tmp124)
      tmp143 = ops.index_expr(1 + 2 * i2, torch.int64)
      tmp144 = ops.index_expr(0, torch.int64)
      tmp145 = tmp143 >= tmp144
      tmp146 = ops.index_expr(1 + 2 * i2, torch.int64)
      tmp147 = ops.index_expr(112, torch.int64)
      tmp148 = tmp146 < tmp147
      tmp149 = tmp145 & tmp148
      tmp150 = ops.index_expr(1 + 2 * i3, torch.int64)
      tmp151 = ops.index_expr(0, torch.int64)
      tmp152 = tmp150 >= tmp151
      tmp153 = ops.index_expr(1 + 2 * i3, torch.int64)
      tmp154 = ops.index_expr(112, torch.int64)
      tmp155 = tmp153 < tmp154
      tmp156 = tmp152 & tmp155
      tmp157 = tmp149 & tmp156
      tmp158 = ops.load(buf9, 113 + 2 * i3 + 224 * i2 + 12544 * i1)
      tmp159 = ops.masked(tmp157, tmp158, -inf)
      tmp160 = ops.maximum(tmp159, tmp142)
      return tmp160
  ,
  ranges=[1, 64, 56, 56],
  origins={getitem_2}
)), InputBuffer(name='primals_4', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))], constant_args=(), kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None}, output_view=None),
 'origins': {convolution_1},
 'read_writes': ReadWrites(reads={StarDep(name='primals_4'), StarDep(name='buf10')}, writes={StarDep(name='buf12')}, index_exprs=set(), range_vars=[], var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf2',
                            'buf3',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {StarDep(name='buf10')},
 'users': [NodeUser(node=SchedulerNode(name='buf13'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf15'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf19'), can_inplace=True),
           NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.FusedSchedulerNode'>
{'__get_name_cache': 'buf13_buf14_buf17_buf15_buf19_buf16_buf18',
 '__get_names_cache': {'buf13',
                       'buf14',
                       'buf15',
                       'buf16',
                       'buf17',
                       'buf18',
                       'buf19'},
 '__is_template_cache': False,
 '__used_buffer_names_cache': {'buf12',
                               'buf13',
                               'buf14',
                               'buf15',
                               'buf16',
                               'buf17',
                               'buf18',
                               'buf19',
                               'primals_5',
                               'primals_6',
                               'primals_66',
                               'primals_67'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 3136)),
 'inverse_users': [],
 'last_usage': {'buf13', 'primals_67', 'primals_66', 'primals_6', 'buf15'},
 'max_order': 19,
 'min_order': 13,
 'node': None,
 'origins': {mul_8: 1,
             mul_12: 1,
             add_9: 1,
             mul_11: 1,
             mul_10: 1,
             squeeze_4: 1,
             mul_13: 1,
             relu_1: 1,
             mul_9: 1,
             add_7: 1,
             add_8: 1,
             rsqrt_1: 2,
             add_6: 2,
             var_mean_1: 5,
             sub_1: 1,
             mul_7: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_5', index=c0, size=(64, 3136)), MemoryDep(name='primals_6', index=c0, size=(64, 3136)), MemoryDep(name='buf14', index=c0, size=(64, 3136)), MemoryDep(name='primals_66', index=c0, size=(64,)), MemoryDep(name='primals_67', index=c0, size=(64,)), MemoryDep(name='buf12', index=c0, size=(200704,))}, writes={MemoryDep(name='buf15', index=c0, size=(64,)), MemoryDep(name='buf17', index=c0, size=(64,)), MemoryDep(name='buf19', index=c0, size=(200704,)), MemoryDep(name='buf18', index=c0, size=(64,)), MemoryDep(name='buf14', index=c0, size=(64,)), MemoryDep(name='buf13', index=c0, size=(64, 3136)), MemoryDep(name='buf16', index=c0, size=(64,)), MemoryDep(name='buf15', index=c0, size=(64, 3136)), MemoryDep(name='buf13', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf2',
                            'buf3',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf13'),
            SchedulerNode(name='buf14'),
            SchedulerNode(name='buf17'),
            SchedulerNode(name='buf15'),
            SchedulerNode(name='buf19'),
            SchedulerNode(name='buf16'),
            SchedulerNode(name='buf18')],
 'unmet_dependencies': {MemoryDep(name='buf12', index=c0, size=(200704,)),
                        MemoryDep(name='buf14', index=c0, size=(64, 3136))},
 'users': None}

Node------
<class 'torch._inductor.scheduler.ExternKernelSchedulerNode'>
{'flops': 231211008,
 'inverse_users': [SchedulerNode(name='buf19')],
 'last_usage': set(),
 'max_order': 20,
 'min_order': 20,
 'node': ExternKernelAlloc(name='buf20', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), inputs=[ComputedBuffer(name='buf19', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf12, i3 + 56 * i2 + 3136 * i1)
      tmp1 = ops.load(buf14, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf15, i1)
      tmp4 = ops.index_expr(3136, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_5, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_6, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.relu(tmp13)
      return tmp14
  ,
  ranges=[1, 64, 56, 56],
  origins={relu_1, rsqrt_1, sub_1, add_6, mul_7, var_mean_1, mu...
)), InputBuffer(name='primals_7', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))], constant_args=(), kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None}, output_view=None),
 'origins': {convolution_2},
 'read_writes': ReadWrites(reads={StarDep(name='buf19'), StarDep(name='primals_7')}, writes={StarDep(name='buf20')}, index_exprs=set(), range_vars=[], var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf3',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {StarDep(name='buf19')},
 'users': [NodeUser(node=SchedulerNode(name='buf21'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf23'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf27'), can_inplace=True),
           NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.FusedSchedulerNode'>
{'__get_name_cache': 'buf21_buf22_buf25_buf23_buf27_buf24_buf26',
 '__get_names_cache': {'buf21',
                       'buf22',
                       'buf23',
                       'buf24',
                       'buf25',
                       'buf26',
                       'buf27'},
 '__is_template_cache': False,
 '__used_buffer_names_cache': {'buf10',
                               'buf20',
                               'buf21',
                               'buf22',
                               'buf23',
                               'buf24',
                               'buf25',
                               'buf26',
                               'buf27',
                               'primals_69',
                               'primals_70',
                               'primals_8',
                               'primals_9'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 3136)),
 'inverse_users': [],
 'last_usage': {'primals_9', 'buf23', 'primals_70', 'buf21', 'primals_69'},
 'max_order': 27,
 'min_order': 21,
 'node': None,
 'origins': {add_13: 1,
             mul_18: 1,
             add_15: 1,
             mul_19: 1,
             mul_20: 1,
             relu_2: 1,
             add_14: 1,
             mul_16: 1,
             mul_14: 1,
             sub_2: 1,
             add_11: 2,
             var_mean_2: 5,
             mul_15: 1,
             add_12: 1,
             rsqrt_2: 2,
             mul_17: 1,
             squeeze_7: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_9', index=c0, size=(64, 3136)), MemoryDep(name='primals_70', index=c0, size=(64,)), MemoryDep(name='buf20', index=c0, size=(200704,)), MemoryDep(name='primals_69', index=c0, size=(64,)), MemoryDep(name='buf10', index=c0, size=(200704,)), MemoryDep(name='buf22', index=c0, size=(64, 3136)), MemoryDep(name='primals_8', index=c0, size=(64, 3136))}, writes={MemoryDep(name='buf27', index=c0, size=(200704,)), MemoryDep(name='buf21', index=c0, size=(64, 3136)), MemoryDep(name='buf24', index=c0, size=(64,)), MemoryDep(name='buf25', index=c0, size=(64,)), MemoryDep(name='buf22', index=c0, size=(64,)), MemoryDep(name='buf21', index=c0, size=(64,)), MemoryDep(name='buf23', index=c0, size=(64, 3136)), MemoryDep(name='buf26', index=c0, size=(64,)), MemoryDep(name='buf23', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf3',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf21'),
            SchedulerNode(name='buf22'),
            SchedulerNode(name='buf25'),
            SchedulerNode(name='buf23'),
            SchedulerNode(name='buf27'),
            SchedulerNode(name='buf24'),
            SchedulerNode(name='buf26')],
 'unmet_dependencies': {MemoryDep(name='buf10', index=c0, size=(200704,)),
                        MemoryDep(name='buf20', index=c0, size=(200704,)),
                        MemoryDep(name='buf22', index=c0, size=(64, 3136))},
 'users': None}

Node------
<class 'torch._inductor.scheduler.ExternKernelSchedulerNode'>
{'flops': 231211008,
 'inverse_users': [SchedulerNode(name='buf27')],
 'last_usage': set(),
 'max_order': 28,
 'min_order': 28,
 'node': ExternKernelAlloc(name='buf28', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), inputs=[ComputedBuffer(name='buf27', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf20, i3 + 56 * i2 + 3136 * i1)
      tmp1 = ops.load(buf22, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf23, i1)
      tmp4 = ops.index_expr(3136, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_8, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_9, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.load(buf10, i3 + 56 * i2 + 3136 * i1)
      tmp15 = tmp13 + tmp14
      tmp16 = ops.relu(tmp15)
      return tmp16
  ,
  ranges=[1, 64, 56, 56],
  origins={add_11, add_15, mul_14, rsqrt_2, var_mean_2, mul_20,...
)), InputBuffer(name='primals_10', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))], constant_args=(), kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None}, output_view=None),
 'origins': {convolution_3},
 'read_writes': ReadWrites(reads={StarDep(name='buf27'), StarDep(name='primals_10')}, writes={StarDep(name='buf28')}, index_exprs=set(), range_vars=[], var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf3',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {StarDep(name='buf27')},
 'users': [NodeUser(node=SchedulerNode(name='buf29'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf31'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf35'), can_inplace=True),
           NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.FusedSchedulerNode'>
{'__get_name_cache': 'buf29_buf30_buf33_buf31_buf35_buf32_buf34',
 '__get_names_cache': {'buf29',
                       'buf30',
                       'buf31',
                       'buf32',
                       'buf33',
                       'buf34',
                       'buf35'},
 '__is_template_cache': False,
 '__used_buffer_names_cache': {'buf28',
                               'buf29',
                               'buf30',
                               'buf31',
                               'buf32',
                               'buf33',
                               'buf34',
                               'buf35',
                               'primals_11',
                               'primals_12',
                               'primals_72',
                               'primals_73'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 3136)),
 'inverse_users': [],
 'last_usage': {'buf31', 'buf29', 'primals_72', 'primals_12', 'primals_73'},
 'max_order': 35,
 'min_order': 29,
 'node': None,
 'origins': {relu_3: 1,
             add_20: 1,
             mul_27: 1,
             mul_25: 1,
             mul_23: 1,
             mul_26: 1,
             mul_22: 1,
             mul_24: 1,
             mul_21: 1,
             add_17: 2,
             add_18: 1,
             add_19: 1,
             var_mean_3: 5,
             squeeze_10: 1,
             rsqrt_3: 2,
             sub_3: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf30', index=c0, size=(64, 3136)), MemoryDep(name='buf28', index=c0, size=(200704,)), MemoryDep(name='primals_12', index=c0, size=(64, 3136)), MemoryDep(name='primals_73', index=c0, size=(64,)), MemoryDep(name='primals_72', index=c0, size=(64,)), MemoryDep(name='primals_11', index=c0, size=(64, 3136))}, writes={MemoryDep(name='buf31', index=c0, size=(64, 3136)), MemoryDep(name='buf35', index=c0, size=(200704,)), MemoryDep(name='buf30', index=c0, size=(64,)), MemoryDep(name='buf29', index=c0, size=(64,)), MemoryDep(name='buf32', index=c0, size=(64,)), MemoryDep(name='buf31', index=c0, size=(64,)), MemoryDep(name='buf34', index=c0, size=(64,)), MemoryDep(name='buf33', index=c0, size=(64,)), MemoryDep(name='buf29', index=c0, size=(64, 3136))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf29'),
            SchedulerNode(name='buf30'),
            SchedulerNode(name='buf33'),
            SchedulerNode(name='buf31'),
            SchedulerNode(name='buf35'),
            SchedulerNode(name='buf32'),
            SchedulerNode(name='buf34')],
 'unmet_dependencies': {MemoryDep(name='buf28', index=c0, size=(200704,)),
                        MemoryDep(name='buf30', index=c0, size=(64, 3136))},
 'users': None}

Node------
<class 'torch._inductor.scheduler.ExternKernelSchedulerNode'>
{'flops': 231211008,
 'inverse_users': [SchedulerNode(name='buf35')],
 'last_usage': set(),
 'max_order': 36,
 'min_order': 36,
 'node': ExternKernelAlloc(name='buf36', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), inputs=[ComputedBuffer(name='buf35', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf28, i3 + 56 * i2 + 3136 * i1)
      tmp1 = ops.load(buf30, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf31, i1)
      tmp4 = ops.index_expr(3136, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_11, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_12, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.relu(tmp13)
      return tmp14
  ,
  ranges=[1, 64, 56, 56],
  origins={rsqrt_3, add_17, sub_3, add_20, mul_27, mul_21, var_...
)), InputBuffer(name='primals_13', layout=FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1]))], constant_args=(), kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None}, output_view=None),
 'origins': {convolution_4},
 'read_writes': ReadWrites(reads={StarDep(name='primals_13'), StarDep(name='buf35')}, writes={StarDep(name='buf36')}, index_exprs=set(), range_vars=[], var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {StarDep(name='buf35')},
 'users': [NodeUser(node=SchedulerNode(name='buf37'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf39'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf43'), can_inplace=True),
           NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.FusedSchedulerNode'>
{'__get_name_cache': 'buf37_buf38_buf41_buf39_buf43_buf40_buf42',
 '__get_names_cache': {'buf37',
                       'buf38',
                       'buf39',
                       'buf40',
                       'buf41',
                       'buf42',
                       'buf43'},
 '__is_template_cache': False,
 '__used_buffer_names_cache': {'buf27',
                               'buf36',
                               'buf37',
                               'buf38',
                               'buf39',
                               'buf40',
                               'buf41',
                               'buf42',
                               'buf43',
                               'primals_14',
                               'primals_15',
                               'primals_75',
                               'primals_76'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (64, 3136)),
 'inverse_users': [],
 'last_usage': {'buf39', 'primals_76', 'primals_75', 'primals_15', 'buf37'},
 'max_order': 43,
 'min_order': 37,
 'node': None,
 'origins': {add_25: 1,
             squeeze_13: 1,
             add_26: 1,
             mul_32: 1,
             add_24: 1,
             mul_29: 1,
             rsqrt_4: 2,
             mul_34: 1,
             mul_33: 1,
             mul_31: 1,
             relu_4: 1,
             var_mean_4: 5,
             add_22: 2,
             mul_30: 1,
             mul_28: 1,
             sub_4: 1,
             add_23: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf27', index=c0, size=(200704,)), MemoryDep(name='buf36', index=c0, size=(200704,)), MemoryDep(name='primals_15', index=c0, size=(64, 3136)), MemoryDep(name='primals_75', index=c0, size=(64,)), MemoryDep(name='primals_76', index=c0, size=(64,)), MemoryDep(name='buf38', index=c0, size=(64, 3136)), MemoryDep(name='primals_14', index=c0, size=(64, 3136))}, writes={MemoryDep(name='buf41', index=c0, size=(64,)), MemoryDep(name='buf39', index=c0, size=(64,)), MemoryDep(name='buf38', index=c0, size=(64,)), MemoryDep(name='buf37', index=c0, size=(64, 3136)), MemoryDep(name='buf43', index=c0, size=(200704,)), MemoryDep(name='buf37', index=c0, size=(64,)), MemoryDep(name='buf40', index=c0, size=(64,)), MemoryDep(name='buf39', index=c0, size=(64, 3136)), MemoryDep(name='buf42', index=c0, size=(64,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf37'),
            SchedulerNode(name='buf38'),
            SchedulerNode(name='buf41'),
            SchedulerNode(name='buf39'),
            SchedulerNode(name='buf43'),
            SchedulerNode(name='buf40'),
            SchedulerNode(name='buf42')],
 'unmet_dependencies': {MemoryDep(name='buf27', index=c0, size=(200704,)),
                        MemoryDep(name='buf36', index=c0, size=(200704,)),
                        MemoryDep(name='buf38', index=c0, size=(64, 3136))},
 'users': None}

Node------
<class 'torch._inductor.scheduler.ExternKernelSchedulerNode'>
{'flops': 231211008,
 'inverse_users': [SchedulerNode(name='buf43')],
 'last_usage': set(),
 'max_order': 44,
 'min_order': 44,
 'node': ExternKernelAlloc(name='buf44', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), inputs=[ComputedBuffer(name='buf43', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
      tmp1 = ops.load(buf38, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf39, i1)
      tmp4 = ops.index_expr(3136, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_14, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_15, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
      tmp15 = tmp13 + tmp14
      tmp16 = ops.relu(tmp15)
      return tmp16
  ,
  ranges=[1, 64, 56, 56],
  origins={relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, ...
)), InputBuffer(name='primals_16', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 3, 3], stride=[576, 9, 3, 1]))], constant_args=(), kwargs={'stride': (2, 2), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None}, output_view=None),
 'origins': {convolution_5},
 'read_writes': ReadWrites(reads={StarDep(name='primals_16'), StarDep(name='buf43')}, writes={StarDep(name='buf44')}, index_exprs=set(), range_vars=[], var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {StarDep(name='buf43')},
 'users': [NodeUser(node=SchedulerNode(name='buf45'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf47'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf51'), can_inplace=True),
           NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.FusedSchedulerNode'>
{'__get_name_cache': 'buf45_buf46_buf49_buf47_buf51_buf48_buf50',
 '__get_names_cache': {'buf45',
                       'buf46',
                       'buf47',
                       'buf48',
                       'buf49',
                       'buf50',
                       'buf51'},
 '__is_template_cache': False,
 '__used_buffer_names_cache': {'buf44',
                               'buf45',
                               'buf46',
                               'buf47',
                               'buf48',
                               'buf49',
                               'buf50',
                               'buf51',
                               'primals_17',
                               'primals_18',
                               'primals_78',
                               'primals_79'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'last_usage': {'primals_18', 'buf45', 'primals_79', 'buf47', 'primals_78'},
 'max_order': 51,
 'min_order': 45,
 'node': None,
 'origins': {relu_5: 1,
             mul_38: 1,
             squeeze_16: 1,
             mul_39: 1,
             mul_35: 1,
             mul_41: 1,
             add_31: 1,
             add_30: 1,
             add_28: 2,
             mul_37: 1,
             mul_40: 1,
             add_29: 1,
             rsqrt_5: 2,
             sub_5: 1,
             mul_36: 1,
             var_mean_5: 5},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf46', index=c0, size=(128, 784)), MemoryDep(name='primals_78', index=c0, size=(128,)), MemoryDep(name='primals_17', index=c0, size=(128, 784)), MemoryDep(name='buf44', index=c0, size=(100352,)), MemoryDep(name='primals_79', index=c0, size=(128,)), MemoryDep(name='primals_18', index=c0, size=(128, 784))}, writes={MemoryDep(name='buf45', index=c0, size=(128,)), MemoryDep(name='buf47', index=c0, size=(128, 784)), MemoryDep(name='buf50', index=c0, size=(128,)), MemoryDep(name='buf46', index=c0, size=(128,)), MemoryDep(name='buf48', index=c0, size=(128,)), MemoryDep(name='buf51', index=c0, size=(100352,)), MemoryDep(name='buf49', index=c0, size=(128,)), MemoryDep(name='buf45', index=c0, size=(128, 784)), MemoryDep(name='buf47', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf45'),
            SchedulerNode(name='buf46'),
            SchedulerNode(name='buf49'),
            SchedulerNode(name='buf47'),
            SchedulerNode(name='buf51'),
            SchedulerNode(name='buf48'),
            SchedulerNode(name='buf50')],
 'unmet_dependencies': {MemoryDep(name='buf44', index=c0, size=(100352,)),
                        MemoryDep(name='buf46', index=c0, size=(128, 784))},
 'users': None}

Node------
<class 'torch._inductor.scheduler.ExternKernelSchedulerNode'>
{'flops': 231211008,
 'inverse_users': [SchedulerNode(name='buf51')],
 'last_usage': set(),
 'max_order': 52,
 'min_order': 52,
 'node': ExternKernelAlloc(name='buf52', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), inputs=[ComputedBuffer(name='buf51', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf44, i3 + 28 * i2 + 784 * i1)
      tmp1 = ops.load(buf46, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf47, i1)
      tmp4 = ops.index_expr(784, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_17, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_18, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.relu(tmp13)
      return tmp14
  ,
  ranges=[1, 128, 28, 28],
  origins={add_31, add_28, rsqrt_5, mul_35, sub_5, relu_5, mul_...
)), InputBuffer(name='primals_19', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))], constant_args=(), kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None}, output_view=None),
 'origins': {convolution_6},
 'read_writes': ReadWrites(reads={StarDep(name='buf51'), StarDep(name='primals_19')}, writes={StarDep(name='buf52')}, index_exprs=set(), range_vars=[], var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {StarDep(name='buf51')},
 'users': [NodeUser(node=SchedulerNode(name='buf53'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf55'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf66'), can_inplace=True),
           NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.ExternKernelSchedulerNode'>
{'flops': 231211008,
 'inverse_users': [SchedulerNode(name='buf43')],
 'last_usage': set(),
 'max_order': 59,
 'min_order': 59,
 'node': ExternKernelAlloc(name='buf59', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), inputs=[ComputedBuffer(name='buf43', layout=FixedLayout('cuda', torch.float32, size=[1, 64, 56, 56], stride=[200704, 3136, 56, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf36, i3 + 56 * i2 + 3136 * i1)
      tmp1 = ops.load(buf38, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf39, i1)
      tmp4 = ops.index_expr(3136, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_14, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_15, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.load(buf27, i3 + 56 * i2 + 3136 * i1)
      tmp15 = tmp13 + tmp14
      tmp16 = ops.relu(tmp15)
      return tmp16
  ,
  ranges=[1, 64, 56, 56],
  origins={relu_4, add_26, rsqrt_4, sub_4, add_25, var_mean_4, ...
)), InputBuffer(name='primals_22', layout=FixedLayout('cuda', torch.float32, size=[128, 64, 1, 1], stride=[64, 1, 1, 1]))], constant_args=(), kwargs={'stride': (2, 2), 'padding': (0, 0), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None}, output_view=None),
 'origins': {convolution_7},
 'read_writes': ReadWrites(reads={StarDep(name='primals_22'), StarDep(name='buf43')}, writes={StarDep(name='buf59')}, index_exprs=set(), range_vars=[], var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf5',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {StarDep(name='buf43')},
 'users': [NodeUser(node=SchedulerNode(name='buf60'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf62'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf66'), can_inplace=True),
           NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.FusedSchedulerNode'>
{'__get_name_cache': 'buf53_buf54_buf57_buf60_buf61_buf64_buf55_buf62_buf66_buf67_buf56_buf58_buf63_buf65',
 '__get_names_cache': {'buf53',
                       'buf54',
                       'buf55',
                       'buf56',
                       'buf57',
                       'buf58',
                       'buf60',
                       'buf61',
                       'buf62',
                       'buf63',
                       'buf64',
                       'buf65',
                       'buf66',
                       'buf67'},
 '__is_template_cache': False,
 '__used_buffer_names_cache': {'buf52',
                               'buf53',
                               'buf54',
                               'buf55',
                               'buf56',
                               'buf57',
                               'buf58',
                               'buf59',
                               'buf60',
                               'buf61',
                               'buf62',
                               'buf63',
                               'buf64',
                               'buf65',
                               'buf66',
                               'buf67',
                               'primals_20',
                               'primals_21',
                               'primals_23',
                               'primals_24',
                               'primals_81',
                               'primals_82',
                               'primals_84',
                               'primals_85'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'last_usage': {'buf53',
                'buf55',
                'buf60',
                'buf62',
                'buf66',
                'primals_21',
                'primals_24',
                'primals_81',
                'primals_82',
                'primals_84',
                'primals_85'},
 'max_order': 67,
 'min_order': 53,
 'node': None,
 'origins': {rsqrt_7: 2,
             add_38: 2,
             var_mean_7: 5,
             squeeze_22: 1,
             mul_49: 1,
             mul_50: 1,
             sub_7: 1,
             add_35: 1,
             mul_42: 1,
             add_34: 1,
             rsqrt_6: 2,
             sub_6: 1,
             mul_44: 1,
             var_mean_6: 5,
             squeeze_19: 1,
             mul_48: 1,
             mul_43: 1,
             add_36: 1,
             mul_47: 1,
             add_33: 2,
             mul_45: 1,
             mul_46: 1,
             mul_52: 1,
             add_41: 1,
             mul_55: 1,
             mul_51: 1,
             mul_53: 1,
             mul_54: 1,
             add_40: 1,
             relu_6: 1,
             add_39: 1,
             add_42: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_20', index=c0, size=(128, 784)), MemoryDep(name='buf59', index=c0, size=(100352,)), MemoryDep(name='primals_82', index=c0, size=(128,)), MemoryDep(name='primals_23', index=c0, size=(128, 784)), MemoryDep(name='primals_84', index=c0, size=(128,)), MemoryDep(name='primals_81', index=c0, size=(128,)), MemoryDep(name='primals_85', index=c0, size=(128,)), MemoryDep(name='primals_21', index=c0, size=(128, 784)), MemoryDep(name='buf54', index=c0, size=(128, 784)), MemoryDep(name='buf52', index=c0, size=(100352,)), MemoryDep(name='primals_24', index=c0, size=(128, 784)), MemoryDep(name='buf61', index=c0, size=(128, 784))}, writes={MemoryDep(name='buf53', index=c0, size=(128,)), MemoryDep(name='buf62', index=c0, size=(128, 784)), MemoryDep(name='buf55', index=c0, size=(128, 784)), MemoryDep(name='buf60', index=c0, size=(128,)), MemoryDep(name='buf63', index=c0, size=(128,)), MemoryDep(name='buf67', index=c0, size=(100352,)), MemoryDep(name='buf58', index=c0, size=(128,)), MemoryDep(name='buf64', index=c0, size=(128,)), MemoryDep(name='buf57', index=c0, size=(128,)), MemoryDep(name='buf53', index=c0, size=(128, 784)), MemoryDep(name='buf66', index=c0, size=(100352,)), MemoryDep(name='buf56', index=c0, size=(128,)), MemoryDep(name='buf62', index=c0, size=(128,)), MemoryDep(name='buf54', index=c0, size=(128,)), MemoryDep(name='buf65', index=c0, size=(128,)), MemoryDep(name='buf55', index=c0, size=(128,)), MemoryDep(name='buf61', index=c0, size=(128,)), MemoryDep(name='buf60', index=c0, size=(128, 784))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf53'),
            SchedulerNode(name='buf54'),
            SchedulerNode(name='buf57'),
            SchedulerNode(name='buf60'),
            SchedulerNode(name='buf61'),
            SchedulerNode(name='buf64'),
            SchedulerNode(name='buf55'),
            SchedulerNode(name='buf62'),
            SchedulerNode(name='buf66'),
            SchedulerNode(name='buf67'),
            SchedulerNode(name='buf56'),
            SchedulerNode(name='buf58'),
            SchedulerNode(name='buf63'),
            SchedulerNode(name='buf65')],
 'unmet_dependencies': {MemoryDep(name='buf52', index=c0, size=(100352,)),
                        MemoryDep(name='buf54', index=c0, size=(128, 784)),
                        MemoryDep(name='buf59', index=c0, size=(100352,)),
                        MemoryDep(name='buf61', index=c0, size=(128, 784))},
 'users': None}

Node------
<class 'torch._inductor.scheduler.ExternKernelSchedulerNode'>
{'flops': 231211008,
 'inverse_users': [SchedulerNode(name='buf67')],
 'last_usage': set(),
 'max_order': 68,
 'min_order': 68,
 'node': ExternKernelAlloc(name='buf68', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), inputs=[ComputedBuffer(name='buf67', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf66, i3 + 28 * i2 + 784 * i1)
      tmp1 = ops.relu(tmp0)
      return tmp1
  ,
  ranges=[1, 128, 28, 28],
  origins={relu_6}
)), InputBuffer(name='primals_25', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))], constant_args=(), kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None}, output_view=None),
 'origins': {convolution_8},
 'read_writes': ReadWrites(reads={StarDep(name='buf67'), StarDep(name='primals_25')}, writes={StarDep(name='buf68')}, index_exprs=set(), range_vars=[], var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {StarDep(name='buf67')},
 'users': [NodeUser(node=SchedulerNode(name='buf69'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf71'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf75'), can_inplace=True),
           NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.FusedSchedulerNode'>
{'__get_name_cache': 'buf69_buf70_buf73_buf71_buf75_buf72_buf74',
 '__get_names_cache': {'buf69',
                       'buf70',
                       'buf71',
                       'buf72',
                       'buf73',
                       'buf74',
                       'buf75'},
 '__is_template_cache': False,
 '__used_buffer_names_cache': {'buf68',
                               'buf69',
                               'buf70',
                               'buf71',
                               'buf72',
                               'buf73',
                               'buf74',
                               'buf75',
                               'primals_26',
                               'primals_27',
                               'primals_87',
                               'primals_88'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'last_usage': {'primals_27', 'primals_88', 'buf69', 'primals_87', 'buf71'},
 'max_order': 75,
 'min_order': 69,
 'node': None,
 'origins': {sub_8: 1,
             mul_60: 1,
             add_45: 1,
             add_44: 2,
             mul_58: 1,
             var_mean_8: 5,
             add_46: 1,
             rsqrt_8: 2,
             mul_61: 1,
             squeeze_25: 1,
             mul_57: 1,
             mul_56: 1,
             relu_7: 1,
             add_47: 1,
             mul_62: 1,
             mul_59: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_88', index=c0, size=(128,)), MemoryDep(name='primals_27', index=c0, size=(128, 784)), MemoryDep(name='buf70', index=c0, size=(128, 784)), MemoryDep(name='buf68', index=c0, size=(100352,)), MemoryDep(name='primals_26', index=c0, size=(128, 784)), MemoryDep(name='primals_87', index=c0, size=(128,))}, writes={MemoryDep(name='buf71', index=c0, size=(128,)), MemoryDep(name='buf74', index=c0, size=(128,)), MemoryDep(name='buf73', index=c0, size=(128,)), MemoryDep(name='buf75', index=c0, size=(100352,)), MemoryDep(name='buf70', index=c0, size=(128,)), MemoryDep(name='buf69', index=c0, size=(128, 784)), MemoryDep(name='buf72', index=c0, size=(128,)), MemoryDep(name='buf69', index=c0, size=(128,)), MemoryDep(name='buf71', index=c0, size=(128, 784))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf69'),
            SchedulerNode(name='buf70'),
            SchedulerNode(name='buf73'),
            SchedulerNode(name='buf71'),
            SchedulerNode(name='buf75'),
            SchedulerNode(name='buf72'),
            SchedulerNode(name='buf74')],
 'unmet_dependencies': {MemoryDep(name='buf68', index=c0, size=(100352,)),
                        MemoryDep(name='buf70', index=c0, size=(128, 784))},
 'users': None}

Node------
<class 'torch._inductor.scheduler.ExternKernelSchedulerNode'>
{'flops': 231211008,
 'inverse_users': [SchedulerNode(name='buf75')],
 'last_usage': set(),
 'max_order': 76,
 'min_order': 76,
 'node': ExternKernelAlloc(name='buf76', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), inputs=[ComputedBuffer(name='buf75', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf68, i3 + 28 * i2 + 784 * i1)
      tmp1 = ops.load(buf70, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf71, i1)
      tmp4 = ops.index_expr(784, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_26, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_27, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.relu(tmp13)
      return tmp14
  ,
  ranges=[1, 128, 28, 28],
  origins={add_44, sub_8, relu_7, rsqrt_8, add_47, mul_62, var_...
)), InputBuffer(name='primals_28', layout=FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1]))], constant_args=(), kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None}, output_view=None),
 'origins': {convolution_9},
 'read_writes': ReadWrites(reads={StarDep(name='buf75'), StarDep(name='primals_28')}, writes={StarDep(name='buf76')}, index_exprs=set(), range_vars=[], var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {StarDep(name='buf75')},
 'users': [NodeUser(node=SchedulerNode(name='buf77'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf79'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf83'), can_inplace=True),
           NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.FusedSchedulerNode'>
{'__get_name_cache': 'buf77_buf78_buf81_buf79_buf83_buf80_buf82',
 '__get_names_cache': {'buf77',
                       'buf78',
                       'buf79',
                       'buf80',
                       'buf81',
                       'buf82',
                       'buf83'},
 '__is_template_cache': False,
 '__used_buffer_names_cache': {'buf67',
                               'buf76',
                               'buf77',
                               'buf78',
                               'buf79',
                               'buf80',
                               'buf81',
                               'buf82',
                               'buf83',
                               'primals_29',
                               'primals_30',
                               'primals_90',
                               'primals_91'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (128, 784)),
 'inverse_users': [],
 'last_usage': {'buf79', 'primals_90', 'primals_30', 'primals_91', 'buf77'},
 'max_order': 83,
 'min_order': 77,
 'node': None,
 'origins': {relu_8: 1,
             add_53: 1,
             mul_69: 1,
             squeeze_28: 1,
             mul_67: 1,
             add_52: 1,
             mul_66: 1,
             add_50: 1,
             mul_68: 1,
             mul_63: 1,
             add_49: 2,
             mul_64: 1,
             add_51: 1,
             rsqrt_9: 2,
             mul_65: 1,
             var_mean_9: 5,
             sub_9: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_30', index=c0, size=(128, 784)), MemoryDep(name='primals_91', index=c0, size=(128,)), MemoryDep(name='primals_29', index=c0, size=(128, 784)), MemoryDep(name='primals_90', index=c0, size=(128,)), MemoryDep(name='buf76', index=c0, size=(100352,)), MemoryDep(name='buf67', index=c0, size=(100352,)), MemoryDep(name='buf78', index=c0, size=(128, 784))}, writes={MemoryDep(name='buf79', index=c0, size=(128, 784)), MemoryDep(name='buf80', index=c0, size=(128,)), MemoryDep(name='buf82', index=c0, size=(128,)), MemoryDep(name='buf77', index=c0, size=(128,)), MemoryDep(name='buf77', index=c0, size=(128, 784)), MemoryDep(name='buf81', index=c0, size=(128,)), MemoryDep(name='buf83', index=c0, size=(100352,)), MemoryDep(name='buf78', index=c0, size=(128,)), MemoryDep(name='buf79', index=c0, size=(128,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf77'),
            SchedulerNode(name='buf78'),
            SchedulerNode(name='buf81'),
            SchedulerNode(name='buf79'),
            SchedulerNode(name='buf83'),
            SchedulerNode(name='buf80'),
            SchedulerNode(name='buf82')],
 'unmet_dependencies': {MemoryDep(name='buf67', index=c0, size=(100352,)),
                        MemoryDep(name='buf76', index=c0, size=(100352,)),
                        MemoryDep(name='buf78', index=c0, size=(128, 784))},
 'users': None}

Node------
<class 'torch._inductor.scheduler.ExternKernelSchedulerNode'>
{'flops': 115605504,
 'inverse_users': [SchedulerNode(name='buf83')],
 'last_usage': set(),
 'max_order': 84,
 'min_order': 84,
 'node': ExternKernelAlloc(name='buf84', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), inputs=[ComputedBuffer(name='buf83', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
      tmp1 = ops.load(buf78, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf79, i1)
      tmp4 = ops.index_expr(784, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_29, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_30, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
      tmp15 = tmp13 + tmp14
      tmp16 = ops.relu(tmp15)
      return tmp16
  ,
  ranges=[1, 128, 28, 28],
  origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
)), InputBuffer(name='primals_31', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1]))], constant_args=(), kwargs={'stride': (2, 2), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None}, output_view=None),
 'origins': {convolution_10},
 'read_writes': ReadWrites(reads={StarDep(name='primals_31'), StarDep(name='buf83')}, writes={StarDep(name='buf84')}, index_exprs=set(), range_vars=[], var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {StarDep(name='buf83')},
 'users': [NodeUser(node=SchedulerNode(name='buf85'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf87'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf91'), can_inplace=True),
           NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.FusedSchedulerNode'>
{'__get_name_cache': 'buf85_buf86_buf89_buf87_buf91_buf88_buf90',
 '__get_names_cache': {'buf85',
                       'buf86',
                       'buf87',
                       'buf88',
                       'buf89',
                       'buf90',
                       'buf91'},
 '__is_template_cache': False,
 '__used_buffer_names_cache': {'buf84',
                               'buf85',
                               'buf86',
                               'buf87',
                               'buf88',
                               'buf89',
                               'buf90',
                               'buf91',
                               'primals_32',
                               'primals_33',
                               'primals_93',
                               'primals_94'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'last_usage': {'primals_94', 'primals_93', 'buf87', 'primals_33', 'buf85'},
 'max_order': 91,
 'min_order': 85,
 'node': None,
 'origins': {var_mean_10: 5,
             add_55: 2,
             sub_10: 1,
             mul_72: 1,
             add_56: 1,
             mul_74: 1,
             mul_70: 1,
             add_57: 1,
             rsqrt_10: 2,
             mul_71: 1,
             mul_75: 1,
             squeeze_31: 1,
             mul_73: 1,
             relu_9: 1,
             add_58: 1,
             mul_76: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_33', index=c0, size=(256, 196)), MemoryDep(name='buf86', index=c0, size=(256, 196)), MemoryDep(name='primals_32', index=c0, size=(256, 196)), MemoryDep(name='primals_94', index=c0, size=(256,)), MemoryDep(name='buf84', index=c0, size=(50176,)), MemoryDep(name='primals_93', index=c0, size=(256,))}, writes={MemoryDep(name='buf86', index=c0, size=(256,)), MemoryDep(name='buf88', index=c0, size=(256,)), MemoryDep(name='buf87', index=c0, size=(256,)), MemoryDep(name='buf85', index=c0, size=(256,)), MemoryDep(name='buf89', index=c0, size=(256,)), MemoryDep(name='buf90', index=c0, size=(256,)), MemoryDep(name='buf91', index=c0, size=(50176,)), MemoryDep(name='buf87', index=c0, size=(256, 196)), MemoryDep(name='buf85', index=c0, size=(256, 196))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf85'),
            SchedulerNode(name='buf86'),
            SchedulerNode(name='buf89'),
            SchedulerNode(name='buf87'),
            SchedulerNode(name='buf91'),
            SchedulerNode(name='buf88'),
            SchedulerNode(name='buf90')],
 'unmet_dependencies': {MemoryDep(name='buf84', index=c0, size=(50176,)),
                        MemoryDep(name='buf86', index=c0, size=(256, 196))},
 'users': None}

Node------
<class 'torch._inductor.scheduler.ExternKernelSchedulerNode'>
{'flops': 115605504,
 'inverse_users': [SchedulerNode(name='buf91')],
 'last_usage': set(),
 'max_order': 92,
 'min_order': 92,
 'node': ExternKernelAlloc(name='buf92', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), inputs=[ComputedBuffer(name='buf91', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf84, i3 + 14 * i2 + 196 * i1)
      tmp1 = ops.load(buf86, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf87, i1)
      tmp4 = ops.index_expr(196, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_32, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_33, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.relu(tmp13)
      return tmp14
  ,
  ranges=[1, 256, 14, 14],
  origins={var_mean_10, add_58, add_55, sub_10, mul_76, rsqrt_1...
)), InputBuffer(name='primals_34', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))], constant_args=(), kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None}, output_view=None),
 'origins': {convolution_11},
 'read_writes': ReadWrites(reads={StarDep(name='buf91'), StarDep(name='primals_34')}, writes={StarDep(name='buf92')}, index_exprs=set(), range_vars=[], var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {StarDep(name='buf91')},
 'users': [NodeUser(node=SchedulerNode(name='buf93'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf95'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf106'), can_inplace=True),
           NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.ExternKernelSchedulerNode'>
{'flops': 231211008,
 'inverse_users': [SchedulerNode(name='buf83')],
 'last_usage': set(),
 'max_order': 99,
 'min_order': 99,
 'node': ExternKernelAlloc(name='buf99', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), inputs=[ComputedBuffer(name='buf83', layout=FixedLayout('cuda', torch.float32, size=[1, 128, 28, 28], stride=[100352, 784, 28, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf76, i3 + 28 * i2 + 784 * i1)
      tmp1 = ops.load(buf78, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf79, i1)
      tmp4 = ops.index_expr(784, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_29, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_30, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.load(buf67, i3 + 28 * i2 + 784 * i1)
      tmp15 = tmp13 + tmp14
      tmp16 = ops.relu(tmp15)
      return tmp16
  ,
  ranges=[1, 128, 28, 28],
  origins={mul_63, var_mean_9, add_49, mul_69, add_52, add_53, ...
)), InputBuffer(name='primals_37', layout=FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1]))], constant_args=(), kwargs={'stride': (2, 2), 'padding': (0, 0), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None}, output_view=None),
 'origins': {convolution_12},
 'read_writes': ReadWrites(reads={StarDep(name='buf83'), StarDep(name='primals_37')}, writes={StarDep(name='buf99')}, index_exprs=set(), range_vars=[], var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf9'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {StarDep(name='buf83')},
 'users': [NodeUser(node=SchedulerNode(name='buf100'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf102'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf106'), can_inplace=True),
           NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.FusedSchedulerNode'>
{'__get_name_cache': 'buf93_buf94_buf97_buf100_buf101_buf104_buf95_buf102_buf106_buf107_buf96_buf98_buf103_buf105',
 '__get_names_cache': {'buf100',
                       'buf101',
                       'buf102',
                       'buf103',
                       'buf104',
                       'buf105',
                       'buf106',
                       'buf107',
                       'buf93',
                       'buf94',
                       'buf95',
                       'buf96',
                       'buf97',
                       'buf98'},
 '__is_template_cache': False,
 '__used_buffer_names_cache': {'buf100',
                               'buf101',
                               'buf102',
                               'buf103',
                               'buf104',
                               'buf105',
                               'buf106',
                               'buf107',
                               'buf92',
                               'buf93',
                               'buf94',
                               'buf95',
                               'buf96',
                               'buf97',
                               'buf98',
                               'buf99',
                               'primals_100',
                               'primals_35',
                               'primals_36',
                               'primals_38',
                               'primals_39',
                               'primals_96',
                               'primals_97',
                               'primals_99'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'last_usage': {'buf100',
                'buf102',
                'buf106',
                'buf93',
                'buf95',
                'primals_100',
                'primals_36',
                'primals_39',
                'primals_96',
                'primals_97',
                'primals_99'},
 'max_order': 107,
 'min_order': 93,
 'node': None,
 'origins': {add_67: 1,
             mul_88: 1,
             mul_85: 1,
             squeeze_37: 1,
             mul_89: 1,
             mul_87: 1,
             mul_90: 1,
             add_68: 1,
             add_66: 1,
             mul_86: 1,
             relu_10: 1,
             add_69: 1,
             mul_81: 1,
             add_61: 1,
             sub_11: 1,
             mul_79: 1,
             add_60: 2,
             mul_77: 1,
             var_mean_11: 5,
             add_65: 2,
             squeeze_34: 1,
             mul_78: 1,
             mul_82: 1,
             add_62: 1,
             rsqrt_11: 2,
             mul_84: 1,
             mul_83: 1,
             add_63: 1,
             mul_80: 1,
             rsqrt_12: 2,
             sub_12: 1,
             var_mean_12: 5},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_97', index=c0, size=(256,)), MemoryDep(name='primals_100', index=c0, size=(256,)), MemoryDep(name='primals_39', index=c0, size=(256, 196)), MemoryDep(name='primals_96', index=c0, size=(256,)), MemoryDep(name='buf99', index=c0, size=(50176,)), MemoryDep(name='primals_36', index=c0, size=(256, 196)), MemoryDep(name='primals_99', index=c0, size=(256,)), MemoryDep(name='buf101', index=c0, size=(256, 196)), MemoryDep(name='buf92', index=c0, size=(50176,)), MemoryDep(name='buf94', index=c0, size=(256, 196)), MemoryDep(name='primals_35', index=c0, size=(256, 196)), MemoryDep(name='primals_38', index=c0, size=(256, 196))}, writes={MemoryDep(name='buf102', index=c0, size=(256,)), MemoryDep(name='buf95', index=c0, size=(256,)), MemoryDep(name='buf93', index=c0, size=(256,)), MemoryDep(name='buf105', index=c0, size=(256,)), MemoryDep(name='buf100', index=c0, size=(256, 196)), MemoryDep(name='buf101', index=c0, size=(256,)), MemoryDep(name='buf104', index=c0, size=(256,)), MemoryDep(name='buf107', index=c0, size=(50176,)), MemoryDep(name='buf100', index=c0, size=(256,)), MemoryDep(name='buf94', index=c0, size=(256,)), MemoryDep(name='buf97', index=c0, size=(256,)), MemoryDep(name='buf106', index=c0, size=(50176,)), MemoryDep(name='buf103', index=c0, size=(256,)), MemoryDep(name='buf98', index=c0, size=(256,)), MemoryDep(name='buf96', index=c0, size=(256,)), MemoryDep(name='buf102', index=c0, size=(256, 196)), MemoryDep(name='buf95', index=c0, size=(256, 196)), MemoryDep(name='buf93', index=c0, size=(256, 196))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf93'),
            SchedulerNode(name='buf94'),
            SchedulerNode(name='buf97'),
            SchedulerNode(name='buf100'),
            SchedulerNode(name='buf101'),
            SchedulerNode(name='buf104'),
            SchedulerNode(name='buf95'),
            SchedulerNode(name='buf102'),
            SchedulerNode(name='buf106'),
            SchedulerNode(name='buf107'),
            SchedulerNode(name='buf96'),
            SchedulerNode(name='buf98'),
            SchedulerNode(name='buf103'),
            SchedulerNode(name='buf105')],
 'unmet_dependencies': {MemoryDep(name='buf101', index=c0, size=(256, 196)),
                        MemoryDep(name='buf92', index=c0, size=(50176,)),
                        MemoryDep(name='buf94', index=c0, size=(256, 196)),
                        MemoryDep(name='buf99', index=c0, size=(50176,))},
 'users': None}

Node------
<class 'torch._inductor.scheduler.ExternKernelSchedulerNode'>
{'flops': 231211008,
 'inverse_users': [SchedulerNode(name='buf107')],
 'last_usage': set(),
 'max_order': 108,
 'min_order': 108,
 'node': ExternKernelAlloc(name='buf108', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), inputs=[ComputedBuffer(name='buf107', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf106, i3 + 14 * i2 + 196 * i1)
      tmp1 = ops.relu(tmp0)
      return tmp1
  ,
  ranges=[1, 256, 14, 14],
  origins={relu_10}
)), InputBuffer(name='primals_40', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))], constant_args=(), kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None}, output_view=None),
 'origins': {convolution_13},
 'read_writes': ReadWrites(reads={StarDep(name='buf107'), StarDep(name='primals_40')}, writes={StarDep(name='buf108')}, index_exprs=set(), range_vars=[], var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {StarDep(name='buf107')},
 'users': [NodeUser(node=SchedulerNode(name='buf109'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf111'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf115'), can_inplace=True),
           NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.FusedSchedulerNode'>
{'__get_name_cache': 'buf109_buf110_buf113_buf111_buf115_buf112_buf114',
 '__get_names_cache': {'buf109',
                       'buf110',
                       'buf111',
                       'buf112',
                       'buf113',
                       'buf114',
                       'buf115'},
 '__is_template_cache': False,
 '__used_buffer_names_cache': {'buf108',
                               'buf109',
                               'buf110',
                               'buf111',
                               'buf112',
                               'buf113',
                               'buf114',
                               'buf115',
                               'primals_102',
                               'primals_103',
                               'primals_41',
                               'primals_42'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'last_usage': {'primals_42', 'buf111', 'buf109', 'primals_102', 'primals_103'},
 'max_order': 115,
 'min_order': 109,
 'node': None,
 'origins': {sub_13: 1,
             mul_95: 1,
             add_72: 1,
             mul_93: 1,
             add_71: 2,
             var_mean_13: 5,
             rsqrt_13: 2,
             add_73: 1,
             mul_92: 1,
             squeeze_40: 1,
             mul_91: 1,
             mul_96: 1,
             mul_94: 1,
             mul_97: 1,
             add_74: 1,
             relu_11: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf108', index=c0, size=(50176,)), MemoryDep(name='buf110', index=c0, size=(256, 196)), MemoryDep(name='primals_41', index=c0, size=(256, 196)), MemoryDep(name='primals_42', index=c0, size=(256, 196)), MemoryDep(name='primals_103', index=c0, size=(256,)), MemoryDep(name='primals_102', index=c0, size=(256,))}, writes={MemoryDep(name='buf114', index=c0, size=(256,)), MemoryDep(name='buf109', index=c0, size=(256, 196)), MemoryDep(name='buf111', index=c0, size=(256, 196)), MemoryDep(name='buf112', index=c0, size=(256,)), MemoryDep(name='buf110', index=c0, size=(256,)), MemoryDep(name='buf109', index=c0, size=(256,)), MemoryDep(name='buf113', index=c0, size=(256,)), MemoryDep(name='buf111', index=c0, size=(256,)), MemoryDep(name='buf115', index=c0, size=(50176,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf109'),
            SchedulerNode(name='buf110'),
            SchedulerNode(name='buf113'),
            SchedulerNode(name='buf111'),
            SchedulerNode(name='buf115'),
            SchedulerNode(name='buf112'),
            SchedulerNode(name='buf114')],
 'unmet_dependencies': {MemoryDep(name='buf108', index=c0, size=(50176,)),
                        MemoryDep(name='buf110', index=c0, size=(256, 196))},
 'users': None}

Node------
<class 'torch._inductor.scheduler.ExternKernelSchedulerNode'>
{'flops': 12845056,
 'inverse_users': [SchedulerNode(name='buf115')],
 'last_usage': set(),
 'max_order': 116,
 'min_order': 116,
 'node': ExternKernelAlloc(name='buf116', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), inputs=[ComputedBuffer(name='buf115', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf108, i3 + 14 * i2 + 196 * i1)
      tmp1 = ops.load(buf110, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf111, i1)
      tmp4 = ops.index_expr(196, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_41, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_42, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.relu(tmp13)
      return tmp14
  ,
  ranges=[1, 256, 14, 14],
  origins={mul_91, relu_11, mul_97, rsqrt_13, add_74, sub_13, a...
)), InputBuffer(name='primals_43', layout=FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1]))], constant_args=(), kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None}, output_view=None),
 'origins': {convolution_14},
 'read_writes': ReadWrites(reads={StarDep(name='primals_43'), StarDep(name='buf115')}, writes={StarDep(name='buf116')}, index_exprs=set(), range_vars=[], var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {StarDep(name='buf115')},
 'users': [NodeUser(node=SchedulerNode(name='buf117'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf119'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf123'), can_inplace=True),
           NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.FusedSchedulerNode'>
{'__get_name_cache': 'buf117_buf118_buf121_buf119_buf123_buf120_buf122',
 '__get_names_cache': {'buf117',
                       'buf118',
                       'buf119',
                       'buf120',
                       'buf121',
                       'buf122',
                       'buf123'},
 '__is_template_cache': False,
 '__used_buffer_names_cache': {'buf107',
                               'buf116',
                               'buf117',
                               'buf118',
                               'buf119',
                               'buf120',
                               'buf121',
                               'buf122',
                               'buf123',
                               'primals_105',
                               'primals_106',
                               'primals_44',
                               'primals_45'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (256, 196)),
 'inverse_users': [],
 'last_usage': {'primals_106', 'buf119', 'primals_105', 'primals_45', 'buf117'},
 'max_order': 123,
 'min_order': 117,
 'node': None,
 'origins': {add_79: 1,
             mul_104: 1,
             add_80: 1,
             relu_12: 1,
             mul_103: 1,
             sub_14: 1,
             var_mean_14: 5,
             mul_101: 1,
             add_76: 2,
             squeeze_43: 1,
             mul_99: 1,
             rsqrt_14: 2,
             mul_98: 1,
             add_78: 1,
             mul_102: 1,
             add_77: 1,
             mul_100: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf116', index=c0, size=(50176,)), MemoryDep(name='primals_105', index=c0, size=(256,)), MemoryDep(name='buf107', index=c0, size=(50176,)), MemoryDep(name='primals_106', index=c0, size=(256,)), MemoryDep(name='primals_45', index=c0, size=(256, 196)), MemoryDep(name='buf118', index=c0, size=(256, 196)), MemoryDep(name='primals_44', index=c0, size=(256, 196))}, writes={MemoryDep(name='buf119', index=c0, size=(256,)), MemoryDep(name='buf117', index=c0, size=(256, 196)), MemoryDep(name='buf123', index=c0, size=(50176,)), MemoryDep(name='buf120', index=c0, size=(256,)), MemoryDep(name='buf122', index=c0, size=(256,)), MemoryDep(name='buf117', index=c0, size=(256,)), MemoryDep(name='buf119', index=c0, size=(256, 196)), MemoryDep(name='buf121', index=c0, size=(256,)), MemoryDep(name='buf118', index=c0, size=(256,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf117'),
            SchedulerNode(name='buf118'),
            SchedulerNode(name='buf121'),
            SchedulerNode(name='buf119'),
            SchedulerNode(name='buf123'),
            SchedulerNode(name='buf120'),
            SchedulerNode(name='buf122')],
 'unmet_dependencies': {MemoryDep(name='buf107', index=c0, size=(50176,)),
                        MemoryDep(name='buf116', index=c0, size=(50176,)),
                        MemoryDep(name='buf118', index=c0, size=(256, 196))},
 'users': None}

Node------
<class 'torch._inductor.scheduler.ExternKernelSchedulerNode'>
{'flops': 12845056,
 'inverse_users': [SchedulerNode(name='buf123')],
 'last_usage': set(),
 'max_order': 124,
 'min_order': 124,
 'node': ExternKernelAlloc(name='buf124', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), inputs=[ComputedBuffer(name='buf123', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
      tmp1 = ops.load(buf118, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf119, i1)
      tmp4 = ops.index_expr(196, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_44, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_45, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
      tmp15 = tmp13 + tmp14
      tmp16 = ops.relu(tmp15)
      return tmp16
  ,
  ranges=[1, 256, 14, 14],
  origins={mul_98, add_80, var_mean_14, add_79, add_76, relu_12...
)), InputBuffer(name='primals_46', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 3, 3], stride=[2304, 9, 3, 1]))], constant_args=(), kwargs={'stride': (2, 2), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None}, output_view=None),
 'origins': {convolution_15},
 'read_writes': ReadWrites(reads={StarDep(name='buf123'), StarDep(name='primals_46')}, writes={StarDep(name='buf124')}, index_exprs=set(), range_vars=[], var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {StarDep(name='buf123')},
 'users': [NodeUser(node=SchedulerNode(name='buf125'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf127'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf131'), can_inplace=True),
           NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.FusedSchedulerNode'>
{'__get_name_cache': 'buf125_buf126_buf129_buf127_buf131_buf128_buf130',
 '__get_names_cache': {'buf125',
                       'buf126',
                       'buf127',
                       'buf128',
                       'buf129',
                       'buf130',
                       'buf131'},
 '__is_template_cache': False,
 '__used_buffer_names_cache': {'buf124',
                               'buf125',
                               'buf126',
                               'buf127',
                               'buf128',
                               'buf129',
                               'buf130',
                               'buf131',
                               'primals_108',
                               'primals_109',
                               'primals_47',
                               'primals_48'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'last_usage': {'primals_48', 'primals_108', 'buf125', 'buf127', 'primals_109'},
 'max_order': 131,
 'min_order': 125,
 'node': None,
 'origins': {add_83: 1,
             mul_109: 1,
             sub_15: 1,
             add_82: 2,
             mul_107: 1,
             var_mean_15: 5,
             add_84: 1,
             rsqrt_15: 2,
             mul_110: 1,
             squeeze_46: 1,
             mul_106: 1,
             mul_105: 1,
             relu_13: 1,
             add_85: 1,
             mul_111: 1,
             mul_108: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf124', index=c0, size=(25088,)), MemoryDep(name='primals_48', index=c0, size=(512, 49)), MemoryDep(name='primals_109', index=c0, size=(512,)), MemoryDep(name='buf126', index=c0, size=(512, 49)), MemoryDep(name='primals_47', index=c0, size=(512, 49)), MemoryDep(name='primals_108', index=c0, size=(512,))}, writes={MemoryDep(name='buf125', index=c0, size=(512,)), MemoryDep(name='buf127', index=c0, size=(512,)), MemoryDep(name='buf131', index=c0, size=(25088,)), MemoryDep(name='buf129', index=c0, size=(512,)), MemoryDep(name='buf126', index=c0, size=(512,)), MemoryDep(name='buf125', index=c0, size=(512, 49)), MemoryDep(name='buf127', index=c0, size=(512, 49)), MemoryDep(name='buf128', index=c0, size=(512,)), MemoryDep(name='buf130', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf125'),
            SchedulerNode(name='buf126'),
            SchedulerNode(name='buf129'),
            SchedulerNode(name='buf127'),
            SchedulerNode(name='buf131'),
            SchedulerNode(name='buf128'),
            SchedulerNode(name='buf130')],
 'unmet_dependencies': {MemoryDep(name='buf124', index=c0, size=(25088,)),
                        MemoryDep(name='buf126', index=c0, size=(512, 49))},
 'users': None}

Node------
<class 'torch._inductor.scheduler.ExternKernelSchedulerNode'>
{'flops': 231211008,
 'inverse_users': [SchedulerNode(name='buf131')],
 'last_usage': set(),
 'max_order': 132,
 'min_order': 132,
 'node': ExternKernelAlloc(name='buf132', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), inputs=[ComputedBuffer(name='buf131', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf124, i3 + 7 * i2 + 49 * i1)
      tmp1 = ops.load(buf126, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf127, i1)
      tmp4 = ops.index_expr(49, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_47, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_48, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.relu(tmp13)
      return tmp14
  ,
  ranges=[1, 512, 7, 7],
  origins={relu_13, add_85, mul_111, add_82, rsqrt_15, sub_15, ...
)), InputBuffer(name='primals_49', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))], constant_args=(), kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None}, output_view=None),
 'origins': {convolution_16},
 'read_writes': ReadWrites(reads={StarDep(name='buf131'), StarDep(name='primals_49')}, writes={StarDep(name='buf132')}, index_exprs=set(), range_vars=[], var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {StarDep(name='buf131')},
 'users': [NodeUser(node=SchedulerNode(name='buf133'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf135'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf146'), can_inplace=True),
           NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.ExternKernelSchedulerNode'>
{'flops': 231211008,
 'inverse_users': [SchedulerNode(name='buf123')],
 'last_usage': set(),
 'max_order': 139,
 'min_order': 139,
 'node': ExternKernelAlloc(name='buf139', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), inputs=[ComputedBuffer(name='buf123', layout=FixedLayout('cuda', torch.float32, size=[1, 256, 14, 14], stride=[50176, 196, 14, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf116, i3 + 14 * i2 + 196 * i1)
      tmp1 = ops.load(buf118, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf119, i1)
      tmp4 = ops.index_expr(196, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_44, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_45, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.load(buf107, i3 + 14 * i2 + 196 * i1)
      tmp15 = tmp13 + tmp14
      tmp16 = ops.relu(tmp15)
      return tmp16
  ,
  ranges=[1, 256, 14, 14],
  origins={mul_98, add_80, var_mean_14, add_79, add_76, relu_12...
)), InputBuffer(name='primals_52', layout=FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1]))], constant_args=(), kwargs={'stride': (2, 2), 'padding': (0, 0), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None}, output_view=None),
 'origins': {convolution_17},
 'read_writes': ReadWrites(reads={StarDep(name='buf123'), StarDep(name='primals_52')}, writes={StarDep(name='buf139')}, index_exprs=set(), range_vars=[], var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf13',
                            'buf14',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {StarDep(name='buf123')},
 'users': [NodeUser(node=SchedulerNode(name='buf140'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf142'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf146'), can_inplace=True),
           NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.FusedSchedulerNode'>
{'__get_name_cache': 'buf133_buf134_buf137_buf140_buf141_buf144_buf135_buf142_buf146_buf147_buf136_buf138_buf143_buf145',
 '__get_names_cache': {'buf133',
                       'buf134',
                       'buf135',
                       'buf136',
                       'buf137',
                       'buf138',
                       'buf140',
                       'buf141',
                       'buf142',
                       'buf143',
                       'buf144',
                       'buf145',
                       'buf146',
                       'buf147'},
 '__is_template_cache': False,
 '__used_buffer_names_cache': {'buf132',
                               'buf133',
                               'buf134',
                               'buf135',
                               'buf136',
                               'buf137',
                               'buf138',
                               'buf139',
                               'buf140',
                               'buf141',
                               'buf142',
                               'buf143',
                               'buf144',
                               'buf145',
                               'buf146',
                               'buf147',
                               'primals_111',
                               'primals_112',
                               'primals_114',
                               'primals_115',
                               'primals_50',
                               'primals_51',
                               'primals_53',
                               'primals_54'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'last_usage': {'buf133',
                'buf135',
                'buf140',
                'buf142',
                'buf146',
                'primals_111',
                'primals_112',
                'primals_114',
                'primals_115',
                'primals_51',
                'primals_54'},
 'max_order': 147,
 'min_order': 133,
 'node': None,
 'origins': {mul_116: 1,
             sub_16: 1,
             add_92: 2,
             var_mean_16: 5,
             mul_114: 1,
             rsqrt_16: 2,
             mul_118: 1,
             add_87: 2,
             add_88: 1,
             var_mean_17: 5,
             mul_112: 1,
             add_89: 1,
             add_90: 1,
             mul_117: 1,
             squeeze_49: 1,
             mul_113: 1,
             mul_115: 1,
             mul_123: 1,
             mul_119: 1,
             add_94: 1,
             mul_121: 1,
             rsqrt_17: 2,
             mul_120: 1,
             mul_124: 1,
             squeeze_52: 1,
             mul_122: 1,
             mul_125: 1,
             relu_14: 1,
             add_96: 1,
             add_95: 1,
             sub_17: 1,
             add_93: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_50', index=c0, size=(512, 49)), MemoryDep(name='primals_54', index=c0, size=(512, 49)), MemoryDep(name='buf139', index=c0, size=(25088,)), MemoryDep(name='buf141', index=c0, size=(512, 49)), MemoryDep(name='primals_111', index=c0, size=(512,)), MemoryDep(name='primals_53', index=c0, size=(512, 49)), MemoryDep(name='primals_115', index=c0, size=(512,)), MemoryDep(name='buf134', index=c0, size=(512, 49)), MemoryDep(name='primals_112', index=c0, size=(512,)), MemoryDep(name='buf132', index=c0, size=(25088,)), MemoryDep(name='primals_114', index=c0, size=(512,)), MemoryDep(name='primals_51', index=c0, size=(512, 49))}, writes={MemoryDep(name='buf135', index=c0, size=(512, 49)), MemoryDep(name='buf147', index=c0, size=(25088,)), MemoryDep(name='buf137', index=c0, size=(512,)), MemoryDep(name='buf140', index=c0, size=(512, 49)), MemoryDep(name='buf141', index=c0, size=(512,)), MemoryDep(name='buf142', index=c0, size=(512,)), MemoryDep(name='buf133', index=c0, size=(512,)), MemoryDep(name='buf146', index=c0, size=(25088,)), MemoryDep(name='buf134', index=c0, size=(512,)), MemoryDep(name='buf145', index=c0, size=(512,)), MemoryDep(name='buf144', index=c0, size=(512,)), MemoryDep(name='buf142', index=c0, size=(512, 49)), MemoryDep(name='buf133', index=c0, size=(512, 49)), MemoryDep(name='buf143', index=c0, size=(512,)), MemoryDep(name='buf135', index=c0, size=(512,)), MemoryDep(name='buf138', index=c0, size=(512,)), MemoryDep(name='buf136', index=c0, size=(512,)), MemoryDep(name='buf140', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf133'),
            SchedulerNode(name='buf134'),
            SchedulerNode(name='buf137'),
            SchedulerNode(name='buf140'),
            SchedulerNode(name='buf141'),
            SchedulerNode(name='buf144'),
            SchedulerNode(name='buf135'),
            SchedulerNode(name='buf142'),
            SchedulerNode(name='buf146'),
            SchedulerNode(name='buf147'),
            SchedulerNode(name='buf136'),
            SchedulerNode(name='buf138'),
            SchedulerNode(name='buf143'),
            SchedulerNode(name='buf145')],
 'unmet_dependencies': {MemoryDep(name='buf132', index=c0, size=(25088,)),
                        MemoryDep(name='buf134', index=c0, size=(512, 49)),
                        MemoryDep(name='buf139', index=c0, size=(25088,)),
                        MemoryDep(name='buf141', index=c0, size=(512, 49))},
 'users': None}

Node------
<class 'torch._inductor.scheduler.ExternKernelSchedulerNode'>
{'flops': 231211008,
 'inverse_users': [SchedulerNode(name='buf147')],
 'last_usage': set(),
 'max_order': 148,
 'min_order': 148,
 'node': ExternKernelAlloc(name='buf148', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), inputs=[ComputedBuffer(name='buf147', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf146, i3 + 7 * i2 + 49 * i1)
      tmp1 = ops.relu(tmp0)
      return tmp1
  ,
  ranges=[1, 512, 7, 7],
  origins={relu_14}
)), InputBuffer(name='primals_55', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))], constant_args=(), kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None}, output_view=None),
 'origins': {convolution_18},
 'read_writes': ReadWrites(reads={StarDep(name='buf147'), StarDep(name='primals_55')}, writes={StarDep(name='buf148')}, index_exprs=set(), range_vars=[], var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf147',
                            'buf15',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {StarDep(name='buf147')},
 'users': [NodeUser(node=SchedulerNode(name='buf149'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf151'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf155'), can_inplace=True),
           NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.FusedSchedulerNode'>
{'__get_name_cache': 'buf149_buf150_buf153_buf151_buf155_buf152_buf154',
 '__get_names_cache': {'buf149',
                       'buf150',
                       'buf151',
                       'buf152',
                       'buf153',
                       'buf154',
                       'buf155'},
 '__is_template_cache': False,
 '__used_buffer_names_cache': {'buf148',
                               'buf149',
                               'buf150',
                               'buf151',
                               'buf152',
                               'buf153',
                               'buf154',
                               'buf155',
                               'primals_117',
                               'primals_118',
                               'primals_56',
                               'primals_57'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'last_usage': {'buf151', 'primals_118', 'primals_117', 'primals_57', 'buf149'},
 'max_order': 155,
 'min_order': 149,
 'node': None,
 'origins': {sub_18: 1,
             add_99: 1,
             mul_130: 1,
             var_mean_18: 5,
             add_100: 1,
             rsqrt_18: 2,
             mul_128: 1,
             add_98: 2,
             mul_126: 1,
             squeeze_55: 1,
             mul_132: 1,
             mul_129: 1,
             mul_127: 1,
             add_101: 1,
             mul_131: 1,
             relu_15: 1},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf148', index=c0, size=(25088,)), MemoryDep(name='primals_57', index=c0, size=(512, 49)), MemoryDep(name='primals_56', index=c0, size=(512, 49)), MemoryDep(name='primals_118', index=c0, size=(512,)), MemoryDep(name='primals_117', index=c0, size=(512,)), MemoryDep(name='buf150', index=c0, size=(512, 49))}, writes={MemoryDep(name='buf151', index=c0, size=(512,)), MemoryDep(name='buf149', index=c0, size=(512, 49)), MemoryDep(name='buf150', index=c0, size=(512,)), MemoryDep(name='buf149', index=c0, size=(512,)), MemoryDep(name='buf153', index=c0, size=(512,)), MemoryDep(name='buf151', index=c0, size=(512, 49)), MemoryDep(name='buf152', index=c0, size=(512,)), MemoryDep(name='buf155', index=c0, size=(25088,)), MemoryDep(name='buf154', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf147',
                            'buf148',
                            'buf149',
                            'buf15',
                            'buf150',
                            'buf151',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf149'),
            SchedulerNode(name='buf150'),
            SchedulerNode(name='buf153'),
            SchedulerNode(name='buf151'),
            SchedulerNode(name='buf155'),
            SchedulerNode(name='buf152'),
            SchedulerNode(name='buf154')],
 'unmet_dependencies': {MemoryDep(name='buf148', index=c0, size=(25088,)),
                        MemoryDep(name='buf150', index=c0, size=(512, 49))},
 'users': None}

Node------
<class 'torch._inductor.scheduler.ExternKernelSchedulerNode'>
{'flops': 231211008,
 'inverse_users': [SchedulerNode(name='buf155')],
 'last_usage': set(),
 'max_order': 156,
 'min_order': 156,
 'node': ExternKernelAlloc(name='buf156', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), inputs=[ComputedBuffer(name='buf155', layout=FixedLayout('cuda', torch.float32, size=[1, 512, 7, 7], stride=[25088, 49, 7, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1, i2, i3 = index
      tmp0 = ops.load(buf148, i3 + 7 * i2 + 49 * i1)
      tmp1 = ops.load(buf150, i1)
      tmp2 = tmp0 - tmp1
      tmp3 = ops.load(buf151, i1)
      tmp4 = ops.index_expr(49, torch.float32)
      tmp5 = tmp3 / tmp4
      tmp6 = ops.constant(1e-05, torch.float32)
      tmp7 = tmp5 + tmp6
      tmp8 = ops.rsqrt(tmp7)
      tmp9 = tmp2 * tmp8
      tmp10 = ops.load(primals_56, i1)
      tmp11 = tmp9 * tmp10
      tmp12 = ops.load(primals_57, i1)
      tmp13 = tmp11 + tmp12
      tmp14 = ops.relu(tmp13)
      return tmp14
  ,
  ranges=[1, 512, 7, 7],
  origins={sub_18, add_101, rsqrt_18, relu_15, add_98, mul_132,...
)), InputBuffer(name='primals_58', layout=FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1]))], constant_args=(), kwargs={'stride': (1, 1), 'padding': (1, 1), 'dilation': (1, 1), 'transposed': False, 'output_padding': (0, 0), 'groups': 1, 'bias': None}, output_view=None),
 'origins': {convolution_19},
 'read_writes': ReadWrites(reads={StarDep(name='buf155'), StarDep(name='primals_58')}, writes={StarDep(name='buf156')}, index_exprs=set(), range_vars=[], var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf147',
                            'buf148',
                            'buf149',
                            'buf15',
                            'buf150',
                            'buf151',
                            'buf155',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {StarDep(name='buf155')},
 'users': [NodeUser(node=SchedulerNode(name='buf157'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf159'), can_inplace=False),
           NodeUser(node=SchedulerNode(name='buf163'), can_inplace=True),
           NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.FusedSchedulerNode'>
{'__get_name_cache': 'buf157_buf158_buf161_buf159_buf163_buf167_buf164_buf160_buf162_buf165',
 '__get_names_cache': {'buf157',
                       'buf158',
                       'buf159',
                       'buf160',
                       'buf161',
                       'buf162',
                       'buf163',
                       'buf164',
                       'buf165',
                       'buf167'},
 '__is_template_cache': False,
 '__used_buffer_names_cache': {'buf147',
                               'buf156',
                               'buf157',
                               'buf158',
                               'buf159',
                               'buf160',
                               'buf161',
                               'buf162',
                               'buf163',
                               'buf164',
                               'buf165',
                               'buf167',
                               'primals_120',
                               'primals_121',
                               'primals_59',
                               'primals_60'},
 'flops': 0,
 'group': (device(type='cuda', index=0), (512, 49)),
 'inverse_users': [],
 'last_usage': {'buf157',
                'buf159',
                'buf163',
                'buf164',
                'primals_120',
                'primals_121',
                'primals_60'},
 'max_order': 167,
 'min_order': 157,
 'node': None,
 'origins': {le: 1,
             view: 1,
             relu_16: 1,
             add_107: 1,
             mul_139: 1,
             mul_136: 1,
             add_106: 1,
             mul_138: 1,
             mul_137: 1,
             mean: 2,
             add_105: 1,
             mul_134: 1,
             mul_135: 1,
             sub_19: 1,
             mul_133: 1,
             var_mean_19: 5,
             add_103: 2,
             add_104: 1,
             squeeze_58: 1,
             rsqrt_19: 2},
 'read_writes': ReadWrites(reads={MemoryDep(name='buf156', index=c0, size=(25088,)), MemoryDep(name='primals_120', index=c0, size=(512,)), MemoryDep(name='primals_59', index=c0, size=(512, 49)), MemoryDep(name='primals_60', index=c0, size=(512, 49)), MemoryDep(name='primals_121', index=c0, size=(512,)), MemoryDep(name='buf147', index=c0, size=(25088,)), MemoryDep(name='buf158', index=c0, size=(512, 49))}, writes={MemoryDep(name='buf165', index=c0, size=(512,)), MemoryDep(name='buf157', index=c0, size=(512,)), MemoryDep(name='buf159', index=c0, size=(512, 49)), MemoryDep(name='buf164', index=c0, size=(512, 49)), MemoryDep(name='buf158', index=c0, size=(512,)), MemoryDep(name='buf167', index=c0, size=(25088,)), MemoryDep(name='buf160', index=c0, size=(512,)), MemoryDep(name='buf157', index=c0, size=(512, 49)), MemoryDep(name='buf159', index=c0, size=(512,)), MemoryDep(name='buf163', index=c0, size=(25088,)), MemoryDep(name='buf161', index=c0, size=(512,)), MemoryDep(name='buf162', index=c0, size=(512,)), MemoryDep(name='buf164', index=c0, size=(512,))}, index_exprs=set(), range_vars=None, var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf147',
                            'buf148',
                            'buf149',
                            'buf15',
                            'buf150',
                            'buf151',
                            'buf155',
                            'buf156',
                            'buf157',
                            'buf158',
                            'buf159',
                            'buf163',
                            'buf164',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'snodes': [SchedulerNode(name='buf157'),
            SchedulerNode(name='buf158'),
            SchedulerNode(name='buf161'),
            SchedulerNode(name='buf159'),
            SchedulerNode(name='buf163'),
            SchedulerNode(name='buf167'),
            SchedulerNode(name='buf164'),
            SchedulerNode(name='buf160'),
            SchedulerNode(name='buf162'),
            SchedulerNode(name='buf165')],
 'unmet_dependencies': {MemoryDep(name='buf147', index=c0, size=(25088,)),
                        MemoryDep(name='buf156', index=c0, size=(25088,)),
                        MemoryDep(name='buf158', index=c0, size=(512, 49))},
 'users': None}

Node------
<class 'torch._inductor.scheduler.ExternKernelSchedulerNode'>
{'flops': 1024000,
 'inverse_users': [SchedulerNode(name='buf165')],
 'last_usage': {'primals_62'},
 'max_order': 166,
 'min_order': 166,
 'node': ExternKernelOut(name='buf166', layout=FixedLayout('cuda', torch.float32, size=[1, 1000], stride=[1000, 1]), inputs=[InputBuffer(name='primals_62', layout=FixedLayout('cuda', torch.float32, size=[1000], stride=[1])), ComputedBuffer(name='buf165', layout=FixedLayout('cuda', torch.float32, size=(1, 512), stride=[512, 1]), data=Pointwise(
  'cuda',
  torch.float32,
  def inner_fn(index):
      _, i1 = index
      tmp0 = ops.load(buf164, i1)
      tmp1 = ops.index_expr(49, torch.float32)
      tmp2 = tmp0 / tmp1
      return tmp2
  ,
  ranges=(1, 512),
  origins={mean, view}
)), ReinterpretView(
  StorageBox(
    InputBuffer(name='primals_61', layout=FixedLayout('cuda', torch.float32, size=[1000, 512], stride=[512, 1]))
  ),
  FixedLayout('cuda', torch.float32, size=[512, 1000], stride=[1, 512]),
  origins=
)], constant_args=(), kwargs={'alpha': 1, 'beta': 1}, output_view=None),
 'origins': {addmm},
 'read_writes': ReadWrites(reads={StarDep(name='primals_61'), StarDep(name='buf165'), StarDep(name='primals_62')}, writes={StarDep(name='buf166')}, index_exprs=set(), range_vars=[], var_ranges=None),
 'recursive_predecessors': {'buf0',
                            'buf1',
                            'buf10',
                            'buf100',
                            'buf101',
                            'buf102',
                            'buf106',
                            'buf107',
                            'buf108',
                            'buf109',
                            'buf110',
                            'buf111',
                            'buf115',
                            'buf116',
                            'buf117',
                            'buf118',
                            'buf119',
                            'buf12',
                            'buf123',
                            'buf124',
                            'buf125',
                            'buf126',
                            'buf127',
                            'buf13',
                            'buf131',
                            'buf132',
                            'buf133',
                            'buf134',
                            'buf135',
                            'buf139',
                            'buf14',
                            'buf140',
                            'buf141',
                            'buf142',
                            'buf146',
                            'buf147',
                            'buf148',
                            'buf149',
                            'buf15',
                            'buf150',
                            'buf151',
                            'buf155',
                            'buf156',
                            'buf157',
                            'buf158',
                            'buf159',
                            'buf163',
                            'buf164',
                            'buf165',
                            'buf19',
                            'buf2',
                            'buf20',
                            'buf21',
                            'buf22',
                            'buf23',
                            'buf27',
                            'buf28',
                            'buf29',
                            'buf3',
                            'buf30',
                            'buf31',
                            'buf35',
                            'buf36',
                            'buf37',
                            'buf38',
                            'buf39',
                            'buf4',
                            'buf43',
                            'buf44',
                            'buf45',
                            'buf46',
                            'buf47',
                            'buf5',
                            'buf51',
                            'buf52',
                            'buf53',
                            'buf54',
                            'buf55',
                            'buf59',
                            'buf60',
                            'buf61',
                            'buf62',
                            'buf66',
                            'buf67',
                            'buf68',
                            'buf69',
                            'buf70',
                            'buf71',
                            'buf75',
                            'buf76',
                            'buf77',
                            'buf78',
                            'buf79',
                            'buf83',
                            'buf84',
                            'buf85',
                            'buf86',
                            'buf87',
                            'buf9',
                            'buf91',
                            'buf92',
                            'buf93',
                            'buf94',
                            'buf95',
                            'buf99'},
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': {StarDep(name='buf165')},
 'users': [NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807daac10>,
 '_sizes': ([], []),
 'flops': 0,
 'group': (device(type='cuda', index=0), (1, 1)),
 'inverse_users': [],
 'last_usage': {'primals_65'},
 'max_order': 168,
 'min_order': 168,
 'node': ComputedBuffer(name='buf168', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_65, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add}
)),
 'origins': {add},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_65', index=0, size=())}, writes={MemoryDep(name='buf168', index=0, size=())}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict()),
 'recursive_predecessors': set(),
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': set(),
 'users': [NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807dfb0a0>,
 '_sizes': ([], []),
 'flops': 0,
 'group': (device(type='cuda', index=0), (1, 1)),
 'inverse_users': [],
 'last_usage': {'primals_68'},
 'max_order': 169,
 'min_order': 169,
 'node': ComputedBuffer(name='buf169', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_68, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_5}
)),
 'origins': {add_5},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_68', index=0, size=())}, writes={MemoryDep(name='buf169', index=0, size=())}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict()),
 'recursive_predecessors': set(),
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': set(),
 'users': [NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807bd9760>,
 '_sizes': ([], []),
 'flops': 0,
 'group': (device(type='cuda', index=0), (1, 1)),
 'inverse_users': [],
 'last_usage': {'primals_71'},
 'max_order': 170,
 'min_order': 170,
 'node': ComputedBuffer(name='buf170', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_71, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_10}
)),
 'origins': {add_10},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_71', index=0, size=())}, writes={MemoryDep(name='buf170', index=0, size=())}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict()),
 'recursive_predecessors': set(),
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': set(),
 'users': [NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807be8460>,
 '_sizes': ([], []),
 'flops': 0,
 'group': (device(type='cuda', index=0), (1, 1)),
 'inverse_users': [],
 'last_usage': {'primals_74'},
 'max_order': 171,
 'min_order': 171,
 'node': ComputedBuffer(name='buf171', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_74, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_16}
)),
 'origins': {add_16},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_74', index=0, size=())}, writes={MemoryDep(name='buf171', index=0, size=())}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict()),
 'recursive_predecessors': set(),
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': set(),
 'users': [NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807bacc40>,
 '_sizes': ([], []),
 'flops': 0,
 'group': (device(type='cuda', index=0), (1, 1)),
 'inverse_users': [],
 'last_usage': {'primals_77'},
 'max_order': 172,
 'min_order': 172,
 'node': ComputedBuffer(name='buf172', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_77, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_21}
)),
 'origins': {add_21},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_77', index=0, size=())}, writes={MemoryDep(name='buf172', index=0, size=())}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict()),
 'recursive_predecessors': set(),
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': set(),
 'users': [NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807bacbb0>,
 '_sizes': ([], []),
 'flops': 0,
 'group': (device(type='cuda', index=0), (1, 1)),
 'inverse_users': [],
 'last_usage': {'primals_80'},
 'max_order': 173,
 'min_order': 173,
 'node': ComputedBuffer(name='buf173', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_80, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_27}
)),
 'origins': {add_27},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_80', index=0, size=())}, writes={MemoryDep(name='buf173', index=0, size=())}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict()),
 'recursive_predecessors': set(),
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': set(),
 'users': [NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807bac2e0>,
 '_sizes': ([], []),
 'flops': 0,
 'group': (device(type='cuda', index=0), (1, 1)),
 'inverse_users': [],
 'last_usage': {'primals_83'},
 'max_order': 174,
 'min_order': 174,
 'node': ComputedBuffer(name='buf174', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_83, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_32}
)),
 'origins': {add_32},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_83', index=0, size=())}, writes={MemoryDep(name='buf174', index=0, size=())}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict()),
 'recursive_predecessors': set(),
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': set(),
 'users': [NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807db4940>,
 '_sizes': ([], []),
 'flops': 0,
 'group': (device(type='cuda', index=0), (1, 1)),
 'inverse_users': [],
 'last_usage': {'primals_86'},
 'max_order': 175,
 'min_order': 175,
 'node': ComputedBuffer(name='buf175', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_86, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_37}
)),
 'origins': {add_37},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_86', index=0, size=())}, writes={MemoryDep(name='buf175', index=0, size=())}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict()),
 'recursive_predecessors': set(),
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': set(),
 'users': [NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807db4a90>,
 '_sizes': ([], []),
 'flops': 0,
 'group': (device(type='cuda', index=0), (1, 1)),
 'inverse_users': [],
 'last_usage': {'primals_89'},
 'max_order': 176,
 'min_order': 176,
 'node': ComputedBuffer(name='buf176', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_89, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_43}
)),
 'origins': {add_43},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_89', index=0, size=())}, writes={MemoryDep(name='buf176', index=0, size=())}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict()),
 'recursive_predecessors': set(),
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': set(),
 'users': [NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807db45e0>,
 '_sizes': ([], []),
 'flops': 0,
 'group': (device(type='cuda', index=0), (1, 1)),
 'inverse_users': [],
 'last_usage': {'primals_92'},
 'max_order': 177,
 'min_order': 177,
 'node': ComputedBuffer(name='buf177', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_92, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_48}
)),
 'origins': {add_48},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_92', index=0, size=())}, writes={MemoryDep(name='buf177', index=0, size=())}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict()),
 'recursive_predecessors': set(),
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': set(),
 'users': [NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807db4ca0>,
 '_sizes': ([], []),
 'flops': 0,
 'group': (device(type='cuda', index=0), (1, 1)),
 'inverse_users': [],
 'last_usage': {'primals_95'},
 'max_order': 178,
 'min_order': 178,
 'node': ComputedBuffer(name='buf178', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_95, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_54}
)),
 'origins': {add_54},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_95', index=0, size=())}, writes={MemoryDep(name='buf178', index=0, size=())}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict()),
 'recursive_predecessors': set(),
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': set(),
 'users': [NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807db4dc0>,
 '_sizes': ([], []),
 'flops': 0,
 'group': (device(type='cuda', index=0), (1, 1)),
 'inverse_users': [],
 'last_usage': {'primals_98'},
 'max_order': 179,
 'min_order': 179,
 'node': ComputedBuffer(name='buf179', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_98, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_59}
)),
 'origins': {add_59},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_98', index=0, size=())}, writes={MemoryDep(name='buf179', index=0, size=())}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict()),
 'recursive_predecessors': set(),
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': set(),
 'users': [NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807db4c40>,
 '_sizes': ([], []),
 'flops': 0,
 'group': (device(type='cuda', index=0), (1, 1)),
 'inverse_users': [],
 'last_usage': {'primals_101'},
 'max_order': 180,
 'min_order': 180,
 'node': ComputedBuffer(name='buf180', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_101, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_64}
)),
 'origins': {add_64},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_101', index=0, size=())}, writes={MemoryDep(name='buf180', index=0, size=())}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict()),
 'recursive_predecessors': set(),
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': set(),
 'users': [NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807db44c0>,
 '_sizes': ([], []),
 'flops': 0,
 'group': (device(type='cuda', index=0), (1, 1)),
 'inverse_users': [],
 'last_usage': {'primals_104'},
 'max_order': 181,
 'min_order': 181,
 'node': ComputedBuffer(name='buf181', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_104, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_70}
)),
 'origins': {add_70},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_104', index=0, size=())}, writes={MemoryDep(name='buf181', index=0, size=())}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict()),
 'recursive_predecessors': set(),
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': set(),
 'users': [NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807db4b50>,
 '_sizes': ([], []),
 'flops': 0,
 'group': (device(type='cuda', index=0), (1, 1)),
 'inverse_users': [],
 'last_usage': {'primals_107'},
 'max_order': 182,
 'min_order': 182,
 'node': ComputedBuffer(name='buf182', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_107, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_75}
)),
 'origins': {add_75},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_107', index=0, size=())}, writes={MemoryDep(name='buf182', index=0, size=())}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict()),
 'recursive_predecessors': set(),
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': set(),
 'users': [NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807db4cd0>,
 '_sizes': ([], []),
 'flops': 0,
 'group': (device(type='cuda', index=0), (1, 1)),
 'inverse_users': [],
 'last_usage': {'primals_110'},
 'max_order': 183,
 'min_order': 183,
 'node': ComputedBuffer(name='buf183', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_110, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_81}
)),
 'origins': {add_81},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_110', index=0, size=())}, writes={MemoryDep(name='buf183', index=0, size=())}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict()),
 'recursive_predecessors': set(),
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': set(),
 'users': [NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807db41c0>,
 '_sizes': ([], []),
 'flops': 0,
 'group': (device(type='cuda', index=0), (1, 1)),
 'inverse_users': [],
 'last_usage': {'primals_113'},
 'max_order': 184,
 'min_order': 184,
 'node': ComputedBuffer(name='buf184', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_113, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_86}
)),
 'origins': {add_86},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_113', index=0, size=())}, writes={MemoryDep(name='buf184', index=0, size=())}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict()),
 'recursive_predecessors': set(),
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': set(),
 'users': [NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807db4730>,
 '_sizes': ([], []),
 'flops': 0,
 'group': (device(type='cuda', index=0), (1, 1)),
 'inverse_users': [],
 'last_usage': {'primals_116'},
 'max_order': 185,
 'min_order': 185,
 'node': ComputedBuffer(name='buf185', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_116, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_91}
)),
 'origins': {add_91},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_116', index=0, size=())}, writes={MemoryDep(name='buf185', index=0, size=())}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict()),
 'recursive_predecessors': set(),
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': set(),
 'users': [NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807db7730>,
 '_sizes': ([], []),
 'flops': 0,
 'group': (device(type='cuda', index=0), (1, 1)),
 'inverse_users': [],
 'last_usage': {'primals_119'},
 'max_order': 186,
 'min_order': 186,
 'node': ComputedBuffer(name='buf186', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_119, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_97}
)),
 'origins': {add_97},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_119', index=0, size=())}, writes={MemoryDep(name='buf186', index=0, size=())}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict()),
 'recursive_predecessors': set(),
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': set(),
 'users': [NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Node------
<class 'torch._inductor.scheduler.SchedulerNode'>
{'_body': <torch._inductor.ir.LoopBody object at 0x2b0807db7190>,
 '_sizes': ([], []),
 'flops': 0,
 'group': (device(type='cuda', index=0), (1, 1)),
 'inverse_users': [],
 'last_usage': {'primals_122'},
 'max_order': 187,
 'min_order': 187,
 'node': ComputedBuffer(name='buf187', layout=FixedLayout('cuda', torch.int64, size=[], stride=[]), data=Pointwise(
  'cuda',
  torch.int64,
  def inner_fn(index):
      tmp0 = ops.load(primals_122, 0)
      tmp1 = ops.constant(1, torch.int64)
      tmp2 = tmp0 + tmp1
      return tmp2
  ,
  ranges=[],
  origins={add_102}
)),
 'origins': {add_102},
 'read_writes': ReadWrites(reads={MemoryDep(name='primals_122', index=0, size=())}, writes={MemoryDep(name='buf187', index=0, size=())}, index_exprs=set(), range_vars=[], var_ranges=OrderedDict()),
 'recursive_predecessors': set(),
 'scheduler': <torch._inductor.scheduler.Scheduler object at 0x2b0807dae4c0>,
 'unmet_dependencies': set(),
 'users': [NodeUser(node=OUTPUT, can_inplace=False)],
 'written': False}

Finished scheduler init-----------------------

Scheduler.codegen--------------------------------------------

scheduler.codegen_extern_call, node type: <class 'torch._inductor.ir.ExternKernelAlloc'>-------------------------
ir.codegen_reference: primals_123
ir.codegen_reference: primals_1

Finished scheduler.codegen_extern_call-------------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------

scheduler.codegen_extern_call, node type: <class 'torch._inductor.ir.ExternKernelAlloc'>-------------------------
ir.codegen_reference: buf10
ir.codegen_reference: primals_4

Finished scheduler.codegen_extern_call-------------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------

scheduler.codegen_extern_call, node type: <class 'torch._inductor.ir.ExternKernelAlloc'>-------------------------
ir.codegen_reference: buf19
ir.codegen_reference: primals_7

Finished scheduler.codegen_extern_call-------------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------

scheduler.codegen_extern_call, node type: <class 'torch._inductor.ir.ExternKernelAlloc'>-------------------------
ir.codegen_reference: buf27
ir.codegen_reference: primals_10

Finished scheduler.codegen_extern_call-------------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------

scheduler.codegen_extern_call, node type: <class 'torch._inductor.ir.ExternKernelAlloc'>-------------------------
ir.codegen_reference: buf35
ir.codegen_reference: primals_13

Finished scheduler.codegen_extern_call-------------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------

scheduler.codegen_extern_call, node type: <class 'torch._inductor.ir.ExternKernelAlloc'>-------------------------
ir.codegen_reference: buf43
ir.codegen_reference: primals_16

Finished scheduler.codegen_extern_call-------------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------

scheduler.codegen_extern_call, node type: <class 'torch._inductor.ir.ExternKernelAlloc'>-------------------------
ir.codegen_reference: buf51
ir.codegen_reference: primals_19

Finished scheduler.codegen_extern_call-------------------------------

scheduler.codegen_extern_call, node type: <class 'torch._inductor.ir.ExternKernelAlloc'>-------------------------
ir.codegen_reference: buf43
ir.codegen_reference: primals_22

Finished scheduler.codegen_extern_call-------------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------

scheduler.codegen_extern_call, node type: <class 'torch._inductor.ir.ExternKernelAlloc'>-------------------------
ir.codegen_reference: buf67
ir.codegen_reference: primals_25

Finished scheduler.codegen_extern_call-------------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------

scheduler.codegen_extern_call, node type: <class 'torch._inductor.ir.ExternKernelAlloc'>-------------------------
ir.codegen_reference: buf75
ir.codegen_reference: primals_28

Finished scheduler.codegen_extern_call-------------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------

scheduler.codegen_extern_call, node type: <class 'torch._inductor.ir.ExternKernelAlloc'>-------------------------
ir.codegen_reference: buf83
ir.codegen_reference: primals_31

Finished scheduler.codegen_extern_call-------------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------

scheduler.codegen_extern_call, node type: <class 'torch._inductor.ir.ExternKernelAlloc'>-------------------------
ir.codegen_reference: buf91
ir.codegen_reference: primals_34

Finished scheduler.codegen_extern_call-------------------------------

scheduler.codegen_extern_call, node type: <class 'torch._inductor.ir.ExternKernelAlloc'>-------------------------
ir.codegen_reference: buf83
ir.codegen_reference: primals_37

Finished scheduler.codegen_extern_call-------------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------

scheduler.codegen_extern_call, node type: <class 'torch._inductor.ir.ExternKernelAlloc'>-------------------------
ir.codegen_reference: buf107
ir.codegen_reference: primals_40

Finished scheduler.codegen_extern_call-------------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------

scheduler.codegen_extern_call, node type: <class 'torch._inductor.ir.ExternKernelAlloc'>-------------------------
ir.codegen_reference: buf115
ir.codegen_reference: primals_43

Finished scheduler.codegen_extern_call-------------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------

scheduler.codegen_extern_call, node type: <class 'torch._inductor.ir.ExternKernelAlloc'>-------------------------
ir.codegen_reference: buf123
ir.codegen_reference: primals_46

Finished scheduler.codegen_extern_call-------------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------

scheduler.codegen_extern_call, node type: <class 'torch._inductor.ir.ExternKernelAlloc'>-------------------------
ir.codegen_reference: buf131
ir.codegen_reference: primals_49

Finished scheduler.codegen_extern_call-------------------------------

scheduler.codegen_extern_call, node type: <class 'torch._inductor.ir.ExternKernelAlloc'>-------------------------
ir.codegen_reference: buf123
ir.codegen_reference: primals_52

Finished scheduler.codegen_extern_call-------------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------

scheduler.codegen_extern_call, node type: <class 'torch._inductor.ir.ExternKernelAlloc'>-------------------------
ir.codegen_reference: buf147
ir.codegen_reference: primals_55

Finished scheduler.codegen_extern_call-------------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------

scheduler.codegen_extern_call, node type: <class 'torch._inductor.ir.ExternKernelAlloc'>-------------------------
ir.codegen_reference: buf155
ir.codegen_reference: primals_58

Finished scheduler.codegen_extern_call-------------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------

scheduler.codegen_extern_call, node type: <class 'torch._inductor.ir.ExternKernelOut'>-------------------------

ir.externkernelout.codegen--------------------
ir.codegen_reference: primals_62
ir.codegen_reference: buf165
ir.codegen_reference: buf166

wrapper.generate_extern_kernel_out------------

ir.externkernelout.codegen arguments
self.output_view: None
args: ['primals_62', 'buf165', 'as_strided(primals_61, (512, 1000), (1, 512))', 'alpha=1', 'beta=1', 'out=buf166']
ir.codegen_reference: buf166
self.codegen_reference(): buf166
self.kernel: extern_kernels.addmm, type: <class 'str'>
self.cpp_kernel: at::addmm_out
Wrapper: <torch._inductor.codegen.wrapper.WrapperCodeGen object at 0x2b0807dfb310>

Finished scheduler.codegen_extern_call-------------------------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------
ir.LoopBodyBlock.__call__---------------------------
codegen.triton.call_kernel---------------

Finished Scheduler.codegen--------------------------------------------

ir.codegen_reference: buf7
ir.codegen_reference: buf8
ir.codegen_reference: buf168
ir.codegen_reference: buf17
ir.codegen_reference: buf18
ir.codegen_reference: buf169
ir.codegen_reference: buf25
ir.codegen_reference: buf26
ir.codegen_reference: buf170
ir.codegen_reference: buf33
ir.codegen_reference: buf34
ir.codegen_reference: buf171
ir.codegen_reference: buf41
ir.codegen_reference: buf42
ir.codegen_reference: buf172
ir.codegen_reference: buf49
ir.codegen_reference: buf50
ir.codegen_reference: buf173
ir.codegen_reference: buf57
ir.codegen_reference: buf58
ir.codegen_reference: buf174
ir.codegen_reference: buf64
ir.codegen_reference: buf65
ir.codegen_reference: buf175
ir.codegen_reference: buf73
ir.codegen_reference: buf74
ir.codegen_reference: buf176
ir.codegen_reference: buf81
ir.codegen_reference: buf82
ir.codegen_reference: buf177
ir.codegen_reference: buf89
ir.codegen_reference: buf90
ir.codegen_reference: buf178
ir.codegen_reference: buf97
ir.codegen_reference: buf98
ir.codegen_reference: buf179
ir.codegen_reference: buf104
ir.codegen_reference: buf105
ir.codegen_reference: buf180
ir.codegen_reference: buf113
ir.codegen_reference: buf114
ir.codegen_reference: buf181
ir.codegen_reference: buf121
ir.codegen_reference: buf122
ir.codegen_reference: buf182
ir.codegen_reference: buf129
ir.codegen_reference: buf130
ir.codegen_reference: buf183
ir.codegen_reference: buf137
ir.codegen_reference: buf138
ir.codegen_reference: buf184
ir.codegen_reference: buf144
ir.codegen_reference: buf145
ir.codegen_reference: buf185
ir.codegen_reference: buf153
ir.codegen_reference: buf154
ir.codegen_reference: buf186
ir.codegen_reference: buf161
ir.codegen_reference: buf162
ir.codegen_reference: buf187
ir.codegen_reference: buf166
ir.codegen_reference: primals_1
ir.codegen_reference: primals_2
ir.codegen_reference: primals_4
ir.codegen_reference: primals_5
ir.codegen_reference: primals_7
ir.codegen_reference: primals_8
ir.codegen_reference: primals_10
ir.codegen_reference: primals_11
ir.codegen_reference: primals_13
ir.codegen_reference: primals_14
ir.codegen_reference: primals_16
ir.codegen_reference: primals_17
ir.codegen_reference: primals_19
ir.codegen_reference: primals_20
ir.codegen_reference: primals_22
ir.codegen_reference: primals_23
ir.codegen_reference: primals_25
ir.codegen_reference: primals_26
ir.codegen_reference: primals_28
ir.codegen_reference: primals_29
ir.codegen_reference: primals_31
ir.codegen_reference: primals_32
ir.codegen_reference: primals_34
ir.codegen_reference: primals_35
ir.codegen_reference: primals_37
ir.codegen_reference: primals_38
ir.codegen_reference: primals_40
ir.codegen_reference: primals_41
ir.codegen_reference: primals_43
ir.codegen_reference: primals_44
ir.codegen_reference: primals_46
ir.codegen_reference: primals_47
ir.codegen_reference: primals_49
ir.codegen_reference: primals_50
ir.codegen_reference: primals_52
ir.codegen_reference: primals_53
ir.codegen_reference: primals_55
ir.codegen_reference: primals_56
ir.codegen_reference: primals_58
ir.codegen_reference: primals_59
ir.codegen_reference: primals_123
ir.codegen_reference: buf0
ir.codegen_reference: buf6
ir.codegen_reference: buf9
ir.codegen_reference: buf10
ir.codegen_reference: buf11
ir.codegen_reference: buf12
ir.codegen_reference: buf16
ir.codegen_reference: buf19
ir.codegen_reference: buf20
ir.codegen_reference: buf24
ir.codegen_reference: buf27
ir.codegen_reference: buf28
ir.codegen_reference: buf32
ir.codegen_reference: buf35
ir.codegen_reference: buf36
ir.codegen_reference: buf40
ir.codegen_reference: buf43
ir.codegen_reference: buf44
ir.codegen_reference: buf48
ir.codegen_reference: buf51
ir.codegen_reference: buf52
ir.codegen_reference: buf56
ir.codegen_reference: buf59
ir.codegen_reference: buf63
ir.codegen_reference: buf67
ir.codegen_reference: buf68
ir.codegen_reference: buf72
ir.codegen_reference: buf75
ir.codegen_reference: buf76
ir.codegen_reference: buf80
ir.codegen_reference: buf83
ir.codegen_reference: buf84
ir.codegen_reference: buf88
ir.codegen_reference: buf91
ir.codegen_reference: buf92
ir.codegen_reference: buf96
ir.codegen_reference: buf99
ir.codegen_reference: buf103
ir.codegen_reference: buf107
ir.codegen_reference: buf108
ir.codegen_reference: buf112
ir.codegen_reference: buf115
ir.codegen_reference: buf116
ir.codegen_reference: buf120
ir.codegen_reference: buf123
ir.codegen_reference: buf124
ir.codegen_reference: buf128
ir.codegen_reference: buf131
ir.codegen_reference: buf132
ir.codegen_reference: buf136
ir.codegen_reference: buf139
ir.codegen_reference: buf143
ir.codegen_reference: buf147
ir.codegen_reference: buf148
ir.codegen_reference: buf152
ir.codegen_reference: buf155
ir.codegen_reference: buf156
ir.codegen_reference: buf160
ir.codegen_reference: buf165
ir.codegen_reference: buf167

graph.compile_to_module----------------------------
Code:

from ctypes import c_void_p, c_long
import torch
import math
import random
import os
import tempfile
from torch._inductor.utils import maybe_profile

from torch import empty_strided, as_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
async_compile = AsyncCompile()

import triton
import triton.language as tl
from torch._inductor.triton_heuristics import grid, start_graph, end_graph
from torch._C import _cuda_getCurrentRawStream as get_cuda_stream


# kernel path: /tmp/torchinductor_azhao/6g/c6gizm2vfn7eq57d3f7xr4gi3hp7z4rfhm6sgo6bvlpeczigtt6t.py
# Original ATen: aten._native_batch_norm_legit_functional

# aten._native_batch_norm_legit_functional => var_mean
triton_red_fused__native_batch_norm_legit_functional_0 = async_compile.triton('''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import reduction
from torch._inductor.utils import instance_descriptor

@reduction(
    size_hints=[128, 8192],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'constants': {}, 'mutated_arg_names': [], 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]}
)
@triton.jit
def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp1 = tl.zeros([XBLOCK, RBLOCK], tl.float32) + 0
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (6272*x0)), rmask & xmask, eviction_policy='evict_last', other=0)
        _tmp1 = tl.where(rmask & xmask, _tmp1 + tmp0, _tmp1)
    tmp1 = tl.sum(_tmp1, 1)[:, None]
    tl.store(out_ptr0 + x0, tmp1, xmask)
''')


# kernel path: /tmp/torchinductor_azhao/rp/crp23tdt2a7rstixttiwl2s4u36x57gyuqpjgyr4k2345wa2f3kk.py
# Original ATen: aten._native_batch_norm_legit_functional

# aten._native_batch_norm_legit_functional => add_2, mul_1, mul_2, var_mean
triton_per_fused__native_batch_norm_legit_functional_1 = async_compile.triton('''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import persistent_reduction
from torch._inductor.utils import instance_descriptor

@persistent_reduction(
    size_hints=[64, 2],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': 0, 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 64
    rnumel = 2
    RBLOCK: tl.constexpr = 2
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (2*x0)), rmask & xmask, other=0)
    tmp8 = tl.load(in_ptr1 + (x0), xmask)
    tmp2 = tl.where(rmask & xmask, tmp0, 0)
    tmp3 = tl.sum(tmp2, 1)[:, None]
    tmp4 = 12544.0
    tmp5 = tmp3 / tmp4
    tmp6 = 0.1
    tmp7 = tmp5 * tmp6
    tmp9 = 0.9
    tmp10 = tmp8 * tmp9
    tmp11 = tmp7 + tmp10
    tl.store(in_out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp5, xmask)
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp11, xmask)
''')


# kernel path: /tmp/torchinductor_azhao/wz/cwzqb3qidmslhk4sccxmhh73swdu7f2h2ieenprhqcx75ekduylh.py
# Original ATen: aten._native_batch_norm_legit_functional

# aten._native_batch_norm_legit_functional => var_mean
triton_red_fused__native_batch_norm_legit_functional_2 = async_compile.triton('''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import reduction
from torch._inductor.utils import instance_descriptor

@reduction(
    size_hints=[128, 8192],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': 0, 'constants': {}, 'mutated_arg_names': [], 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]}
)
@triton.jit
def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x3 = xindex
    x1 = (xindex // 2)
    tmp1 = tl.load(in_ptr1 + (x1), xmask)
    _tmp4 = tl.zeros([XBLOCK, RBLOCK], tl.float32) + 0
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_ptr0 + (r2 + (6272*x3)), rmask & xmask, eviction_policy='evict_last', other=0)
        tmp2 = tmp0 - tmp1
        tmp3 = tmp2 * tmp2
        _tmp4 = tl.where(rmask & xmask, _tmp4 + tmp3, _tmp4)
    tmp4 = tl.sum(_tmp4, 1)[:, None]
    tl.store(out_ptr0 + x3, tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_azhao/fu/cfuqxsylo6dmz5zhljvl4yz37rl2iwsopfr5vsarmvkc4ssrqolb.py
# Original ATen: aten._native_batch_norm_legit_functional

# aten._native_batch_norm_legit_functional => add_1, add_3, mul_3, mul_4, mul_5, rsqrt, squeeze_1, var_mean
triton_per_fused__native_batch_norm_legit_functional_3 = async_compile.triton('''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import persistent_reduction
from torch._inductor.utils import instance_descriptor

@persistent_reduction(
    size_hints=[64, 2],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'constants': {}, 'mutated_arg_names': [], 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]}
)
@triton.jit
def triton_(in_ptr0, in_ptr1, out_ptr0, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 64
    rnumel = 2
    RBLOCK: tl.constexpr = 2
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (2*x0)), rmask & xmask, other=0)
    tmp13 = tl.load(in_ptr1 + (x0), xmask)
    tmp2 = tl.where(rmask & xmask, tmp0, 0)
    tmp3 = tl.sum(tmp2, 1)[:, None]
    tmp4 = 12544.0
    tmp5 = tmp3 / tmp4
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp9 = 1.0000797257434426
    tmp10 = tmp5 * tmp9
    tmp11 = 0.1
    tmp12 = tmp10 * tmp11
    tmp14 = 0.9
    tmp15 = tmp13 * tmp14
    tmp16 = tmp12 + tmp15
    tl.store(out_ptr1 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp8, xmask)
    tl.store(out_ptr2 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp16, xmask)
    tl.store(out_ptr0 + x0, tmp3, xmask)
''')


# kernel path: /tmp/torchinductor_azhao/pk/cpkykkqvo2rev6jkof3mewvu5lxfzpkvvxfqqer7hcn4wetjid4h.py
# Original ATen: aten._native_batch_norm_legit_functional, aten.relu

# aten._native_batch_norm_legit_functional => add_1, add_4, mul, mul_6, rsqrt, sub, var_mean
# aten.relu => relu
triton_poi_fused__native_batch_norm_legit_functional_relu_4 = async_compile.triton('''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import pointwise
from torch._inductor.utils import instance_descriptor

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': 0, 'constants': {}, 'mutated_arg_names': [], 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]})
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 802816
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = xindex
    x1 = (xindex // 12544)
    tmp0 = tl.load(in_ptr0 + (x2), None)
    tmp1 = tl.load(in_ptr1 + (x1), None)
    tmp3 = tl.load(in_ptr2 + (x1), None)
    tmp10 = tl.load(in_ptr3 + (x1), None)
    tmp12 = tl.load(in_ptr4 + (x1), None)
    tmp2 = tmp0 - tmp1
    tmp4 = 12544.0
    tmp5 = tmp3 / tmp4
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp9 = tmp2 * tmp8
    tmp11 = tmp9 * tmp10
    tmp13 = tmp11 + tmp12
    tmp14 = tl.where(0 != 0, 0, tl.where(0 > tmp13, 0, tmp13))
    tl.store(out_ptr0 + (x2 + tl.zeros([XBLOCK], tl.int32)), tmp14, None)
''')


# kernel path: /tmp/torchinductor_azhao/dh/cdh5i5umz4xffs5id2owsctxxsz3hwsovkfwl63p6vczqkca3pem.py
# Original ATen: aten.max_pool2d_with_indices

# aten.max_pool2d_with_indices => getitem_2, getitem_3
triton_poi_fused_max_pool2d_with_indices_5 = async_compile.triton('''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import pointwise
from torch._inductor.utils import instance_descriptor

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*i64', 3: 'i32'}, 'device': 0, 'constants': {}, 'mutated_arg_names': [], 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]})
@triton.jit
def triton_(in_ptr0, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
    xnumel = 200704
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x1 = (xindex // 56) % 56
    x0 = xindex % 56
    x3 = (xindex // 56)
    x4 = xindex
    tmp0 = (-1) + (2*x1)
    tmp1 = 0
    tmp2 = tmp0 >= tmp1
    tmp3 = 112
    tmp4 = tmp0 < tmp3
    tmp5 = tmp2 & tmp4
    tmp6 = (-1) + (2*x0)
    tmp7 = tmp6 >= tmp1
    tmp8 = tmp6 < tmp3
    tmp9 = tmp7 & tmp8
    tmp10 = tmp5 & tmp9
    tmp11 = tl.load(in_ptr0 + ((-113) + (2*x0) + (224*x3) + tl.zeros([XBLOCK], tl.int32)), tmp10, other=0)
    tmp12 = tl.where(tmp10, tmp11, float("-inf"))
    tmp13 = 2*x0
    tmp14 = tmp13 >= tmp1
    tmp15 = tmp13 < tmp3
    tmp16 = tmp14 & tmp15
    tmp17 = tmp5 & tmp16
    tmp18 = tl.load(in_ptr0 + ((-112) + (2*x0) + (224*x3) + tl.zeros([XBLOCK], tl.int32)), tmp17, other=0)
    tmp19 = tl.where(tmp17, tmp18, float("-inf"))
    tmp20 = tl.where(tmp19 != tmp19, tmp19, tl.where(tmp19 > tmp12, tmp19, tmp12))
    tmp21 = 1 + (2*x0)
    tmp22 = tmp21 >= tmp1
    tmp23 = tmp21 < tmp3
    tmp24 = tmp22 & tmp23
    tmp25 = tmp5 & tmp24
    tmp26 = tl.load(in_ptr0 + ((-111) + (2*x0) + (224*x3) + tl.zeros([XBLOCK], tl.int32)), tmp25, other=0)
    tmp27 = tl.where(tmp25, tmp26, float("-inf"))
    tmp28 = tl.where(tmp27 != tmp27, tmp27, tl.where(tmp27 > tmp20, tmp27, tmp20))
    tmp29 = 2*x1
    tmp30 = tmp29 >= tmp1
    tmp31 = tmp29 < tmp3
    tmp32 = tmp30 & tmp31
    tmp33 = tmp32 & tmp9
    tmp34 = tl.load(in_ptr0 + ((-1) + (2*x0) + (224*x3) + tl.zeros([XBLOCK], tl.int32)), tmp33, other=0)
    tmp35 = tl.where(tmp33, tmp34, float("-inf"))
    tmp36 = tl.where(tmp35 != tmp35, tmp35, tl.where(tmp35 > tmp28, tmp35, tmp28))
    tmp37 = tmp32 & tmp16
    tmp38 = tl.load(in_ptr0 + ((2*x0) + (224*x3) + tl.zeros([XBLOCK], tl.int32)), tmp37, other=0)
    tmp39 = tl.where(tmp37, tmp38, float("-inf"))
    tmp40 = tl.where(tmp39 != tmp39, tmp39, tl.where(tmp39 > tmp36, tmp39, tmp36))
    tmp41 = tmp32 & tmp24
    tmp42 = tl.load(in_ptr0 + (1 + (2*x0) + (224*x3) + tl.zeros([XBLOCK], tl.int32)), tmp41, other=0)
    tmp43 = tl.where(tmp41, tmp42, float("-inf"))
    tmp44 = tl.where(tmp43 != tmp43, tmp43, tl.where(tmp43 > tmp40, tmp43, tmp40))
    tmp45 = 1 + (2*x1)
    tmp46 = tmp45 >= tmp1
    tmp47 = tmp45 < tmp3
    tmp48 = tmp46 & tmp47
    tmp49 = tmp48 & tmp9
    tmp50 = tl.load(in_ptr0 + (111 + (2*x0) + (224*x3) + tl.zeros([XBLOCK], tl.int32)), tmp49, other=0)
    tmp51 = tl.where(tmp49, tmp50, float("-inf"))
    tmp52 = tl.where(tmp51 != tmp51, tmp51, tl.where(tmp51 > tmp44, tmp51, tmp44))
    tmp53 = tmp48 & tmp16
    tmp54 = tl.load(in_ptr0 + (112 + (2*x0) + (224*x3) + tl.zeros([XBLOCK], tl.int32)), tmp53, other=0)
    tmp55 = tl.where(tmp53, tmp54, float("-inf"))
    tmp56 = tl.where(tmp55 != tmp55, tmp55, tl.where(tmp55 > tmp52, tmp55, tmp52))
    tmp57 = tmp48 & tmp24
    tmp58 = tl.load(in_ptr0 + (113 + (2*x0) + (224*x3) + tl.zeros([XBLOCK], tl.int32)), tmp57, other=0)
    tmp59 = tl.where(tmp57, tmp58, float("-inf"))
    tmp60 = tl.where(tmp59 != tmp59, tmp59, tl.where(tmp59 > tmp56, tmp59, tmp56))
    tmp61 = (-113) + (2*x0) + (224*x1)
    tmp62 = (-112) + (2*x0) + (224*x1)
    tmp63 = tmp19 > tmp12
    tmp64 = tl.where(tmp63, tmp62, tmp61)
    tmp65 = (-111) + (2*x0) + (224*x1)
    tmp66 = tmp27 > tmp20
    tmp67 = tl.where(tmp66, tmp65, tmp64)
    tmp68 = (-1) + (2*x0) + (224*x1)
    tmp69 = tmp35 > tmp28
    tmp70 = tl.where(tmp69, tmp68, tmp67)
    tmp71 = (2*x0) + (224*x1)
    tmp72 = tmp39 > tmp36
    tmp73 = tl.where(tmp72, tmp71, tmp70)
    tmp74 = 1 + (2*x0) + (224*x1)
    tmp75 = tmp43 > tmp40
    tmp76 = tl.where(tmp75, tmp74, tmp73)
    tmp77 = 111 + (2*x0) + (224*x1)
    tmp78 = tmp51 > tmp44
    tmp79 = tl.where(tmp78, tmp77, tmp76)
    tmp80 = 112 + (2*x0) + (224*x1)
    tmp81 = tmp55 > tmp52
    tmp82 = tl.where(tmp81, tmp80, tmp79)
    tmp83 = 113 + (2*x0) + (224*x1)
    tmp84 = tmp59 > tmp56
    tmp85 = tl.where(tmp84, tmp83, tmp82)
    tl.store(out_ptr0 + (x4 + tl.zeros([XBLOCK], tl.int32)), tmp60, None)
    tl.store(out_ptr1 + (x4 + tl.zeros([XBLOCK], tl.int32)), tmp85, None)
''')


# kernel path: /tmp/torchinductor_azhao/7d/c7d4ywuzyzy55wsdwmt6yf65nenbnfz5yoreukzvy5xnfpvmtlxw.py
# Original ATen: aten._native_batch_norm_legit_functional, aten.relu

# aten._native_batch_norm_legit_functional => add_6, add_7, add_8, add_9, mul_10, mul_11, mul_12, mul_13, mul_7, mul_8, mul_9, rsqrt_1, squeeze_4, sub_1, var_mean_1
# aten.relu => relu_1
triton_red_fused__native_batch_norm_legit_functional_relu_6 = async_compile.triton('''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import reduction
from torch._inductor.utils import instance_descriptor

@reduction(
    size_hints=[64, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: 'i32', 11: 'i32'}, 'device': 0, 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), equal_to_1=())]}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 64
    rnumel = 3136
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp1 = tl.zeros([XBLOCK, RBLOCK], tl.float32) + 0
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (3136*x0)), rmask & xmask, eviction_policy='evict_last', other=0)
        _tmp1 = tl.where(rmask & xmask, _tmp1 + tmp0, _tmp1)
    tmp1 = tl.sum(_tmp1, 1)[:, None]
    tmp6 = tl.load(in_ptr1 + (x0), xmask)
    tmp2 = 3136.0
    tmp3 = tmp1 / tmp2
    tmp4 = 0.1
    tmp5 = tmp3 * tmp4
    tmp7 = 0.9
    tmp8 = tmp6 * tmp7
    tmp9 = tmp5 + tmp8
    tl.store(in_out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp3, xmask)
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp9, xmask)
    _tmp13 = tl.zeros([XBLOCK, RBLOCK], tl.float32) + 0
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp10 = tl.load(in_ptr0 + (r1 + (3136*x0)), rmask & xmask, eviction_policy='evict_last', other=0)
        tmp11 = tmp10 - tmp3
        tmp12 = tmp11 * tmp11
        _tmp13 = tl.where(rmask & xmask, _tmp13 + tmp12, _tmp13)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tmp22 = tl.load(in_ptr2 + (x0), xmask)
    tmp24 = tl.load(in_ptr3 + (x0), xmask)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp14 = tl.load(in_ptr0 + (r1 + (3136*x0)), rmask & xmask, eviction_policy='evict_last', other=0)
        tmp15 = tmp14 - tmp3
        tmp16 = 3136.0
        tmp17 = tmp13 / tmp16
        tmp18 = 1e-05
        tmp19 = tmp17 + tmp18
        tmp20 = tl.math.rsqrt(tmp19)
        tmp21 = tmp15 * tmp20
        tmp23 = tmp21 * tmp22
        tmp25 = tmp23 + tmp24
        tmp26 = tl.where(0 != 0, 0, tl.where(0 > tmp25, 0, tmp25))
        tl.store(out_ptr2 + (r1 + (3136*x0) + tl.zeros([XBLOCK, RBLOCK], tl.int32)), tmp26, rmask & xmask)
    tmp36 = tl.load(in_ptr4 + (x0), xmask)
    tmp27 = 3136.0
    tmp28 = tmp13 / tmp27
    tmp29 = 1e-05
    tmp30 = tmp28 + tmp29
    tmp31 = tl.math.rsqrt(tmp30)
    tmp32 = 1.0003189792663476
    tmp33 = tmp28 * tmp32
    tmp34 = 0.1
    tmp35 = tmp33 * tmp34
    tmp37 = 0.9
    tmp38 = tmp36 * tmp37
    tmp39 = tmp35 + tmp38
    tl.store(out_ptr3 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp31, xmask)
    tl.store(out_ptr4 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp39, xmask)
''')


# kernel path: /tmp/torchinductor_azhao/2d/c2dlmucztbeageb75idkoceh3vrgmtpuga6cq5g2ffat3jvip7wz.py
# Original ATen: aten._native_batch_norm_legit_functional, aten.add, aten.relu

# aten._native_batch_norm_legit_functional => add_11, add_12, add_13, add_14, mul_14, mul_15, mul_16, mul_17, mul_18, mul_19, mul_20, rsqrt_2, squeeze_7, sub_2, var_mean_2
# aten.add => add_15
# aten.relu => relu_2
triton_red_fused__native_batch_norm_legit_functional_add_relu_7 = async_compile.triton('''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import reduction
from torch._inductor.utils import instance_descriptor

@reduction(
    size_hints=[64, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: 'i32', 12: 'i32'}, 'device': 0, 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), equal_to_1=())]}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 64
    rnumel = 3136
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp1 = tl.zeros([XBLOCK, RBLOCK], tl.float32) + 0
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (3136*x0)), rmask & xmask, eviction_policy='evict_last', other=0)
        _tmp1 = tl.where(rmask & xmask, _tmp1 + tmp0, _tmp1)
    tmp1 = tl.sum(_tmp1, 1)[:, None]
    tmp6 = tl.load(in_ptr1 + (x0), xmask)
    tmp2 = 3136.0
    tmp3 = tmp1 / tmp2
    tmp4 = 0.1
    tmp5 = tmp3 * tmp4
    tmp7 = 0.9
    tmp8 = tmp6 * tmp7
    tmp9 = tmp5 + tmp8
    tl.store(in_out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp3, xmask)
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp9, xmask)
    _tmp13 = tl.zeros([XBLOCK, RBLOCK], tl.float32) + 0
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp10 = tl.load(in_ptr0 + (r1 + (3136*x0)), rmask & xmask, eviction_policy='evict_last', other=0)
        tmp11 = tmp10 - tmp3
        tmp12 = tmp11 * tmp11
        _tmp13 = tl.where(rmask & xmask, _tmp13 + tmp12, _tmp13)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tmp22 = tl.load(in_ptr2 + (x0), xmask)
    tmp24 = tl.load(in_ptr3 + (x0), xmask)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp14 = tl.load(in_ptr0 + (r1 + (3136*x0)), rmask & xmask, eviction_policy='evict_last', other=0)
        tmp26 = tl.load(in_ptr4 + (r1 + (3136*x0)), rmask & xmask, eviction_policy='evict_last', other=0)
        tmp15 = tmp14 - tmp3
        tmp16 = 3136.0
        tmp17 = tmp13 / tmp16
        tmp18 = 1e-05
        tmp19 = tmp17 + tmp18
        tmp20 = tl.math.rsqrt(tmp19)
        tmp21 = tmp15 * tmp20
        tmp23 = tmp21 * tmp22
        tmp25 = tmp23 + tmp24
        tmp27 = tmp25 + tmp26
        tmp28 = tl.where(0 != 0, 0, tl.where(0 > tmp27, 0, tmp27))
        tl.store(out_ptr2 + (r1 + (3136*x0) + tl.zeros([XBLOCK, RBLOCK], tl.int32)), tmp28, rmask & xmask)
    tmp38 = tl.load(in_ptr5 + (x0), xmask)
    tmp29 = 3136.0
    tmp30 = tmp13 / tmp29
    tmp31 = 1e-05
    tmp32 = tmp30 + tmp31
    tmp33 = tl.math.rsqrt(tmp32)
    tmp34 = 1.0003189792663476
    tmp35 = tmp30 * tmp34
    tmp36 = 0.1
    tmp37 = tmp35 * tmp36
    tmp39 = 0.9
    tmp40 = tmp38 * tmp39
    tmp41 = tmp37 + tmp40
    tl.store(out_ptr3 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp33, xmask)
    tl.store(out_ptr4 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp41, xmask)
''')


# kernel path: /tmp/torchinductor_azhao/l6/cl6ehqvgxjlbnggk7y5lnl5xwenlsmpanxgjpd65qs2a5pp6wqha.py
# Original ATen: aten._native_batch_norm_legit_functional, aten.relu

# aten._native_batch_norm_legit_functional => add_28, add_29, add_30, add_31, mul_35, mul_36, mul_37, mul_38, mul_39, mul_40, mul_41, rsqrt_5, squeeze_16, sub_5, var_mean_5
# aten.relu => relu_5
triton_per_fused__native_batch_norm_legit_functional_relu_8 = async_compile.triton('''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import persistent_reduction
from torch._inductor.utils import instance_descriptor

@persistent_reduction(
    size_hints=[128, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: 'i32', 11: 'i32'}, 'device': 0, 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), equal_to_1=())]}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (784*x0)), rmask & xmask, other=0)
    tmp8 = tl.load(in_ptr1 + (x0), xmask)
    tmp22 = tl.load(in_ptr2 + (x0), xmask)
    tmp24 = tl.load(in_ptr3 + (x0), xmask)
    tmp30 = tl.load(in_ptr4 + (x0), xmask)
    tmp2 = tl.where(rmask & xmask, tmp0, 0)
    tmp3 = tl.sum(tmp2, 1)[:, None]
    tmp4 = 784.0
    tmp5 = tmp3 / tmp4
    tmp6 = 0.1
    tmp7 = tmp5 * tmp6
    tmp9 = 0.9
    tmp10 = tmp8 * tmp9
    tmp11 = tmp7 + tmp10
    tmp12 = tmp0 - tmp5
    tmp13 = tmp12 * tmp12
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp17 = tmp16 / tmp4
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp12 * tmp20
    tmp23 = tmp21 * tmp22
    tmp25 = tmp23 + tmp24
    tmp26 = tl.where(0 != 0, 0, tl.where(0 > tmp25, 0, tmp25))
    tmp27 = 1.0012771392081736
    tmp28 = tmp17 * tmp27
    tmp29 = tmp28 * tmp6
    tmp31 = tmp30 * tmp9
    tmp32 = tmp29 + tmp31
    tl.store(in_out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp5, xmask)
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp11, xmask)
    tl.store(out_ptr2 + (r1 + (784*x0) + tl.zeros([XBLOCK, RBLOCK], tl.int32)), tmp26, rmask & xmask)
    tl.store(out_ptr3 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp20, xmask)
    tl.store(out_ptr4 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp32, xmask)
''')


# kernel path: /tmp/torchinductor_azhao/6d/c6d25dnsrjdo4abm64f7afcmfnmyrljpqpmdsqmdpxcbwe7noemq.py
# Original ATen: aten._native_batch_norm_legit_functional, aten.add, aten.relu

# aten._native_batch_norm_legit_functional => add_33, add_34, add_35, add_36, add_38, add_39, add_40, add_41, mul_42, mul_43, mul_44, mul_45, mul_46, mul_47, mul_48, mul_49, mul_50, mul_51, mul_52, mul_53, mul_54, mul_55, rsqrt_6, rsqrt_7, squeeze_19, squeeze_22, sub_6, sub_7, var_mean_6, var_mean_7
# aten.add => add_42
# aten.relu => relu_6
triton_per_fused__native_batch_norm_legit_functional_add_relu_9 = async_compile.triton('''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import persistent_reduction
from torch._inductor.utils import instance_descriptor

@persistent_reduction(
    size_hints=[128, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: 'i32', 20: 'i32'}, 'device': 0, 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2'], 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20), equal_to_1=())]}
)
@triton.jit
def triton_(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, out_ptr0, out_ptr1, out_ptr4, out_ptr5, out_ptr6, out_ptr7, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (784*x0)), rmask & xmask, other=0)
    tmp8 = tl.load(in_ptr1 + (x0), xmask)
    tmp12 = tl.load(in_ptr2 + (r1 + (784*x0)), rmask & xmask, other=0)
    tmp18 = tl.load(in_ptr3 + (x0), xmask)
    tmp36 = tl.load(in_ptr4 + (x0), xmask)
    tmp38 = tl.load(in_ptr5 + (x0), xmask)
    tmp44 = tl.load(in_ptr6 + (x0), xmask)
    tmp46 = tl.load(in_ptr7 + (x0), xmask)
    tmp53 = tl.load(in_ptr8 + (x0), xmask)
    tmp58 = tl.load(in_ptr9 + (x0), xmask)
    tmp2 = tl.where(rmask & xmask, tmp0, 0)
    tmp3 = tl.sum(tmp2, 1)[:, None]
    tmp4 = 784.0
    tmp5 = tmp3 / tmp4
    tmp6 = 0.1
    tmp7 = tmp5 * tmp6
    tmp9 = 0.9
    tmp10 = tmp8 * tmp9
    tmp11 = tmp7 + tmp10
    tmp14 = tl.where(rmask & xmask, tmp12, 0)
    tmp15 = tl.sum(tmp14, 1)[:, None]
    tmp16 = tmp15 / tmp4
    tmp17 = tmp16 * tmp6
    tmp19 = tmp18 * tmp9
    tmp20 = tmp17 + tmp19
    tmp21 = tmp0 - tmp5
    tmp22 = tmp21 * tmp21
    tmp24 = tl.where(rmask & xmask, tmp22, 0)
    tmp25 = tl.sum(tmp24, 1)[:, None]
    tmp26 = tmp12 - tmp16
    tmp27 = tmp26 * tmp26
    tmp29 = tl.where(rmask & xmask, tmp27, 0)
    tmp30 = tl.sum(tmp29, 1)[:, None]
    tmp31 = tmp25 / tmp4
    tmp32 = 1e-05
    tmp33 = tmp31 + tmp32
    tmp34 = tl.math.rsqrt(tmp33)
    tmp35 = tmp21 * tmp34
    tmp37 = tmp35 * tmp36
    tmp39 = tmp37 + tmp38
    tmp40 = tmp30 / tmp4
    tmp41 = tmp40 + tmp32
    tmp42 = tl.math.rsqrt(tmp41)
    tmp43 = tmp26 * tmp42
    tmp45 = tmp43 * tmp44
    tmp47 = tmp45 + tmp46
    tmp48 = tmp39 + tmp47
    tmp49 = tl.where(0 != 0, 0, tl.where(0 > tmp48, 0, tmp48))
    tmp50 = 1.0012771392081736
    tmp51 = tmp31 * tmp50
    tmp52 = tmp51 * tmp6
    tmp54 = tmp53 * tmp9
    tmp55 = tmp52 + tmp54
    tmp56 = tmp40 * tmp50
    tmp57 = tmp56 * tmp6
    tmp59 = tmp58 * tmp9
    tmp60 = tmp57 + tmp59
    tl.store(in_out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp5, xmask)
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp11, xmask)
    tl.store(in_out_ptr1 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp16, xmask)
    tl.store(out_ptr1 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp20, xmask)
    tl.store(in_out_ptr2 + (r1 + (784*x0) + tl.zeros([XBLOCK, RBLOCK], tl.int32)), tmp49, rmask & xmask)
    tl.store(out_ptr4 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp34, xmask)
    tl.store(out_ptr5 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp55, xmask)
    tl.store(out_ptr6 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp42, xmask)
    tl.store(out_ptr7 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp60, xmask)
''')


# kernel path: /tmp/torchinductor_azhao/su/csutd6xp6v6r22vw5eofapizcos53x6t6vq7eip6xgkzxo43tvxi.py
# Original ATen: aten._native_batch_norm_legit_functional, aten.add, aten.relu

# aten._native_batch_norm_legit_functional => add_49, add_50, add_51, add_52, mul_63, mul_64, mul_65, mul_66, mul_67, mul_68, mul_69, rsqrt_9, squeeze_28, sub_9, var_mean_9
# aten.add => add_53
# aten.relu => relu_8
triton_per_fused__native_batch_norm_legit_functional_add_relu_10 = async_compile.triton('''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import persistent_reduction
from torch._inductor.utils import instance_descriptor

@persistent_reduction(
    size_hints=[128, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: 'i32', 12: 'i32'}, 'device': 0, 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), equal_to_1=())]}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (784*x0)), rmask & xmask, other=0)
    tmp8 = tl.load(in_ptr1 + (x0), xmask)
    tmp22 = tl.load(in_ptr2 + (x0), xmask)
    tmp24 = tl.load(in_ptr3 + (x0), xmask)
    tmp26 = tl.load(in_ptr4 + (r1 + (784*x0)), rmask & xmask, other=0)
    tmp32 = tl.load(in_ptr5 + (x0), xmask)
    tmp2 = tl.where(rmask & xmask, tmp0, 0)
    tmp3 = tl.sum(tmp2, 1)[:, None]
    tmp4 = 784.0
    tmp5 = tmp3 / tmp4
    tmp6 = 0.1
    tmp7 = tmp5 * tmp6
    tmp9 = 0.9
    tmp10 = tmp8 * tmp9
    tmp11 = tmp7 + tmp10
    tmp12 = tmp0 - tmp5
    tmp13 = tmp12 * tmp12
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp17 = tmp16 / tmp4
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp12 * tmp20
    tmp23 = tmp21 * tmp22
    tmp25 = tmp23 + tmp24
    tmp27 = tmp25 + tmp26
    tmp28 = tl.where(0 != 0, 0, tl.where(0 > tmp27, 0, tmp27))
    tmp29 = 1.0012771392081736
    tmp30 = tmp17 * tmp29
    tmp31 = tmp30 * tmp6
    tmp33 = tmp32 * tmp9
    tmp34 = tmp31 + tmp33
    tl.store(in_out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp5, xmask)
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp11, xmask)
    tl.store(out_ptr2 + (r1 + (784*x0) + tl.zeros([XBLOCK, RBLOCK], tl.int32)), tmp28, rmask & xmask)
    tl.store(out_ptr3 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp20, xmask)
    tl.store(out_ptr4 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp34, xmask)
''')


# kernel path: /tmp/torchinductor_azhao/j5/cj5vtlhybqs7nrgqnkra66rb2z254grno5s2konmualn5kf2epyd.py
# Original ATen: aten._native_batch_norm_legit_functional, aten.relu

# aten._native_batch_norm_legit_functional => add_55, add_56, add_57, add_58, mul_70, mul_71, mul_72, mul_73, mul_74, mul_75, mul_76, rsqrt_10, squeeze_31, sub_10, var_mean_10
# aten.relu => relu_9
triton_per_fused__native_batch_norm_legit_functional_relu_11 = async_compile.triton('''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import persistent_reduction
from torch._inductor.utils import instance_descriptor

@persistent_reduction(
    size_hints=[256, 256],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: 'i32', 11: 'i32'}, 'device': 0, 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), equal_to_1=())]}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 256
    rnumel = 196
    RBLOCK: tl.constexpr = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0)), rmask & xmask, other=0)
    tmp8 = tl.load(in_ptr1 + (x0), xmask)
    tmp22 = tl.load(in_ptr2 + (x0), xmask)
    tmp24 = tl.load(in_ptr3 + (x0), xmask)
    tmp30 = tl.load(in_ptr4 + (x0), xmask)
    tmp2 = tl.where(rmask & xmask, tmp0, 0)
    tmp3 = tl.sum(tmp2, 1)[:, None]
    tmp4 = 196.0
    tmp5 = tmp3 / tmp4
    tmp6 = 0.1
    tmp7 = tmp5 * tmp6
    tmp9 = 0.9
    tmp10 = tmp8 * tmp9
    tmp11 = tmp7 + tmp10
    tmp12 = tmp0 - tmp5
    tmp13 = tmp12 * tmp12
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp17 = tmp16 / tmp4
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp12 * tmp20
    tmp23 = tmp21 * tmp22
    tmp25 = tmp23 + tmp24
    tmp26 = tl.where(0 != 0, 0, tl.where(0 > tmp25, 0, tmp25))
    tmp27 = 1.005128205128205
    tmp28 = tmp17 * tmp27
    tmp29 = tmp28 * tmp6
    tmp31 = tmp30 * tmp9
    tmp32 = tmp29 + tmp31
    tl.store(in_out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp5, xmask)
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp11, xmask)
    tl.store(out_ptr2 + (r1 + (196*x0) + tl.zeros([XBLOCK, RBLOCK], tl.int32)), tmp26, rmask & xmask)
    tl.store(out_ptr3 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp20, xmask)
    tl.store(out_ptr4 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp32, xmask)
''')


# kernel path: /tmp/torchinductor_azhao/iy/ciytk2tik7zvmpwa2wzzl72cvpiru5maqt4rwjssn3srqanxh63f.py
# Original ATen: aten._native_batch_norm_legit_functional, aten.add, aten.relu

# aten._native_batch_norm_legit_functional => add_60, add_61, add_62, add_63, add_65, add_66, add_67, add_68, mul_77, mul_78, mul_79, mul_80, mul_81, mul_82, mul_83, mul_84, mul_85, mul_86, mul_87, mul_88, mul_89, mul_90, rsqrt_11, rsqrt_12, squeeze_34, squeeze_37, sub_11, sub_12, var_mean_11, var_mean_12
# aten.add => add_69
# aten.relu => relu_10
triton_per_fused__native_batch_norm_legit_functional_add_relu_12 = async_compile.triton('''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import persistent_reduction
from torch._inductor.utils import instance_descriptor

@persistent_reduction(
    size_hints=[256, 256],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: 'i32', 20: 'i32'}, 'device': 0, 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2'], 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), equal_to_1=())]}
)
@triton.jit
def triton_(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, out_ptr0, out_ptr1, out_ptr4, out_ptr5, out_ptr6, out_ptr7, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 256
    rnumel = 196
    RBLOCK: tl.constexpr = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0)), rmask & xmask, other=0)
    tmp8 = tl.load(in_ptr1 + (x0), xmask)
    tmp12 = tl.load(in_ptr2 + (r1 + (196*x0)), rmask & xmask, other=0)
    tmp18 = tl.load(in_ptr3 + (x0), xmask)
    tmp36 = tl.load(in_ptr4 + (x0), xmask)
    tmp38 = tl.load(in_ptr5 + (x0), xmask)
    tmp44 = tl.load(in_ptr6 + (x0), xmask)
    tmp46 = tl.load(in_ptr7 + (x0), xmask)
    tmp53 = tl.load(in_ptr8 + (x0), xmask)
    tmp58 = tl.load(in_ptr9 + (x0), xmask)
    tmp2 = tl.where(rmask & xmask, tmp0, 0)
    tmp3 = tl.sum(tmp2, 1)[:, None]
    tmp4 = 196.0
    tmp5 = tmp3 / tmp4
    tmp6 = 0.1
    tmp7 = tmp5 * tmp6
    tmp9 = 0.9
    tmp10 = tmp8 * tmp9
    tmp11 = tmp7 + tmp10
    tmp14 = tl.where(rmask & xmask, tmp12, 0)
    tmp15 = tl.sum(tmp14, 1)[:, None]
    tmp16 = tmp15 / tmp4
    tmp17 = tmp16 * tmp6
    tmp19 = tmp18 * tmp9
    tmp20 = tmp17 + tmp19
    tmp21 = tmp0 - tmp5
    tmp22 = tmp21 * tmp21
    tmp24 = tl.where(rmask & xmask, tmp22, 0)
    tmp25 = tl.sum(tmp24, 1)[:, None]
    tmp26 = tmp12 - tmp16
    tmp27 = tmp26 * tmp26
    tmp29 = tl.where(rmask & xmask, tmp27, 0)
    tmp30 = tl.sum(tmp29, 1)[:, None]
    tmp31 = tmp25 / tmp4
    tmp32 = 1e-05
    tmp33 = tmp31 + tmp32
    tmp34 = tl.math.rsqrt(tmp33)
    tmp35 = tmp21 * tmp34
    tmp37 = tmp35 * tmp36
    tmp39 = tmp37 + tmp38
    tmp40 = tmp30 / tmp4
    tmp41 = tmp40 + tmp32
    tmp42 = tl.math.rsqrt(tmp41)
    tmp43 = tmp26 * tmp42
    tmp45 = tmp43 * tmp44
    tmp47 = tmp45 + tmp46
    tmp48 = tmp39 + tmp47
    tmp49 = tl.where(0 != 0, 0, tl.where(0 > tmp48, 0, tmp48))
    tmp50 = 1.005128205128205
    tmp51 = tmp31 * tmp50
    tmp52 = tmp51 * tmp6
    tmp54 = tmp53 * tmp9
    tmp55 = tmp52 + tmp54
    tmp56 = tmp40 * tmp50
    tmp57 = tmp56 * tmp6
    tmp59 = tmp58 * tmp9
    tmp60 = tmp57 + tmp59
    tl.store(in_out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp5, xmask)
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp11, xmask)
    tl.store(in_out_ptr1 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp16, xmask)
    tl.store(out_ptr1 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp20, xmask)
    tl.store(in_out_ptr2 + (r1 + (196*x0) + tl.zeros([XBLOCK, RBLOCK], tl.int32)), tmp49, rmask & xmask)
    tl.store(out_ptr4 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp34, xmask)
    tl.store(out_ptr5 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp55, xmask)
    tl.store(out_ptr6 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp42, xmask)
    tl.store(out_ptr7 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp60, xmask)
''')


# kernel path: /tmp/torchinductor_azhao/e5/ce5i33lp3amys6qclfbj33ufqp637igsniewg5xtnnunovhj2rkx.py
# Original ATen: aten._native_batch_norm_legit_functional, aten.add, aten.relu

# aten._native_batch_norm_legit_functional => add_76, add_77, add_78, add_79, mul_100, mul_101, mul_102, mul_103, mul_104, mul_98, mul_99, rsqrt_14, squeeze_43, sub_14, var_mean_14
# aten.add => add_80
# aten.relu => relu_12
triton_per_fused__native_batch_norm_legit_functional_add_relu_13 = async_compile.triton('''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import persistent_reduction
from torch._inductor.utils import instance_descriptor

@persistent_reduction(
    size_hints=[256, 256],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: 'i32', 12: 'i32'}, 'device': 0, 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), equal_to_1=())]}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 256
    rnumel = 196
    RBLOCK: tl.constexpr = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0)), rmask & xmask, other=0)
    tmp8 = tl.load(in_ptr1 + (x0), xmask)
    tmp22 = tl.load(in_ptr2 + (x0), xmask)
    tmp24 = tl.load(in_ptr3 + (x0), xmask)
    tmp26 = tl.load(in_ptr4 + (r1 + (196*x0)), rmask & xmask, other=0)
    tmp32 = tl.load(in_ptr5 + (x0), xmask)
    tmp2 = tl.where(rmask & xmask, tmp0, 0)
    tmp3 = tl.sum(tmp2, 1)[:, None]
    tmp4 = 196.0
    tmp5 = tmp3 / tmp4
    tmp6 = 0.1
    tmp7 = tmp5 * tmp6
    tmp9 = 0.9
    tmp10 = tmp8 * tmp9
    tmp11 = tmp7 + tmp10
    tmp12 = tmp0 - tmp5
    tmp13 = tmp12 * tmp12
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp17 = tmp16 / tmp4
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp12 * tmp20
    tmp23 = tmp21 * tmp22
    tmp25 = tmp23 + tmp24
    tmp27 = tmp25 + tmp26
    tmp28 = tl.where(0 != 0, 0, tl.where(0 > tmp27, 0, tmp27))
    tmp29 = 1.005128205128205
    tmp30 = tmp17 * tmp29
    tmp31 = tmp30 * tmp6
    tmp33 = tmp32 * tmp9
    tmp34 = tmp31 + tmp33
    tl.store(in_out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp5, xmask)
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp11, xmask)
    tl.store(out_ptr2 + (r1 + (196*x0) + tl.zeros([XBLOCK, RBLOCK], tl.int32)), tmp28, rmask & xmask)
    tl.store(out_ptr3 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp20, xmask)
    tl.store(out_ptr4 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp34, xmask)
''')


# kernel path: /tmp/torchinductor_azhao/rv/crv6bvw4bkteor47cdzus2nv5jn6vz3btmolbixmi7llvtikb5ko.py
# Original ATen: aten._native_batch_norm_legit_functional, aten.relu

# aten._native_batch_norm_legit_functional => add_82, add_83, add_84, add_85, mul_105, mul_106, mul_107, mul_108, mul_109, mul_110, mul_111, rsqrt_15, squeeze_46, sub_15, var_mean_15
# aten.relu => relu_13
triton_per_fused__native_batch_norm_legit_functional_relu_14 = async_compile.triton('''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import persistent_reduction
from torch._inductor.utils import instance_descriptor

@persistent_reduction(
    size_hints=[512, 64],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: 'i32', 11: 'i32'}, 'device': 0, 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), equal_to_1=())]}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 512
    rnumel = 49
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (49*x0)), rmask & xmask, other=0)
    tmp8 = tl.load(in_ptr1 + (x0), xmask)
    tmp22 = tl.load(in_ptr2 + (x0), xmask)
    tmp24 = tl.load(in_ptr3 + (x0), xmask)
    tmp30 = tl.load(in_ptr4 + (x0), xmask)
    tmp2 = tl.where(rmask & xmask, tmp0, 0)
    tmp3 = tl.sum(tmp2, 1)[:, None]
    tmp4 = 49.0
    tmp5 = tmp3 / tmp4
    tmp6 = 0.1
    tmp7 = tmp5 * tmp6
    tmp9 = 0.9
    tmp10 = tmp8 * tmp9
    tmp11 = tmp7 + tmp10
    tmp12 = tmp0 - tmp5
    tmp13 = tmp12 * tmp12
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp17 = tmp16 / tmp4
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp12 * tmp20
    tmp23 = tmp21 * tmp22
    tmp25 = tmp23 + tmp24
    tmp26 = tl.where(0 != 0, 0, tl.where(0 > tmp25, 0, tmp25))
    tmp27 = 1.0208333333333333
    tmp28 = tmp17 * tmp27
    tmp29 = tmp28 * tmp6
    tmp31 = tmp30 * tmp9
    tmp32 = tmp29 + tmp31
    tl.store(in_out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp5, xmask)
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp11, xmask)
    tl.store(out_ptr2 + (r1 + (49*x0) + tl.zeros([XBLOCK, RBLOCK], tl.int32)), tmp26, rmask & xmask)
    tl.store(out_ptr3 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp20, xmask)
    tl.store(out_ptr4 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp32, xmask)
''')


# kernel path: /tmp/torchinductor_azhao/oj/cojvzj6gavwtntm4wztfgey7z6btlipl3linl6pqx4aosg4xhg3y.py
# Original ATen: aten._native_batch_norm_legit_functional, aten.add, aten.relu

# aten._native_batch_norm_legit_functional => add_87, add_88, add_89, add_90, add_92, add_93, add_94, add_95, mul_112, mul_113, mul_114, mul_115, mul_116, mul_117, mul_118, mul_119, mul_120, mul_121, mul_122, mul_123, mul_124, mul_125, rsqrt_16, rsqrt_17, squeeze_49, squeeze_52, sub_16, sub_17, var_mean_16, var_mean_17
# aten.add => add_96
# aten.relu => relu_14
triton_per_fused__native_batch_norm_legit_functional_add_relu_15 = async_compile.triton('''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import persistent_reduction
from torch._inductor.utils import instance_descriptor

@persistent_reduction(
    size_hints=[512, 64],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: 'i32', 20: 'i32'}, 'device': 0, 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2'], 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), equal_to_1=())]}
)
@triton.jit
def triton_(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, out_ptr0, out_ptr1, out_ptr4, out_ptr5, out_ptr6, out_ptr7, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 512
    rnumel = 49
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (49*x0)), rmask & xmask, other=0)
    tmp8 = tl.load(in_ptr1 + (x0), xmask)
    tmp12 = tl.load(in_ptr2 + (r1 + (49*x0)), rmask & xmask, other=0)
    tmp18 = tl.load(in_ptr3 + (x0), xmask)
    tmp36 = tl.load(in_ptr4 + (x0), xmask)
    tmp38 = tl.load(in_ptr5 + (x0), xmask)
    tmp44 = tl.load(in_ptr6 + (x0), xmask)
    tmp46 = tl.load(in_ptr7 + (x0), xmask)
    tmp53 = tl.load(in_ptr8 + (x0), xmask)
    tmp58 = tl.load(in_ptr9 + (x0), xmask)
    tmp2 = tl.where(rmask & xmask, tmp0, 0)
    tmp3 = tl.sum(tmp2, 1)[:, None]
    tmp4 = 49.0
    tmp5 = tmp3 / tmp4
    tmp6 = 0.1
    tmp7 = tmp5 * tmp6
    tmp9 = 0.9
    tmp10 = tmp8 * tmp9
    tmp11 = tmp7 + tmp10
    tmp14 = tl.where(rmask & xmask, tmp12, 0)
    tmp15 = tl.sum(tmp14, 1)[:, None]
    tmp16 = tmp15 / tmp4
    tmp17 = tmp16 * tmp6
    tmp19 = tmp18 * tmp9
    tmp20 = tmp17 + tmp19
    tmp21 = tmp0 - tmp5
    tmp22 = tmp21 * tmp21
    tmp24 = tl.where(rmask & xmask, tmp22, 0)
    tmp25 = tl.sum(tmp24, 1)[:, None]
    tmp26 = tmp12 - tmp16
    tmp27 = tmp26 * tmp26
    tmp29 = tl.where(rmask & xmask, tmp27, 0)
    tmp30 = tl.sum(tmp29, 1)[:, None]
    tmp31 = tmp25 / tmp4
    tmp32 = 1e-05
    tmp33 = tmp31 + tmp32
    tmp34 = tl.math.rsqrt(tmp33)
    tmp35 = tmp21 * tmp34
    tmp37 = tmp35 * tmp36
    tmp39 = tmp37 + tmp38
    tmp40 = tmp30 / tmp4
    tmp41 = tmp40 + tmp32
    tmp42 = tl.math.rsqrt(tmp41)
    tmp43 = tmp26 * tmp42
    tmp45 = tmp43 * tmp44
    tmp47 = tmp45 + tmp46
    tmp48 = tmp39 + tmp47
    tmp49 = tl.where(0 != 0, 0, tl.where(0 > tmp48, 0, tmp48))
    tmp50 = 1.0208333333333333
    tmp51 = tmp31 * tmp50
    tmp52 = tmp51 * tmp6
    tmp54 = tmp53 * tmp9
    tmp55 = tmp52 + tmp54
    tmp56 = tmp40 * tmp50
    tmp57 = tmp56 * tmp6
    tmp59 = tmp58 * tmp9
    tmp60 = tmp57 + tmp59
    tl.store(in_out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp5, xmask)
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp11, xmask)
    tl.store(in_out_ptr1 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp16, xmask)
    tl.store(out_ptr1 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp20, xmask)
    tl.store(in_out_ptr2 + (r1 + (49*x0) + tl.zeros([XBLOCK, RBLOCK], tl.int32)), tmp49, rmask & xmask)
    tl.store(out_ptr4 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp34, xmask)
    tl.store(out_ptr5 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp55, xmask)
    tl.store(out_ptr6 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp42, xmask)
    tl.store(out_ptr7 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp60, xmask)
''')


# kernel path: /tmp/torchinductor_azhao/dw/cdw7k7hpkd5ckrdb6oxo7udlkbmqzszouwlxungsfz7o5nzelxhz.py
# Original ATen: aten._native_batch_norm_legit_functional, aten.add, aten.mean, aten.relu, aten.threshold_backward, aten.view

# aten._native_batch_norm_legit_functional => add_103, add_104, add_105, add_106, mul_133, mul_134, mul_135, mul_136, mul_137, mul_138, mul_139, rsqrt_19, squeeze_58, sub_19, var_mean_19
# aten.add => add_107
# aten.mean => mean
# aten.relu => relu_16
# aten.threshold_backward => le
# aten.view => view
triton_per_fused__native_batch_norm_legit_functional_add_mean_relu_threshold_backward_view_16 = async_compile.triton('''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import persistent_reduction
from torch._inductor.utils import instance_descriptor

@persistent_reduction(
    size_hints=[512, 64],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*i1', 10: '*fp32', 11: '*fp32', 12: 'i32', 13: 'i32'}, 'device': 0, 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), equal_to_1=())]}
)
@triton.jit
def triton_(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, out_ptr3, out_ptr4, out_ptr5, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 512
    rnumel = 49
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (49*x0)), rmask & xmask, other=0)
    tmp8 = tl.load(in_ptr1 + (x0), xmask)
    tmp22 = tl.load(in_ptr2 + (x0), xmask)
    tmp24 = tl.load(in_ptr3 + (x0), xmask)
    tmp26 = tl.load(in_ptr4 + (r1 + (49*x0)), rmask & xmask, other=0)
    tmp37 = tl.load(in_ptr5 + (x0), xmask)
    tmp2 = tl.where(rmask & xmask, tmp0, 0)
    tmp3 = tl.sum(tmp2, 1)[:, None]
    tmp4 = 49.0
    tmp5 = tmp3 / tmp4
    tmp6 = 0.1
    tmp7 = tmp5 * tmp6
    tmp9 = 0.9
    tmp10 = tmp8 * tmp9
    tmp11 = tmp7 + tmp10
    tmp12 = tmp0 - tmp5
    tmp13 = tmp12 * tmp12
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp17 = tmp16 / tmp4
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp12 * tmp20
    tmp23 = tmp21 * tmp22
    tmp25 = tmp23 + tmp24
    tmp27 = tmp25 + tmp26
    tmp28 = tl.where(0 != 0, 0, tl.where(0 > tmp27, 0, tmp27))
    tmp29 = 0.0
    tmp30 = tmp28 <= tmp29
    tmp32 = tl.where(rmask & xmask, tmp28, 0)
    tmp33 = tl.sum(tmp32, 1)[:, None]
    tmp34 = 1.0208333333333333
    tmp35 = tmp17 * tmp34
    tmp36 = tmp35 * tmp6
    tmp38 = tmp37 * tmp9
    tmp39 = tmp36 + tmp38
    tmp40 = tmp33 / tmp4
    tl.store(in_out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp5, xmask)
    tl.store(out_ptr0 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp11, xmask)
    tl.store(out_ptr3 + (r1 + (49*x0) + tl.zeros([XBLOCK, RBLOCK], tl.int32)), tmp30, rmask & xmask)
    tl.store(out_ptr4 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp20, xmask)
    tl.store(out_ptr5 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp39, xmask)
    tl.store(in_out_ptr1 + (x0 + tl.zeros([XBLOCK, 1], tl.int32)), tmp40, xmask)
''')


# kernel path: /tmp/torchinductor_azhao/qw/cqwg6xm65f6onmmtzor5yhmo4g7ilgntyrmjgkk424wmslvqk73m.py
# Original ATen: aten.add

# aten.add => add
triton_poi_fused_add_17 = async_compile.triton('''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import pointwise
from torch._inductor.utils import instance_descriptor

@pointwise(size_hints=[1], filename=__file__, meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32'}, 'device': 0, 'constants': {}, 'mutated_arg_names': [], 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=())]})
@triton.jit
def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    tmp0 = tl.load(in_ptr0 + (0))
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
    tmp2 = 1
    tmp3 = tmp1 + tmp2
    tl.store(out_ptr0 + (0 + tl.zeros([XBLOCK], tl.int32)), tmp3, None)
''')


async_compile.wait(globals())
del async_compile

def call(args):
    primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26, primals_27, primals_28, primals_29, primals_30, primals_31, primals_32, primals_33, primals_34, primals_35, primals_36, primals_37, primals_38, primals_39, primals_40, primals_41, primals_42, primals_43, primals_44, primals_45, primals_46, primals_47, primals_48, primals_49, primals_50, primals_51, primals_52, primals_53, primals_54, primals_55, primals_56, primals_57, primals_58, primals_59, primals_60, primals_61, primals_62, primals_63, primals_64, primals_65, primals_66, primals_67, primals_68, primals_69, primals_70, primals_71, primals_72, primals_73, primals_74, primals_75, primals_76, primals_77, primals_78, primals_79, primals_80, primals_81, primals_82, primals_83, primals_84, primals_85, primals_86, primals_87, primals_88, primals_89, primals_90, primals_91, primals_92, primals_93, primals_94, primals_95, primals_96, primals_97, primals_98, primals_99, primals_100, primals_101, primals_102, primals_103, primals_104, primals_105, primals_106, primals_107, primals_108, primals_109, primals_110, primals_111, primals_112, primals_113, primals_114, primals_115, primals_116, primals_117, primals_118, primals_119, primals_120, primals_121, primals_122, primals_123 = args
    args.clear()
    start_graph()
    with torch.cuda._DeviceGuard(0):
        torch.cuda.set_device(0) # no-op to ensure context
        buf0 = extern_kernels.convolution(primals_123, primals_1, stride=(2, 2), padding=(3, 3), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf0, (1, 64, 112, 112), (802816, 12544, 112, 1))
        buf1 = empty_strided((1, 64, 1, 1, 2), (128, 2, 128, 128, 1), device='cuda', dtype=torch.float32)
        stream0 = get_cuda_stream(0)
        triton_red_fused__native_batch_norm_legit_functional_0.run(buf0, buf1, 128, 6272, grid=grid(128), stream=stream0)
        buf2 = empty_strided((1, 64, 1, 1), (64, 1, 64, 64), device='cuda', dtype=torch.float32)
        buf3 = buf2; del buf2  # reuse
        buf7 = empty_strided((64, ), (1, ), device='cuda', dtype=torch.float32)
        triton_per_fused__native_batch_norm_legit_functional_1.run(buf3, buf1, primals_63, buf7, 64, 2, grid=grid(64), stream=stream0)
        del primals_63
        buf4 = buf1; del buf1  # reuse
        triton_red_fused__native_batch_norm_legit_functional_2.run(buf0, buf3, buf4, 128, 6272, grid=grid(128), stream=stream0)
        buf5 = empty_strided((1, 64, 1, 1), (64, 1, 64, 64), device='cuda', dtype=torch.float32)
        buf6 = empty_strided((64, ), (1, ), device='cuda', dtype=torch.float32)
        buf8 = empty_strided((64, ), (1, ), device='cuda', dtype=torch.float32)
        triton_per_fused__native_batch_norm_legit_functional_3.run(buf4, primals_64, buf5, buf6, buf8, 64, 2, grid=grid(64), stream=stream0)
        del primals_64
        buf9 = empty_strided((1, 64, 112, 112), (802816, 12544, 112, 1), device='cuda', dtype=torch.float32)
        triton_poi_fused__native_batch_norm_legit_functional_relu_4.run(buf0, buf3, buf5, primals_2, primals_3, buf9, 802816, grid=grid(802816), stream=stream0)
        del primals_3
        buf10 = empty_strided((1, 64, 56, 56), (200704, 3136, 56, 1), device='cuda', dtype=torch.float32)
        buf11 = empty_strided((1, 64, 56, 56), (200704, 3136, 56, 1), device='cuda', dtype=torch.int64)
        triton_poi_fused_max_pool2d_with_indices_5.run(buf9, buf10, buf11, 200704, grid=grid(200704), stream=stream0)
        buf12 = extern_kernels.convolution(buf10, primals_4, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf12, (1, 64, 56, 56), (200704, 3136, 56, 1))
        buf13 = buf5; del buf5  # reuse
        buf14 = buf13; del buf13  # reuse
        buf17 = empty_strided((64, ), (1, ), device='cuda', dtype=torch.float32)
        buf19 = empty_strided((1, 64, 56, 56), (200704, 3136, 56, 1), device='cuda', dtype=torch.float32)
        buf16 = empty_strided((64, ), (1, ), device='cuda', dtype=torch.float32)
        buf18 = empty_strided((64, ), (1, ), device='cuda', dtype=torch.float32)
        triton_red_fused__native_batch_norm_legit_functional_relu_6.run(buf14, buf12, primals_66, primals_5, primals_6, primals_67, buf17, buf19, buf16, buf18, 64, 3136, grid=grid(64), stream=stream0)
        del primals_6
        del primals_66
        del primals_67
        buf20 = extern_kernels.convolution(buf19, primals_7, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf20, (1, 64, 56, 56), (200704, 3136, 56, 1))
        buf21 = empty_strided((1, 64, 1, 1), (64, 1, 64, 64), device='cuda', dtype=torch.float32)
        buf22 = buf21; del buf21  # reuse
        buf25 = empty_strided((64, ), (1, ), device='cuda', dtype=torch.float32)
        buf27 = empty_strided((1, 64, 56, 56), (200704, 3136, 56, 1), device='cuda', dtype=torch.float32)
        buf24 = empty_strided((64, ), (1, ), device='cuda', dtype=torch.float32)
        buf26 = empty_strided((64, ), (1, ), device='cuda', dtype=torch.float32)
        triton_red_fused__native_batch_norm_legit_functional_add_relu_7.run(buf22, buf20, primals_69, primals_8, primals_9, buf10, primals_70, buf25, buf27, buf24, buf26, 64, 3136, grid=grid(64), stream=stream0)
        del primals_69
        del primals_70
        del primals_9
        buf28 = extern_kernels.convolution(buf27, primals_10, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf28, (1, 64, 56, 56), (200704, 3136, 56, 1))
        buf29 = empty_strided((1, 64, 1, 1), (64, 1, 64, 64), device='cuda', dtype=torch.float32)
        buf30 = buf29; del buf29  # reuse
        buf33 = empty_strided((64, ), (1, ), device='cuda', dtype=torch.float32)
        buf35 = empty_strided((1, 64, 56, 56), (200704, 3136, 56, 1), device='cuda', dtype=torch.float32)
        buf32 = empty_strided((64, ), (1, ), device='cuda', dtype=torch.float32)
        buf34 = empty_strided((64, ), (1, ), device='cuda', dtype=torch.float32)
        triton_red_fused__native_batch_norm_legit_functional_relu_6.run(buf30, buf28, primals_72, primals_11, primals_12, primals_73, buf33, buf35, buf32, buf34, 64, 3136, grid=grid(64), stream=stream0)
        del primals_12
        del primals_72
        del primals_73
        buf36 = extern_kernels.convolution(buf35, primals_13, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf36, (1, 64, 56, 56), (200704, 3136, 56, 1))
        buf37 = empty_strided((1, 64, 1, 1), (64, 1, 64, 64), device='cuda', dtype=torch.float32)
        buf38 = buf37; del buf37  # reuse
        buf41 = empty_strided((64, ), (1, ), device='cuda', dtype=torch.float32)
        buf43 = empty_strided((1, 64, 56, 56), (200704, 3136, 56, 1), device='cuda', dtype=torch.float32)
        buf40 = empty_strided((64, ), (1, ), device='cuda', dtype=torch.float32)
        buf42 = empty_strided((64, ), (1, ), device='cuda', dtype=torch.float32)
        triton_red_fused__native_batch_norm_legit_functional_add_relu_7.run(buf38, buf36, primals_75, primals_14, primals_15, buf27, primals_76, buf41, buf43, buf40, buf42, 64, 3136, grid=grid(64), stream=stream0)
        del primals_15
        del primals_75
        del primals_76
        buf44 = extern_kernels.convolution(buf43, primals_16, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf44, (1, 128, 28, 28), (100352, 784, 28, 1))
        buf45 = as_strided(buf4, (1, 128, 1, 1), (128, 1, 128, 128)); del buf4  # reuse
        buf46 = buf45; del buf45  # reuse
        buf49 = empty_strided((128, ), (1, ), device='cuda', dtype=torch.float32)
        buf51 = empty_strided((1, 128, 28, 28), (100352, 784, 28, 1), device='cuda', dtype=torch.float32)
        buf48 = empty_strided((128, ), (1, ), device='cuda', dtype=torch.float32)
        buf50 = empty_strided((128, ), (1, ), device='cuda', dtype=torch.float32)
        triton_per_fused__native_batch_norm_legit_functional_relu_8.run(buf46, buf44, primals_78, primals_17, primals_18, primals_79, buf49, buf51, buf48, buf50, 128, 784, grid=grid(128), stream=stream0)
        del primals_18
        del primals_78
        del primals_79
        buf52 = extern_kernels.convolution(buf51, primals_19, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf52, (1, 128, 28, 28), (100352, 784, 28, 1))
        buf59 = extern_kernels.convolution(buf43, primals_22, stride=(2, 2), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf59, (1, 128, 28, 28), (100352, 784, 28, 1))
        buf53 = empty_strided((1, 128, 1, 1), (128, 1, 128, 128), device='cuda', dtype=torch.float32)
        buf54 = buf53; del buf53  # reuse
        buf57 = empty_strided((128, ), (1, ), device='cuda', dtype=torch.float32)
        buf60 = empty_strided((1, 128, 1, 1), (128, 1, 128, 128), device='cuda', dtype=torch.float32)
        buf61 = buf60; del buf60  # reuse
        buf64 = empty_strided((128, ), (1, ), device='cuda', dtype=torch.float32)
        buf66 = empty_strided((1, 128, 28, 28), (100352, 784, 28, 1), device='cuda', dtype=torch.float32)
        buf67 = buf66; del buf66  # reuse
        buf56 = empty_strided((128, ), (1, ), device='cuda', dtype=torch.float32)
        buf58 = empty_strided((128, ), (1, ), device='cuda', dtype=torch.float32)
        buf63 = empty_strided((128, ), (1, ), device='cuda', dtype=torch.float32)
        buf65 = empty_strided((128, ), (1, ), device='cuda', dtype=torch.float32)
        triton_per_fused__native_batch_norm_legit_functional_add_relu_9.run(buf54, buf61, buf67, buf52, primals_81, buf59, primals_84, primals_20, primals_21, primals_23, primals_24, primals_82, primals_85, buf57, buf64, buf56, buf58, buf63, buf65, 128, 784, grid=grid(128), stream=stream0)
        del primals_21
        del primals_24
        del primals_81
        del primals_82
        del primals_84
        del primals_85
        buf68 = extern_kernels.convolution(buf67, primals_25, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf68, (1, 128, 28, 28), (100352, 784, 28, 1))
        buf69 = empty_strided((1, 128, 1, 1), (128, 1, 128, 128), device='cuda', dtype=torch.float32)
        buf70 = buf69; del buf69  # reuse
        buf73 = empty_strided((128, ), (1, ), device='cuda', dtype=torch.float32)
        buf75 = empty_strided((1, 128, 28, 28), (100352, 784, 28, 1), device='cuda', dtype=torch.float32)
        buf72 = empty_strided((128, ), (1, ), device='cuda', dtype=torch.float32)
        buf74 = empty_strided((128, ), (1, ), device='cuda', dtype=torch.float32)
        triton_per_fused__native_batch_norm_legit_functional_relu_8.run(buf70, buf68, primals_87, primals_26, primals_27, primals_88, buf73, buf75, buf72, buf74, 128, 784, grid=grid(128), stream=stream0)
        del primals_27
        del primals_87
        del primals_88
        buf76 = extern_kernels.convolution(buf75, primals_28, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf76, (1, 128, 28, 28), (100352, 784, 28, 1))
        buf77 = empty_strided((1, 128, 1, 1), (128, 1, 128, 128), device='cuda', dtype=torch.float32)
        buf78 = buf77; del buf77  # reuse
        buf81 = empty_strided((128, ), (1, ), device='cuda', dtype=torch.float32)
        buf83 = empty_strided((1, 128, 28, 28), (100352, 784, 28, 1), device='cuda', dtype=torch.float32)
        buf80 = empty_strided((128, ), (1, ), device='cuda', dtype=torch.float32)
        buf82 = empty_strided((128, ), (1, ), device='cuda', dtype=torch.float32)
        triton_per_fused__native_batch_norm_legit_functional_add_relu_10.run(buf78, buf76, primals_90, primals_29, primals_30, buf67, primals_91, buf81, buf83, buf80, buf82, 128, 784, grid=grid(128), stream=stream0)
        del primals_30
        del primals_90
        del primals_91
        buf84 = extern_kernels.convolution(buf83, primals_31, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf84, (1, 256, 14, 14), (50176, 196, 14, 1))
        buf85 = empty_strided((1, 256, 1, 1), (256, 1, 256, 256), device='cuda', dtype=torch.float32)
        buf86 = buf85; del buf85  # reuse
        buf89 = empty_strided((256, ), (1, ), device='cuda', dtype=torch.float32)
        buf91 = empty_strided((1, 256, 14, 14), (50176, 196, 14, 1), device='cuda', dtype=torch.float32)
        buf88 = empty_strided((256, ), (1, ), device='cuda', dtype=torch.float32)
        buf90 = empty_strided((256, ), (1, ), device='cuda', dtype=torch.float32)
        triton_per_fused__native_batch_norm_legit_functional_relu_11.run(buf86, buf84, primals_93, primals_32, primals_33, primals_94, buf89, buf91, buf88, buf90, 256, 196, grid=grid(256), stream=stream0)
        del primals_33
        del primals_93
        del primals_94
        buf92 = extern_kernels.convolution(buf91, primals_34, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf92, (1, 256, 14, 14), (50176, 196, 14, 1))
        buf99 = extern_kernels.convolution(buf83, primals_37, stride=(2, 2), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf99, (1, 256, 14, 14), (50176, 196, 14, 1))
        buf93 = empty_strided((1, 256, 1, 1), (256, 1, 256, 256), device='cuda', dtype=torch.float32)
        buf94 = buf93; del buf93  # reuse
        buf97 = empty_strided((256, ), (1, ), device='cuda', dtype=torch.float32)
        buf100 = empty_strided((1, 256, 1, 1), (256, 1, 256, 256), device='cuda', dtype=torch.float32)
        buf101 = buf100; del buf100  # reuse
        buf104 = empty_strided((256, ), (1, ), device='cuda', dtype=torch.float32)
        buf106 = empty_strided((1, 256, 14, 14), (50176, 196, 14, 1), device='cuda', dtype=torch.float32)
        buf107 = buf106; del buf106  # reuse
        buf96 = empty_strided((256, ), (1, ), device='cuda', dtype=torch.float32)
        buf98 = empty_strided((256, ), (1, ), device='cuda', dtype=torch.float32)
        buf103 = empty_strided((256, ), (1, ), device='cuda', dtype=torch.float32)
        buf105 = empty_strided((256, ), (1, ), device='cuda', dtype=torch.float32)
        triton_per_fused__native_batch_norm_legit_functional_add_relu_12.run(buf94, buf101, buf107, buf92, primals_96, buf99, primals_99, primals_35, primals_36, primals_38, primals_39, primals_97, primals_100, buf97, buf104, buf96, buf98, buf103, buf105, 256, 196, grid=grid(256), stream=stream0)
        del primals_100
        del primals_36
        del primals_39
        del primals_96
        del primals_97
        del primals_99
        buf108 = extern_kernels.convolution(buf107, primals_40, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf108, (1, 256, 14, 14), (50176, 196, 14, 1))
        buf109 = empty_strided((1, 256, 1, 1), (256, 1, 256, 256), device='cuda', dtype=torch.float32)
        buf110 = buf109; del buf109  # reuse
        buf113 = empty_strided((256, ), (1, ), device='cuda', dtype=torch.float32)
        buf115 = empty_strided((1, 256, 14, 14), (50176, 196, 14, 1), device='cuda', dtype=torch.float32)
        buf112 = empty_strided((256, ), (1, ), device='cuda', dtype=torch.float32)
        buf114 = empty_strided((256, ), (1, ), device='cuda', dtype=torch.float32)
        triton_per_fused__native_batch_norm_legit_functional_relu_11.run(buf110, buf108, primals_102, primals_41, primals_42, primals_103, buf113, buf115, buf112, buf114, 256, 196, grid=grid(256), stream=stream0)
        del primals_102
        del primals_103
        del primals_42
        buf116 = extern_kernels.convolution(buf115, primals_43, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf116, (1, 256, 14, 14), (50176, 196, 14, 1))
        buf117 = empty_strided((1, 256, 1, 1), (256, 1, 256, 256), device='cuda', dtype=torch.float32)
        buf118 = buf117; del buf117  # reuse
        buf121 = empty_strided((256, ), (1, ), device='cuda', dtype=torch.float32)
        buf123 = empty_strided((1, 256, 14, 14), (50176, 196, 14, 1), device='cuda', dtype=torch.float32)
        buf120 = empty_strided((256, ), (1, ), device='cuda', dtype=torch.float32)
        buf122 = empty_strided((256, ), (1, ), device='cuda', dtype=torch.float32)
        triton_per_fused__native_batch_norm_legit_functional_add_relu_13.run(buf118, buf116, primals_105, primals_44, primals_45, buf107, primals_106, buf121, buf123, buf120, buf122, 256, 196, grid=grid(256), stream=stream0)
        del primals_105
        del primals_106
        del primals_45
        buf124 = extern_kernels.convolution(buf123, primals_46, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf124, (1, 512, 7, 7), (25088, 49, 7, 1))
        buf125 = empty_strided((1, 512, 1, 1), (512, 1, 512, 512), device='cuda', dtype=torch.float32)
        buf126 = buf125; del buf125  # reuse
        buf129 = empty_strided((512, ), (1, ), device='cuda', dtype=torch.float32)
        buf131 = empty_strided((1, 512, 7, 7), (25088, 49, 7, 1), device='cuda', dtype=torch.float32)
        buf128 = empty_strided((512, ), (1, ), device='cuda', dtype=torch.float32)
        buf130 = empty_strided((512, ), (1, ), device='cuda', dtype=torch.float32)
        triton_per_fused__native_batch_norm_legit_functional_relu_14.run(buf126, buf124, primals_108, primals_47, primals_48, primals_109, buf129, buf131, buf128, buf130, 512, 49, grid=grid(512), stream=stream0)
        del primals_108
        del primals_109
        del primals_48
        buf132 = extern_kernels.convolution(buf131, primals_49, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf132, (1, 512, 7, 7), (25088, 49, 7, 1))
        buf139 = extern_kernels.convolution(buf123, primals_52, stride=(2, 2), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf139, (1, 512, 7, 7), (25088, 49, 7, 1))
        buf133 = empty_strided((1, 512, 1, 1), (512, 1, 512, 512), device='cuda', dtype=torch.float32)
        buf134 = buf133; del buf133  # reuse
        buf137 = empty_strided((512, ), (1, ), device='cuda', dtype=torch.float32)
        buf140 = empty_strided((1, 512, 1, 1), (512, 1, 512, 512), device='cuda', dtype=torch.float32)
        buf141 = buf140; del buf140  # reuse
        buf144 = empty_strided((512, ), (1, ), device='cuda', dtype=torch.float32)
        buf146 = empty_strided((1, 512, 7, 7), (25088, 49, 7, 1), device='cuda', dtype=torch.float32)
        buf147 = buf146; del buf146  # reuse
        buf136 = empty_strided((512, ), (1, ), device='cuda', dtype=torch.float32)
        buf138 = empty_strided((512, ), (1, ), device='cuda', dtype=torch.float32)
        buf143 = empty_strided((512, ), (1, ), device='cuda', dtype=torch.float32)
        buf145 = empty_strided((512, ), (1, ), device='cuda', dtype=torch.float32)
        triton_per_fused__native_batch_norm_legit_functional_add_relu_15.run(buf134, buf141, buf147, buf132, primals_111, buf139, primals_114, primals_50, primals_51, primals_53, primals_54, primals_112, primals_115, buf137, buf144, buf136, buf138, buf143, buf145, 512, 49, grid=grid(512), stream=stream0)
        del primals_111
        del primals_112
        del primals_114
        del primals_115
        del primals_51
        del primals_54
        buf148 = extern_kernels.convolution(buf147, primals_55, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf148, (1, 512, 7, 7), (25088, 49, 7, 1))
        buf149 = empty_strided((1, 512, 1, 1), (512, 1, 512, 512), device='cuda', dtype=torch.float32)
        buf150 = buf149; del buf149  # reuse
        buf153 = empty_strided((512, ), (1, ), device='cuda', dtype=torch.float32)
        buf155 = empty_strided((1, 512, 7, 7), (25088, 49, 7, 1), device='cuda', dtype=torch.float32)
        buf152 = empty_strided((512, ), (1, ), device='cuda', dtype=torch.float32)
        buf154 = empty_strided((512, ), (1, ), device='cuda', dtype=torch.float32)
        triton_per_fused__native_batch_norm_legit_functional_relu_14.run(buf150, buf148, primals_117, primals_56, primals_57, primals_118, buf153, buf155, buf152, buf154, 512, 49, grid=grid(512), stream=stream0)
        del primals_117
        del primals_118
        del primals_57
        buf156 = extern_kernels.convolution(buf155, primals_58, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
        assert_size_stride(buf156, (1, 512, 7, 7), (25088, 49, 7, 1))
        buf157 = empty_strided((1, 512, 1, 1), (512, 1, 512, 512), device='cuda', dtype=torch.float32)
        buf158 = buf157; del buf157  # reuse
        buf161 = empty_strided((512, ), (1, ), device='cuda', dtype=torch.float32)
        buf167 = empty_strided((1, 512, 7, 7), (25088, 49, 7, 1), device='cuda', dtype=torch.bool)
        buf164 = empty_strided((1, 512, 1, 1), (512, 1, 512, 512), device='cuda', dtype=torch.float32)
        buf160 = empty_strided((512, ), (1, ), device='cuda', dtype=torch.float32)
        buf162 = empty_strided((512, ), (1, ), device='cuda', dtype=torch.float32)
        buf165 = as_strided(buf164, (1, 512), (512, 1)); del buf164  # reuse
        triton_per_fused__native_batch_norm_legit_functional_add_mean_relu_threshold_backward_view_16.run(buf158, buf165, buf156, primals_120, primals_59, primals_60, buf147, primals_121, buf161, buf167, buf160, buf162, 512, 49, grid=grid(512), stream=stream0)
        del primals_120
        del primals_121
        del primals_60
        buf166 = empty_strided((1, 1000), (1000, 1), device='cuda', dtype=torch.float32)
        extern_kernels.addmm(primals_62, buf165, as_strided(primals_61, (512, 1000), (1, 512)), alpha=1, beta=1, out=buf166)
        del primals_62
        buf168 = empty_strided((), (), device='cuda', dtype=torch.int64)
        triton_poi_fused_add_17.run(primals_65, buf168, 1, grid=grid(1), stream=stream0)
        del primals_65
        buf169 = empty_strided((), (), device='cuda', dtype=torch.int64)
        triton_poi_fused_add_17.run(primals_68, buf169, 1, grid=grid(1), stream=stream0)
        del primals_68
        buf170 = empty_strided((), (), device='cuda', dtype=torch.int64)
        triton_poi_fused_add_17.run(primals_71, buf170, 1, grid=grid(1), stream=stream0)
        del primals_71
        buf171 = empty_strided((), (), device='cuda', dtype=torch.int64)
        triton_poi_fused_add_17.run(primals_74, buf171, 1, grid=grid(1), stream=stream0)
        del primals_74
        buf172 = empty_strided((), (), device='cuda', dtype=torch.int64)
        triton_poi_fused_add_17.run(primals_77, buf172, 1, grid=grid(1), stream=stream0)
        del primals_77
        buf173 = empty_strided((), (), device='cuda', dtype=torch.int64)
        triton_poi_fused_add_17.run(primals_80, buf173, 1, grid=grid(1), stream=stream0)
        del primals_80
        buf174 = empty_strided((), (), device='cuda', dtype=torch.int64)
        triton_poi_fused_add_17.run(primals_83, buf174, 1, grid=grid(1), stream=stream0)
        del primals_83
        buf175 = empty_strided((), (), device='cuda', dtype=torch.int64)
        triton_poi_fused_add_17.run(primals_86, buf175, 1, grid=grid(1), stream=stream0)
        del primals_86
        buf176 = empty_strided((), (), device='cuda', dtype=torch.int64)
        triton_poi_fused_add_17.run(primals_89, buf176, 1, grid=grid(1), stream=stream0)
        del primals_89
        buf177 = empty_strided((), (), device='cuda', dtype=torch.int64)
        triton_poi_fused_add_17.run(primals_92, buf177, 1, grid=grid(1), stream=stream0)
        del primals_92
        buf178 = empty_strided((), (), device='cuda', dtype=torch.int64)
        triton_poi_fused_add_17.run(primals_95, buf178, 1, grid=grid(1), stream=stream0)
        del primals_95
        buf179 = empty_strided((), (), device='cuda', dtype=torch.int64)
        triton_poi_fused_add_17.run(primals_98, buf179, 1, grid=grid(1), stream=stream0)
        del primals_98
        buf180 = empty_strided((), (), device='cuda', dtype=torch.int64)
        triton_poi_fused_add_17.run(primals_101, buf180, 1, grid=grid(1), stream=stream0)
        del primals_101
        buf181 = empty_strided((), (), device='cuda', dtype=torch.int64)
        triton_poi_fused_add_17.run(primals_104, buf181, 1, grid=grid(1), stream=stream0)
        del primals_104
        buf182 = empty_strided((), (), device='cuda', dtype=torch.int64)
        triton_poi_fused_add_17.run(primals_107, buf182, 1, grid=grid(1), stream=stream0)
        del primals_107
        buf183 = empty_strided((), (), device='cuda', dtype=torch.int64)
        triton_poi_fused_add_17.run(primals_110, buf183, 1, grid=grid(1), stream=stream0)
        del primals_110
        buf184 = empty_strided((), (), device='cuda', dtype=torch.int64)
        triton_poi_fused_add_17.run(primals_113, buf184, 1, grid=grid(1), stream=stream0)
        del primals_113
        buf185 = empty_strided((), (), device='cuda', dtype=torch.int64)
        triton_poi_fused_add_17.run(primals_116, buf185, 1, grid=grid(1), stream=stream0)
        del primals_116
        buf186 = empty_strided((), (), device='cuda', dtype=torch.int64)
        triton_poi_fused_add_17.run(primals_119, buf186, 1, grid=grid(1), stream=stream0)
        del primals_119
        buf187 = empty_strided((), (), device='cuda', dtype=torch.int64)
        triton_poi_fused_add_17.run(primals_122, buf187, 1, grid=grid(1), stream=stream0)
        del primals_122
        end_graph()
        return (buf7, buf8, buf168, buf17, buf18, buf169, buf25, buf26, buf170, buf33, buf34, buf171, buf41, buf42, buf172, buf49, buf50, buf173, buf57, buf58, buf174, buf64, buf65, buf175, buf73, buf74, buf176, buf81, buf82, buf177, buf89, buf90, buf178, buf97, buf98, buf179, buf104, buf105, buf180, buf113, buf114, buf181, buf121, buf122, buf182, buf129, buf130, buf183, buf137, buf138, buf184, buf144, buf145, buf185, buf153, buf154, buf186, buf161, buf162, buf187, buf166, primals_1, primals_2, primals_4, primals_5, primals_7, primals_8, primals_10, primals_11, primals_13, primals_14, primals_16, primals_17, primals_19, primals_20, primals_22, primals_23, primals_25, primals_26, primals_28, primals_29, primals_31, primals_32, primals_34, primals_35, primals_37, primals_38, primals_40, primals_41, primals_43, primals_44, primals_46, primals_47, primals_49, primals_50, primals_52, primals_53, primals_55, primals_56, primals_58, primals_59, primals_123, buf0, buf6, buf9, buf10, buf11, buf12, buf16, buf19, buf20, buf24, buf27, buf28, buf32, buf35, buf36, buf40, buf43, buf44, buf48, buf51, buf52, buf56, buf59, buf63, buf67, buf68, buf72, buf75, buf76, buf80, buf83, buf84, buf88, buf91, buf92, buf96, buf99, buf103, buf107, buf108, buf112, buf115, buf116, buf120, buf123, buf124, buf128, buf131, buf132, buf136, buf139, buf143, buf147, buf148, buf152, buf155, buf156, buf160, buf165, as_strided(primals_61, (1000, 512), (512, 1)), buf167, as_strided(buf158, (1, 512, 1, 1), (512, 1, 1, 1)), as_strided(buf150, (1, 512, 1, 1), (512, 1, 1, 1)), as_strided(buf141, (1, 512, 1, 1), (512, 1, 1, 1)), as_strided(buf134, (1, 512, 1, 1), (512, 1, 1, 1)), as_strided(buf126, (1, 512, 1, 1), (512, 1, 1, 1)), as_strided(buf118, (1, 256, 1, 1), (256, 1, 1, 1)), as_strided(buf110, (1, 256, 1, 1), (256, 1, 1, 1)), as_strided(buf101, (1, 256, 1, 1), (256, 1, 1, 1)), as_strided(buf94, (1, 256, 1, 1), (256, 1, 1, 1)), as_strided(buf86, (1, 256, 1, 1), (256, 1, 1, 1)), as_strided(buf78, (1, 128, 1, 1), (128, 1, 1, 1)), as_strided(buf70, (1, 128, 1, 1), (128, 1, 1, 1)), as_strided(buf61, (1, 128, 1, 1), (128, 1, 1, 1)), as_strided(buf54, (1, 128, 1, 1), (128, 1, 1, 1)), as_strided(buf46, (1, 128, 1, 1), (128, 1, 1, 1)), as_strided(buf38, (1, 64, 1, 1), (64, 1, 1, 1)), as_strided(buf30, (1, 64, 1, 1), (64, 1, 1, 1)), as_strided(buf22, (1, 64, 1, 1), (64, 1, 1, 1)), as_strided(buf14, (1, 64, 1, 1), (64, 1, 1, 1)), as_strided(buf3, (1, 64, 1, 1), (64, 1, 1, 1)), )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    primals_1 = rand_strided((64, 3, 7, 7), (147, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    primals_2 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_3 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_4 = rand_strided((64, 64, 3, 3), (576, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_5 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_6 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_7 = rand_strided((64, 64, 3, 3), (576, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_8 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_9 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_10 = rand_strided((64, 64, 3, 3), (576, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_11 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_12 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_13 = rand_strided((64, 64, 3, 3), (576, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_14 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_15 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_16 = rand_strided((128, 64, 3, 3), (576, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_17 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_18 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_19 = rand_strided((128, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_20 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_21 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_22 = rand_strided((128, 64, 1, 1), (64, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_23 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_24 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_25 = rand_strided((128, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_26 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_27 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_28 = rand_strided((128, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_29 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_30 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_31 = rand_strided((256, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_32 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_33 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_34 = rand_strided((256, 256, 3, 3), (2304, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_35 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_36 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_37 = rand_strided((256, 128, 1, 1), (128, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_38 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_39 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_40 = rand_strided((256, 256, 3, 3), (2304, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_41 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_42 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_43 = rand_strided((256, 256, 3, 3), (2304, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_44 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_45 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_46 = rand_strided((512, 256, 3, 3), (2304, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_47 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_48 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_49 = rand_strided((512, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_50 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_51 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_52 = rand_strided((512, 256, 1, 1), (256, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_53 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_54 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_55 = rand_strided((512, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_56 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_57 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_58 = rand_strided((512, 512, 3, 3), (4608, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_59 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_60 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_61 = rand_strided((1000, 512), (512, 1), device='cuda:0', dtype=torch.float32)
    primals_62 = rand_strided((1000, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_63 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_64 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_65 = rand_strided((), (), device='cuda:0', dtype=torch.int64)
    primals_66 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_67 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_68 = rand_strided((), (), device='cuda:0', dtype=torch.int64)
    primals_69 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_70 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_71 = rand_strided((), (), device='cuda:0', dtype=torch.int64)
    primals_72 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_73 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_74 = rand_strided((), (), device='cuda:0', dtype=torch.int64)
    primals_75 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_76 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_77 = rand_strided((), (), device='cuda:0', dtype=torch.int64)
    primals_78 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_79 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_80 = rand_strided((), (), device='cuda:0', dtype=torch.int64)
    primals_81 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_82 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_83 = rand_strided((), (), device='cuda:0', dtype=torch.int64)
    primals_84 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_85 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_86 = rand_strided((), (), device='cuda:0', dtype=torch.int64)
    primals_87 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_88 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_89 = rand_strided((), (), device='cuda:0', dtype=torch.int64)
    primals_90 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_91 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_92 = rand_strided((), (), device='cuda:0', dtype=torch.int64)
    primals_93 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_94 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_95 = rand_strided((), (), device='cuda:0', dtype=torch.int64)
    primals_96 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_97 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_98 = rand_strided((), (), device='cuda:0', dtype=torch.int64)
    primals_99 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_100 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_101 = rand_strided((), (), device='cuda:0', dtype=torch.int64)
    primals_102 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_103 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_104 = rand_strided((), (), device='cuda:0', dtype=torch.int64)
    primals_105 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_106 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_107 = rand_strided((), (), device='cuda:0', dtype=torch.int64)
    primals_108 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_109 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_110 = rand_strided((), (), device='cuda:0', dtype=torch.int64)
    primals_111 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_112 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_113 = rand_strided((), (), device='cuda:0', dtype=torch.int64)
    primals_114 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_115 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_116 = rand_strided((), (), device='cuda:0', dtype=torch.int64)
    primals_117 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_118 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_119 = rand_strided((), (), device='cuda:0', dtype=torch.int64)
    primals_120 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_121 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_122 = rand_strided((), (), device='cuda:0', dtype=torch.int64)
    primals_123 = rand_strided((1, 3, 224, 224), (150528, 50176, 224, 1), device='cuda:0', dtype=torch.float32)
    return print_performance(lambda: call([primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26, primals_27, primals_28, primals_29, primals_30, primals_31, primals_32, primals_33, primals_34, primals_35, primals_36, primals_37, primals_38, primals_39, primals_40, primals_41, primals_42, primals_43, primals_44, primals_45, primals_46, primals_47, primals_48, primals_49, primals_50, primals_51, primals_52, primals_53, primals_54, primals_55, primals_56, primals_57, primals_58, primals_59, primals_60, primals_61, primals_62, primals_63, primals_64, primals_65, primals_66, primals_67, primals_68, primals_69, primals_70, primals_71, primals_72, primals_73, primals_74, primals_75, primals_76, primals_77, primals_78, primals_79, primals_80, primals_81, primals_82, primals_83, primals_84, primals_85, primals_86, primals_87, primals_88, primals_89, primals_90, primals_91, primals_92, primals_93, primals_94, primals_95, primals_96, primals_97, primals_98, primals_99, primals_100, primals_101, primals_102, primals_103, primals_104, primals_105, primals_106, primals_107, primals_108, primals_109, primals_110, primals_111, primals_112, primals_113, primals_114, primals_115, primals_116, primals_117, primals_118, primals_119, primals_120, primals_121, primals_122, primals_123]), times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.utils import compiled_module_main
    compiled_module_main('None', benchmark_compiled_module)

graph.compile_to_module

compile_fx_inner.result:
<function align_inputs.<locals>.run at 0x2b0855b1fd30>

compile_fx.fw_compiler_base--------------------------
(0.03993599861860275, 0.03891199827194214, 0.03993599861860275) 236027904
0.010ms    	0.003 GB 	  312.67GB/s 	 triton_red_fused__native_batch_norm_legit_functional_0
0.005ms    	0.000 GB 	    0.30GB/s 	 triton_per_fused__native_batch_norm_legit_functional_1
0.011ms    	0.003 GB 	  285.16GB/s 	 triton_red_fused__native_batch_norm_legit_functional_2
0.005ms    	0.000 GB 	    0.30GB/s 	 triton_per_fused__native_batch_norm_legit_functional_3
[31m0.012ms    	0.006 GB 	  522.75GB/s 	 triton_poi_fused__native_batch_norm_legit_functional_relu_4[39m
[31m0.018ms    	0.006 GB 	  304.89GB/s 	 triton_poi_fused_max_pool2d_with_indices_5[39m
(0.026623999699950218, 0.026623999699950218, 0.026623999699950218) 231211008
0.008ms    	0.002 GB 	  196.28GB/s 	 triton_red_fused__native_batch_norm_legit_functional_relu_6
(0.026623999699950218, 0.025599999353289604, 0.026623999699950218) 231211008
0.010ms    	0.002 GB 	  235.43GB/s 	 triton_red_fused__native_batch_norm_legit_functional_add_relu_7
(0.026623999699950218, 0.026623999699950218, 0.026623999699950218) 231211008
0.008ms    	0.002 GB 	  196.28GB/s 	 triton_red_fused__native_batch_norm_legit_functional_relu_6
(0.026623999699950218, 0.02659199945628643, 0.026623999699950218) 231211008
0.010ms    	0.002 GB 	  235.43GB/s 	 triton_red_fused__native_batch_norm_legit_functional_add_relu_7
(0.05222399905323982, 0.05222399905323982, 0.05225599929690361) 115605504
0.008ms    	0.001 GB 	   98.56GB/s 	 triton_per_fused__native_batch_norm_legit_functional_relu_8
(0.04095999896526337, 0.04095999896526337, 0.04095999896526337) 231211008
(0.014336000196635723, 0.014336000196635723, 0.014368000440299511) 12845056
0.011ms    	0.002 GB 	  143.36GB/s 	 triton_per_fused__native_batch_norm_legit_functional_add_relu_9
(0.04095999896526337, 0.04095999896526337, 0.04095999896526337) 231211008
0.008ms    	0.001 GB 	   98.56GB/s 	 triton_per_fused__native_batch_norm_legit_functional_relu_8
(0.04095999896526337, 0.04095999896526337, 0.04195199906826019) 231211008
0.008ms    	0.001 GB 	  147.56GB/s 	 triton_per_fused__native_batch_norm_legit_functional_add_relu_10
(0.08191999793052673, 0.08191999793052673, 0.08291199803352356) 115605504
0.006ms    	0.000 GB 	   66.83GB/s 	 triton_per_fused__native_batch_norm_legit_functional_relu_11
(0.07372800260782242, 0.07372800260782242, 0.07475200295448303) 231211008
(0.01740800030529499, 0.01740800030529499, 0.01740800030529499) 12845056
0.008ms    	0.001 GB 	  100.25GB/s 	 triton_per_fused__native_batch_norm_legit_functional_add_relu_12
(0.07372800260782242, 0.07372800260782242, 0.07475200295448303) 231211008
0.006ms    	0.000 GB 	   66.83GB/s 	 triton_per_fused__native_batch_norm_legit_functional_relu_11
(0.07372800260782242, 0.07372800260782242, 0.07472000271081924) 231211008
0.006ms    	0.001 GB 	   99.50GB/s 	 triton_per_fused__native_batch_norm_legit_functional_add_relu_13
(0.14950400590896606, 0.14847999811172485, 0.14950400590896606) 115605504
0.006ms    	0.000 GB 	   35.67GB/s 	 triton_per_fused__native_batch_norm_legit_functional_relu_14
(0.15769599378108978, 0.15769599378108978, 0.158720001578331) 231211008
(0.030719999223947525, 0.02969600073993206, 0.030719999223947525) 12845056
0.007ms    	0.000 GB 	   61.14GB/s 	 triton_per_fused__native_batch_norm_legit_functional_add_relu_15
(0.15769599378108978, 0.15667200088500977, 0.158720001578331) 231211008
0.006ms    	0.000 GB 	   35.67GB/s 	 triton_per_fused__native_batch_norm_legit_functional_relu_14
(0.15667200088500977, 0.15667200088500977, 0.15769599378108978) 231211008
0.007ms    	0.000 GB 	   34.64GB/s 	 triton_per_fused__native_batch_norm_legit_functional_add_mean_relu_threshold_backward_view_16
(0.010239999741315842, 0.009216000325977802, 0.010239999741315842) 1024000
0.004ms    	0.000 GB 	    0.00GB/s 	 triton_poi_fused_add_17
0.004ms    	0.000 GB 	    0.00GB/s 	 triton_poi_fused_add_17
0.004ms    	0.000 GB 	    0.00GB/s 	 triton_poi_fused_add_17
0.004ms    	0.000 GB 	    0.00GB/s 	 triton_poi_fused_add_17
0.004ms    	0.000 GB 	    0.00GB/s 	 triton_poi_fused_add_17
0.004ms    	0.000 GB 	    0.00GB/s 	 triton_poi_fused_add_17
0.004ms    	0.000 GB 	    0.00GB/s 	 triton_poi_fused_add_17
0.004ms    	0.000 GB 	    0.00GB/s 	 triton_poi_fused_add_17
0.004ms    	0.000 GB 	    0.00GB/s 	 triton_poi_fused_add_17
0.004ms    	0.000 GB 	    0.00GB/s 	 triton_poi_fused_add_17
0.004ms    	0.000 GB 	    0.00GB/s 	 triton_poi_fused_add_17
0.004ms    	0.000 GB 	    0.00GB/s 	 triton_poi_fused_add_17
0.004ms    	0.000 GB 	    0.00GB/s 	 triton_poi_fused_add_17
0.004ms    	0.000 GB 	    0.00GB/s 	 triton_poi_fused_add_17
0.004ms    	0.000 GB 	    0.00GB/s 	 triton_poi_fused_add_17
0.004ms    	0.000 GB 	    0.00GB/s 	 triton_poi_fused_add_17
0.004ms    	0.000 GB 	    0.00GB/s 	 triton_poi_fused_add_17
0.004ms    	0.000 GB 	    0.00GB/s 	 triton_poi_fused_add_17
0.004ms    	0.000 GB 	    0.00GB/s 	 triton_poi_fused_add_17
0.004ms    	0.000 GB 	    0.00GB/s 	 triton_poi_fused_add_17
SUMMARY (/tmp/torchinductor_azhao/4n/c4nb662fsfi2h3f5rsuhrp2aek4rkrqfclaw5gm224lvdtgnzwh6.py)
0.27ms   	 0.03 GB	 126.96GB/s

Runtime: 0.2704
